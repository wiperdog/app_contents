<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>WiperDogLib</web>
  <name>RealtimeData</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>Main.AllDocs</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1386227303000</creationDate>
  <date>1387166573000</date>
  <contentUpdateDate>1387166573000</contentUpdateDate>
  <version>1.1</version>
  <title>RealtimeData</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>
{{groovy}}
import com.google.gson.*
import java.text.SimpleDateFormat

def job = request.get("jobName")
def istIid = request.get("IstIid")
def from_date = request.get("fromDate")
def to_date = request.get("toDate")
def limit = request.get("limit")
def type = request.get("type")
if(limit != null &amp;&amp; limit != ''){
	limit = limit.toInteger()
}
def drawMethod = request.get("drawMethod")

if (job != null &amp;&amp; istIid != null &amp;&amp; from_date != null &amp;&amp; drawMethod != null) {
    def result
    Gson gson = new GsonBuilder().setPrettyPrinting().create()
    if (drawMethod == "overWrite") {
        result = services.MongoDBConnection.getDataAllFields(job, 10, istIid)
	def finalData = []
	def finalMapData = [:]
	def typeChart = result[0].type
	if (result[0].type == "Subtyped") {
		def dataSubtype = services.DataToDrawChart.getDataToDrawSubtype(result)
		for(def key in dataSubtype.keySet()){
                        def value = dataSubtype[key]
			finalMapData = drawChart(key, value, typeChart)
			finalData.add(finalMapData)
			finalMapData = [:]
		}
	} else if (result[0].type == "Store") {
	    def key = ""
	    finalMapData = drawChart(key, result, typeChart)
	    finalData.add(finalMapData)
	    finalMapData = [:]
	}

	// Response data
	if (finalData != []) {
	    println gson.toJson(finalData)
	}
    } else if (drawMethod == "addPoint") {
        result = services.MongoDBConnection.getDataInPeriod(job, from_date, '', 10, istIid)
        def chartData = []
        if(result[0] != null){
            def jobType = result[0]['type']
            if (jobType == "Store") {
	        chartData = getAdditionData(result, '')
            } else if (jobType == "Subtyped") {
                def dataSubtype = services.DataToDrawChart.getDataToDrawSubtype(result) 
                for(key in dataSubtype.keySet()){
                    def value = dataSubtype[key]
                    def chartDataSubtyped = getAdditionData(value, key)
                    for(dat in chartDataSubtyped){
                        chartData.add(dat)
                    }
	        }
	    }
        }
        if (chartData != []) {
            println gson.toJson(chartData)
        }
    } else if(drawMethod == "updateChart"){
        if(from_date != "" || to_date != ""){
            result = services.MongoDBConnection.getDataInPeriod(job,from_date,to_date,limit,istIid)
        } else {
            result = services.MongoDBConnection.getDataAllFields(job,limit,istIid)
        }
        for(item in result){
            def newdate = new Date().parse("yyyyMMddHHmmssz", item['fetchAt'])
            item['fetchAt'] = newdate.format('yyyy/MM/dd HH:mm:ss z')
        }
        def dataUpdate = []
        def dataUpdateSubtyped = []
        if(result[0] != null){
            def jobType = result[0]['type']
            if(jobType == "Store") {
		if(type == 'pie'){
			dataUpdate = services.DataToDrawChart.getDataToDrawPie(result)
		} else if(type == 'line'){
			dataUpdate = services.DataToDrawChart.getDataToDrawLine(result)
		} else if(type == 'bar'){
			dataUpdate = services.DataToDrawChart.getDataToDrawBar(result)
		} else if(type == 'area'){
			dataUpdate = services.DataToDrawChart.getDataToDrawArea(result)		
		}
                if (dataUpdate != []) {
                        println gson.toJson(dataUpdate)
                }
            } else if (jobType == "Subtyped") {
		dataUpdateSubtyped = services.DataToDrawChart.getDataToDrawSubtype(result)
		def finalMap = [:]
		for(key in dataUpdateSubtyped.keySet()){
                        def value = dataUpdateSubtyped[key]
			if(type == 'pie'){
				dataUpdate = services.DataToDrawChart.getDataToDrawPie(value)
			} else if(type == 'line'){
				dataUpdate = services.DataToDrawChart.getDataToDrawLine(value)
			} else if(type == 'bar'){
				dataUpdate = services.DataToDrawChart.getDataToDrawBar(value)
			} else if(type == 'area'){
				dataUpdate = services.DataToDrawChart.getDataToDrawArea(value)		
			}
			finalMap[key] = dataUpdate
		}
		println parseJson(finalMap)
	    }
        }
    }
    //services.MongoDBConnection.closeConnection()
}

/**
* draw chart with data respective
* @param key key of data subtyped
* @param value first data draw chart
* @param typeChart type of data draw chart
*/
def drawChart(key,value,typeChart) {
	def dataPie = getDataJson(value,"pie")
	def lstName
	
	//get list name of data pie
	if(dataPie.size() &gt; 0 ){
		lstName = dataPie['name']
	}
	//convert name of list name of data pie to format number_name
	def tmpListNameContainer = []
	if(lstName != null) {
		def chartNumPie = 0
		def tmpLst
		//for each data of list name
		for(def nameContainer in lstName){
		    tmpLst = []
		    for(def nameContainerItem in nameContainer ){
		        nameContainerItem = chartNumPie + "_" + nameContainerItem.replaceAll("\\.", "_")
                        if(typeChart == "Store") {
                            //add to list name container of data Store
                	    tmpListNameContainer.add(nameContainerItem)
		        } else if(typeChart == "Subtyped") {
		            tmpLst.add(nameContainerItem )
		        }
		    }
		    //add to list name container of data Subtyped
                    if(typeChart == "Subtyped") {
                        tmpListNameContainer.add(tmpLst)
                        chartNumPie++
                    }
	        }
	}
	//get data json of pie
	def jsonPie = parseJson(dataPie)

	//get data json of container pie
	def jsonContainerPie = parseJson(tmpListNameContainer)	

	//Prepare data, list container for draw chart and tags of hidden chart
        def mapDataToDraw = [:]
        //mapDataToDraw['value'] = value
        mapDataToDraw['typeChart'] = typeChart
        mapDataToDraw['jsonPie'] = jsonPie
        mapDataToDraw['jsonContainerPie'] = jsonContainerPie
        mapDataToDraw['key'] = key
        return mapDataToDraw
}

/**
 * getDataJson Get data to draw chart
 * @param value first data draw chart
 * @param type type of chart
 * @return data data after convert to draw chart
*/
def getDataJson(value,type) {
	def data = []
	if(type == "pie" &amp;&amp; services.DataToDrawChart.getDataToDrawPie(value) != []) {
		//get data to draw pie
		data = services.DataToDrawChart.getDataToDrawPie(value)
	}
	return data
}

/**
 * parseJson: Convert data to json
 * @param data data need to convert
 * @return json data after convert to json
*/
def parseJson(data) {
	def json
	if(data != []) {
		//convert data to json
		json = com.mongodb.util.JSON.serialize(data)
	}
	return json
}

/**
 * getAdditionData: get informations of points to be added from previous monitoring to current monitoring to draw chart
 * @param collection table data in mongo db
 * @param key key of data (store, subtyped)
 * @param typeOfChart line, bar, area
 * @return finalListData
*/
def getAdditionData(collection, key) {
    def finalListData = []
    def chartAreaNum = 0
    def chartBarNum = 0
    if(collection != null &amp;&amp; collection[0] != null &amp;&amp; collection[0].KEYEXPR != null){
        def key_chart = collection[0].KEYEXPR._chart
        def key_root = collection[0].KEYEXPR._root
        def key_unit = collection[0].KEYEXPR._unit
        if (key_unit == null) {
	    key_unit = [:]
        }
        if (key_root == null) {
	    key_root = [:]
        }
        //Convert format
        def lstDataForKey = []
        for(chart in key_chart){
            
           //Get declaration chart info
           def chartCollumns = chart.chart_columns
	   def hintColumns = chart.chart_columns.clone()
	   if(chart.hint_columns != null){
	       for(hintCol in chart.hint_columns){
	           if(!hintColumns.contains(hintCol)){
	               hintColumns.add(hintCol)
	           }
	       }
            }
            if (chart.type == "line") {
                lstDataForKey = getAdditionDataLine(collection, key, chartCollumns, hintColumns, key_root, key_unit)
            } else if (chart.type == "bar") {
                lstDataForKey = getAdditionDataBar(collection, chartCollumns, hintColumns, key_root, key_unit, chartBarNum, key)
                chartBarNum ++
            } else if (chart.type == "area") {
                lstDataForKey = getAdditionDataArea(collection, chartCollumns, hintColumns, key_root, key_unit, chartAreaNum, chart.name, key)
                chartAreaNum ++
            }
            for(dat4key in lstDataForKey){
                finalListData.add(dat4key)
            }
            lstDataForKey = []
        }
        return finalListData
    }
}

/**
 * getAdditionDataLine: get informations of points to be added from previous monitoring to current monitoring to draw line chart
 * @param collection table data in mongo db
 * @param key key of data (store, subtyped)
 * @param chartCollumns
 * @param hintColumns
 * @param key_root
 * @param key_unit
 * @return returnResult 
*/
def getAdditionDataLine(collection, key = '', chartCollumns, hintColumns, key_root, key_unit) {
    def returnResult = []
    def resultRecord = [:]
    //Chart name
    def chartName
    for(col in chartCollumns){
        if(chartName != null){
            chartName += "_" + col
       }else {
           chartName = col
       }
    }
    for(record in collection){
        //Type
        resultRecord["type"] = "line_"
        //Chart name
        resultRecord["chartName"] = chartName
        if (key != '') {
            resultRecord["type"] = "line"
            resultRecord["chartName"] = key + "_" + chartName
        }
        //Categories
        resultRecord["categories"] = convertFetchAtBin(record.fetchedAt_bin)

        // Chart data
        def chartDataList = []
        def chartRecord
              
        //Hint data
        def hintDataList = []
        def hintRecord

        //Loop each data in one monitor data
        def dataMonitor = record['data']

                     if (key_root == [:] &amp;&amp; record['data'].size() &gt;= 1) {
                         def newCollection = []
                         newCollection.add(record['data'][record['data'].size() - 1]) 
                         dataMonitor = newCollection
                     } 
        for(dataRecord in dataMonitor){
            //Get name key
	    def chartKeyName
	    for(keyRoot in key_root){
	        if(chartKeyName == null){
	            chartKeyName = dataRecord[keyRoot]
		}else{
		    chartKeyName+= "." + dataRecord[keyRoot]
		}
            }
            //Loop to get chart data
            for(chartColumnItem in chartCollumns){
                chartRecord = [:]
                hintRecord = [:]
                         
                //Get series name
                if (chartKeyName != null){
                    chartRecord["seriesName"] = chartKeyName + "($chartColumnItem)"
                    hintRecord["seriesName"] = chartKeyName + "($chartColumnItem)"
                } else {
                    chartRecord["seriesName"] = chartColumnItem
                    hintRecord["seriesName"] = chartColumnItem
                }
                //Get value of chart data
                chartRecord["value"] = dataRecord[chartColumnItem]
                         
                //Add to list data
                chartDataList.add(chartRecord)
                         
                //Get hint data
                def hintRecordDetail = [:]
                def keyUnit
                for(hintColumnRecord in hintColumns){
                    hintRecordDetail[hintColumnRecord] = dataRecord[hintColumnRecord]
                    if (key_unit != null &amp;&amp; key_unit[hintColumnRecord] != null &amp;&amp; key_unit[hintColumnRecord] != "") {
                        keyUnit = key_unit[hintColumnRecord]
                        hintRecordDetail[hintColumnRecord] += "( $keyUnit )"
                    }
                }
                hintRecordDetail["fetchAt"] = convertFetchAtBin(record.fetchedAt_bin) 
                hintRecord["detail"] = hintRecordDetail
                         
                //Add to list hint data
                hintDataList.add(hintRecord)
            }
        }
        //Chart data
        resultRecord["data"] = chartDataList

        //Hint data
        resultRecord["detailData"] = hintDataList
        returnResult.add(resultRecord)                
        resultRecord = [:]
        chartDataList = []
        hintDataList = []
    }
    //Return
    return returnResult
}

/**
 * getAdditionDataBar: get informations of points to be added from previous monitoring to current monitoring to draw bar chart
 * @param collection table data in mongo db
 * @param key key of data (store, subtyped)
 * @param chartCollumns
 * @param hintColumns
 * @param key_root
 * @param key_unit
 * @return returnResult 
*/
def getAdditionDataBar(collection, chartCollumns, hintColumns, key_root, key_unit, chart_Num, key = '') {
    def returnResult = []
    def resultRecord = [:]
    for(chartCol in chartCollumns){
                    // Chart data
                    def chartDataList = []
                    def chartRecord
                    
                    //Hint data
                    def hintDataList = []
                    def hintRecord
  
                    //chart name
                    chartName = chart_Num + "_" + chartCol

                    for(record in collection){
                        resultRecord["type"] = "bar"
                        resultRecord["chartName"] = chartName
                        if (key != '') {
                            resultRecord["type"] = "bar"
                            resultRecord["chartName"] = key + "_" + chartName
                        }

                        //Categories
                        resultRecord["categories"] = convertFetchAtBin(record.fetchedAt_bin)

                        //Loop each data in one monitor data
                        def dataMonitor = record['data']
                        for(dataRecord in dataMonitor){
                            chartRecord = [:]
                            hintRecord = [:]

                           //Get name key
		           def chartKeyName
		           for(keyRoot in key_root){
		               if(chartKeyName == null){
	                           chartKeyName = dataRecord[keyRoot]
		               }else{
			           chartKeyName+= "." + dataRecord[keyRoot]
		               }
		           }

                           //Get series name
                           if (chartKeyName != null){
                               chartRecord["seriesName"] = chartKeyName 
                               hintRecord["seriesName"] = chartKeyName
                           } else {
                               chartRecord["seriesName"] = chartCol
                               hintRecord["seriesName"] = chartCol
                           }
                       
                           //Get value of chart data
                           chartRecord["value"] = dataRecord[chartCol]

                           //Add to list data
                           chartDataList.add(chartRecord)

                           //Get hint data
                           def hintRecordDetail = [:]
                           def keyUnit
                           for(hintColumnRecord in hintColumns){
                               hintRecordDetail[hintColumnRecord] = dataRecord[hintColumnRecord]
                               if (key_unit != null &amp;&amp; key_unit[hintColumnRecord] != null &amp;&amp; key_unit[hintColumnRecord] != "") {
                                   keyUnit = key_unit[hintColumnRecord]
                                   hintRecordDetail[hintColumnRecord] += "( $keyUnit )"
                               }
                           }
                           hintRecordDetail["fetchAt"] = convertFetchAtBin(record.fetchedAt_bin)
                           hintRecord["detail"] = hintRecordDetail
                        
                           //Add to list hint data
                           hintDataList.add(hintRecord)
                        }

                        //Chart data
                        resultRecord["data"] = chartDataList

                        //Hint data
                        resultRecord["detailData"] = hintDataList
                        returnResult.add(resultRecord)
                        resultRecord = [:]
                        chartDataList = []
                        hintDataList = []
                    }
    }
    //Return
    return returnResult
}

/**
 * getAdditionDataArea: get informations of points to be added from previous monitoring to current monitoring to draw area chart
 * @param collection table data in mongo db
 * @param key key of data (store, subtyped)
 * @param chartCollumns
 * @param hintColumns
 * @param key_root
 * @param key_unit
 * @return returnResult
*/
def getAdditionDataArea(collection, chartCollumns, hintColumns, key_root, key_unit, chart_Num, nameOfChart, key = '') {
    def returnResult = []
    def resultRecord = [:]
    for(record in collection){
                     // Chart data
                     def chartDataList = []
                     def chartRecord = [:]
                 
                     //Hint data
                     def hintDataList = []
                     def hintRecord = [:]

                     //Loop each data in one monitor data
                     def dataMonitor = record['data']

                     if (key_root == [:] &amp;&amp; record['data'].size() &gt;=1) {
                         def newCollection = []
                         newCollection.add(record['data'][0]) 
                         dataMonitor = newCollection
                     } 
           
                     for(dataRecord in dataMonitor){
                         // type
                         resultRecord["type"] = "area" 

                         // Categories   
                         resultRecord["categories"] = convertFetchAtBin(record.fetchedAt_bin)
 
                         //Chart name
                         def chartContainerName = chart_Num                         
                         def chartName = nameOfChart
                         def nameOfChartAddition = ""
                         
                         for(col in key_root){
	                     chartContainerName += "_" + dataRecord[col]
                             nameOfChartAddition += "." + dataRecord[col]
                         }
                         if (nameOfChartAddition != '') {
                             nameOfChartAddition = nameOfChartAddition
                             nameOfChartAddition = nameOfChartAddition.substring(1, nameOfChartAddition.length())
                             chartName += "( " + nameOfChartAddition  + " )"
                         } else {
                             chartName += "( " + chart_Num + "_root" + " )"
                         }
                              
		         if (chartContainerName == chart_Num) {
		             chartContainerName += "_root"
                         }
                         chartContainerName = chartContainerName.replaceAll("\\.", "_")
                         resultRecord["chartName"] = chartContainerName
                         if (key != '') {
                            resultRecord["type"] = "area"
                            resultRecord["chartName"] = key + "_" + chartContainerName
                         }
                         resultRecord["nameOfChart"] = chartName

                         //Loop to get chart data
                         for(chartColumnItem in chartCollumns){
                             //Get series name
                             chartRecord["seriesName"] = chartColumnItem
                             hintRecord["seriesName"] = chartColumnItem
                         
                             //Get value of chart data
                             chartRecord["value"] = dataRecord[chartColumnItem]

                             // Get unit of chart data
                             resultRecord["unitOfChart"] = "( " + key_unit[chartColumnItem] + " )"
                         
                             //Add to list data
                             chartDataList.add(chartRecord)
                         
                             //Get hint data
                             def hintRecordDetail = [:]
                             def keyUnit
                             for(hintColumnRecord in hintColumns){
                                 hintRecordDetail[hintColumnRecord] = dataRecord[hintColumnRecord]
                                 if (key_unit != null &amp;&amp; key_unit[hintColumnRecord] != null &amp;&amp; key_unit[hintColumnRecord] != "") {
                                     keyUnit = key_unit[hintColumnRecord]
                                     hintRecordDetail[hintColumnRecord] += "( $keyUnit )"
                                 }
                             }
                             hintRecordDetail["fetchAt"] = convertFetchAtBin(record.fetchedAt_bin)
                             hintRecord["detail"] = hintRecordDetail
                         
                             //Add to list hint data
                             hintDataList.add(hintRecord)

                             chartRecord = [:]
                             hintRecord = [:]
                         }
                         //Chart data
                         resultRecord["data"] = chartDataList

                         //Hint data
                         resultRecord["detailData"] = hintDataList
                         returnResult.add(resultRecord)    
                         
                         //Reset data 
                         resultRecord = [:]
                         chartDataList = []
                         hintDataList = []
                         nameOfChartAddition = ""
                     }
    }
    //Return
    return returnResult
}

/**
 * convertFetchAtBin: convert fetchAt_bin to format "yyyy/MM/dd HH:mm:ss z"
 * @param fetchedAt_bin
*/
def convertFetchAtBin(fetchedAt_bin) {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss z")
    def milis = ((Long)fetchedAt_bin) * 1000
    String dateFormatted = sdf.format(new Date(milis))
    return dateFormatted
}
{{/groovy}}</content>
</xwikidoc>
