<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>WiperDog</web>
  <name>DisplayPolicy</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>WiperDog.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1382327521000</creationDate>
  <date>1384745628000</date>
  <contentUpdateDate>1384745626000</contentUpdateDate>
  <version>1.1</version>
  <title>Policy Evaluation Message</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <attachment>
    <filename>ajax-loader.gif</filename>
    <filesize>2608</filesize>
    <author>XWiki.Admin</author>
    <date>1381994397000</date>
    <version>1.1</version>
    <comment/>
    <content>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
</content>
  </attachment>
  <attachment>
    <filename>pause.png</filename>
    <filesize>51901</filesize>
    <author>XWiki.Admin</author>
    <date>1381994498000</date>
    <version>1.1</version>
    <comment/>
    <content>iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAgAElEQVR4nOy9eZwcV3n3+31Odc8+
mn1G22hfvEiWbcmyLduyscHYMbYBs5rYkGCWJITkEvLCm9x8LnlzE0KWS/YQIGAgG4TFAcIOwZZt
bGPJO1iLLWsdbaNl9u6uc577x6nqru7pmenZZAn7mU9Pd1Wdqq46Vb/fs57ToqoA1Kz7A6YiWmVA
AZHCShEwgBhUouVAQAATgCgqpqgdQrRdQASN3v06U/SuResF+6/vndK5vywvy0xI+jV/SZhzBDVp
nHMoBlMd4FQBwdSmUIQIav4ZJ3r2EfIb1IEqoiAiuOEsqG+uWQuqGBFcNiSI3o0RJHS4nPWHtYo4
B6ECilj1WCkjI4/9H1L5pXKNtMy6chKDN7mPlLyQko1jtYvXJwigqJ2g8crSfV6Wl+VFkeTzKKDR
s6taeEaVYgicIWLG3VoKzrKAk+L3ojalO8n4x4o7UEqOJdEHKd0/0fZleVleLEkoOS19PuMGpc80
jH7+x94wa1KwACbzpQLFVFZ64iXHGo888kAubZ/YISLVQrsCETT8yxb4wnsqP/eXkDTInWP1/Fh6
aCw7UAf082eY7jpzpPab2+h/9YWRhpfEs6uFZzZ2k2NzPwmVop4tcwtmkQ9SEzcZS6TobTSAKf/o
5bV4OfOefOeNYtKobf1/PFj+PF7iUi93xL1loleQ+DxVZ0mjl6uXOxxgAedfooMvk0IkQuN3n2Dw
dZeAaMHcT1gGRSQQuwmUkEElvVnpXazQ3Rg/BjBtSYK9nJan0EGl6xL71H/5oZKdCvJSeAIb5E5R
NAZzKbghbyOpUX9PU0BV9IrbTvYO58EPhEAokAXJERFBvdwRb1cK5GBBVMC91KyG+q/9FFD6b90Y
Bapj15XIMtCSGFm0vdQqSBLILMs0LIBI8r6NFK8rvYBR2rzQOaXavu7rW0u/BCgH9l887d8gd5oI
7IIHb0Ae1JpWSIOmgTRIgG9o8PukBNJAtUIN/pWO9s/roApOI25nASuQAXLACOiIJwHNRQ3DqH1W
/LosYBVj6+UOGx8DUEHsgH7ezkA3nVGiCJJAduN/PcLAmzeVsY7LWM3JDFopEeRl9tyChAUww2Aa
5QYUa/kk6Ou+9dio3V8iYBcgBnyK0WCvAqoEqoFq0CqB2gjc1aApD3wxCAYkQKgRpVqgjqidy1sB
DlW6QKvHOicR2Zvo60j7ywhCVmBIlWEwGVRDwEa5q1xEEiPAsEIOXA5PGlnx76FisvVyR5a8RSEK
2F8ES6GUBBq+6F3V/jdvQuPMVT4rEAOAYlNdooV8bySVapl1ZRZHyQTbZ8ACKPNF8YXku0Ty1k7N
D54CigE+dbCffaSQ0PCxmZ4GrY7AXi3+vRY07cEuMZDrEKlGqDdKLUK1IlXq3BJFjFO3GDCodimu
Bm/2t8Ek3SQttE707gkUJ5gRgxxWrBXkEMgQRnoM0qeqw6DDwBCqOZAMkPHEoEN+WUcUHRJPFBlF
ciC5erkjlMi1OJsthDg9LYmcX+MXH2TgHZtHK8H8e2wRx8BPWM+l7RhjeRqSJ4D0Y7tn5IATiU7r
xM8+wEMR6GMNXwVapVAbafc6QesUqcWDvxahGpE6o1Kv0KLqFjnVJajrVOhEaS1AdfQnZQhlOL/e
kQP688vp2tWY6jl+W6aP3PD2xBnXYKjLLwm1LUIdYHGwgMQWXP6uHAeOGOSIIC+AHhUxR0GHUQY9
+BkUGASGQIZAs4oOC2QURvAWQg6wgoRnj2WQdN6T1oBf33D3fQD0v+PqQvui7ABRjKBwjDEf9XLu
wTRgMX0LYNbk7AR7LBHoA7wPXhVp+bR4bV4LWgcyJ/rciMgcEWkAWtRptwe7XazQHT9W8X8lh9KH
Y4ia2k5qOjuoammjft5CqIampWsxgQfnnBWbSFUHo85PXQJbZbtasNZx4tkHfIUZcGLXE5ARMn39
DB14nmzfCMMnn8NQhzCn1ZButeg5IJsBRB3AcYNsB+kJRHYq9IL2oW4QZERgABgEGQQ36IlBsopm
Inchd/aQQcGe1+izJNY33n0vAP2/ek2heQl55F0DSMTXKLlHpTG2EstiEjK1OgBg5uLv0wX6mUMU
UbQ+oGDa10Zavh6oF7RGkHqFRkQaRWQO0K5OVzt1K1XdSu/fF8DuOIWjj6aFF1Dd0Uz9/DaaV2+k
tn0x9fOWeJPdgfP+PS6O3QOoQ1XJZsL8OWr+QSt6GyX++RKaVlyWX9G4YlNeefln0CAGBnpeIHdi
Pyefe4bMsZMM79/Hyb2PY6jD0Naq6OUgOE8IIwbZLsjzRuQ5FY6hOoDSJ3BK0T5gmDwx6JBiMvVy
R1Z8PMIO6OfdDNyuWZIipz7hCBeA3viZHwPQ/65rS/YDHxahAPB8RiCOIUgx8Etd8FFkMb5Mvw7g
tMuZA/hY6uVOE0Xmq4Bab85TBzQKNAFNiDSh1GLMHJxbalWXo3adQ1viB8aRw9JLXctimlZ0M+ec
c5iz5AJalq8DVZxTVDUCuZLL5FCNtblfr3kC8G3DgX7Cwf68b5/P7WUzhCd7cQ6qWtqQqkJcMO5h
U1VNVXM7IrEmK4zZKBS5GWpaF1LTtpA5KzflycEYQ9+ep+jf8xT9z++jf/vTDPbux9BWo6TXgawT
daCMGMxTAs9KSnbhOIljICKDUyD9oP3AoEZxBE8Gkjlz4wWjXQK/toQIPvUjAPrvujbf1pe6x/1b
ALiSX1n4PFaMIF4sV6tXeqbxYKBGeXuFF3e6ZWLA9+vds38aJRKZ+GnQON9eg9f0jaDNgjSqSKsY
WjGm1eXsaodbpbg18WPhk+eHaOhYQMv559OyZh1t511Fqq4JdZFGdw4UD/48AfiA0fChg7hMhpET
x3CZDNkTR3FOyZ48hsuMeNJQn6ZfvXIec+pjkOuYmh+Bgf4Rnt3ZEy3G/qqhpnMBiFDd0o6pqiHd
2k5QVe3XGzAROxgDGOOLFIwgRvzgFquc+Pn9nPz5Vk4+vi0mBAzp+JswmOcE+ZlJm8fV6kkcJwU9
qXAKZECh37sNMgQMi687yL2YZNAo74g+levV0nWlUbDC9v53vgKi+y0COlQYDOQyIagSiGAzISkR
XCaHCQySs4XBQGE0GMgqqEPyrt5oHI1s+8MziQCmrtlPNwHUyx1RHp4axcVR+kagSZBmhDZB5jh1
qxy6WXHnaV7LDyFkaF9/Ga0XrKZz/S9R1dhSALp13qRPEEDmeC+ZE8fI9fUxfPgAuYE+cv2nwFnW
X7SUxvo0q5fPRYFLLl4CCvPmNTN/bt3okx/PcxvjFhzsGeLAoRMI8OzOHgb6Rzhw6CQ9h06wfdch
BgYymKoaqlq7qG7toKqlg6rWdqqaO5CYDATEmGhApyDGEA6fovfpLZx4/GF6tz2KUh0FH/Nk8Dzw
00DMo6p6IrIGjitykgIRjOBTkFnxRHDaYwUFAoCxO3gSRPAr1xQRgAhoJgSnBEawmRypiAiCeDRg
Nhw9GlA1QQCjpYQA3jFmw8plCk/XDMjpIIAGuTNV8O+1VtFY288BaRRoQaRNVZYodrPDbYg1vWOI
VFWa9ssupmPdhczd+BrUebCrczgHTr2GtyMjDB3uIXPsKEOHDzDccwB1lvUXdrNqeRfz5jazakUX
q1fMp7GB4rQxJcuJDVrabgwpjSslPwoUDR9LWp6PPnaAg4dOsH1nDzt2HmL7rkMMDmao7uqmurWL
mrkLqOlcSFBT7YkA/FBW4+MIJjCceu5Jjjx4D8e2biU3bAmYE1EBGMzTgvmRCC+gehzoBU4qMgj0
iX8fAjIREZy2OEF57EyVCIrb9L9lU0QAFpwrWAAREQRGkJzD5ixBTADWRhbABASwdcYJ4MWR2SSA
Brkzrd7Mr40i+fXAHEGbQFoRbRWRZuvcBkWvdOhcD/ochgHaN17Igutvp/2cC1Hr/XgPfA9455T+
vXsYPnSAoZ79ZHqPsHJZJyuXdbD+osWsWj6XVStakun5gp9fBvyjnnpXebi2NJ6UXyglg8SySW7L
Bwf9+8GeIX667Xl2PNfD1sd3s3PXYapau6id203N3IWeEKprvFUQGIwR/xLDwL6n6Lnvmxx9+DFs
LhtlGgRBTgnyYBCYB9Rpr6j0K9qryAnghEA/vgZhSJDs6SCC8bFTKRH4dWOrSaX/dRv9fABJCyCI
CCAbEhiKXQDnXiaAqUqk8avxwK8HmkAbQVpA2sTQpsJ8Z+21DndRbOKHHKJjzUXM3XwdCzbdHAFe
vUkfgT7b18dQz0H69+5mYM/zzO1s5OK13Vx95SouXreUhlizlwG9K10HxRH9MTR9/GCN8zwUNSxL
BtGKonWmeDk51gvwLkAkAwOOrY8/z9bHd7Pt8d3s2HWY2rmLqOteQW33cqoa5+StAhNEZGAMR7b+
N0cffoRjT/6IFN0kXIRtBvMQhhdwHAU9qkgv3j3oAxkAhmebCCbGznidPjZBjGczD9283scAjGBC
h83GFoCr3AV49CMvE0CpJIBfDdoANIO0KdohIs1ipEOVJdbZGxS7UCNtX1XvWHDtNSy89jZq27sJ
rYJ1uMjEz/b307/nefp37mC49zAXrV3I5k0r2XzFauZ11gIFQLvoUU0CvAjrRam+4sVS4phJkVJW
kOIJJcoNf4dokifIN45JoufwEFsff557t/yMe+9/lqq2LhqXr6F24TKq5jTlCcATAriRfnq2/Cf7
v/N1wmGTtwoMZr/AD8WYZ3EcBj2pyFG8RdBH5B5EYxFyM90vlWNnKkRQ2D6REz1yzXloqBjnwEaz
C9nEcUsOMPLTlwmgSOrljhQ+D1+vPm/fpkg7SJeIdKm6DQ7dpNj5imI5RdOSRSy66Wav7SNN7yL/
Pjc8wsCePZz82VMMHzvEVZevZPOmFWzetJr6ekGTQE8AN87lxwPIkuZ+Hvcl+qzIWqDQcLpcUPah
M6NnkilyDWS0JZAkBZHCrFjxuoFBx71bnuG+B37Ovff/jKr2eTQuW0PdouWkG5oK7kFgMMbQ+8wW
Dnz3K5za9XMC2mIi6BP4piBbFT0kSGwRnIyIIANkBvUL2Wl2S5FMHjuV3JXZj2X26+dfJgCAernD
4DV+HTAHpA20GWQeIvNU3aUO+2pF6z3we5l/6WV0/9KbaFlxAS70wLfWoRYGew5waudO+nb+nOVL
23jj6y5h8+UrC6CPwFyq6ZO+fYxvTaA+b+KXgjv5rCSyPqWWQHJ5FLDHmBtq3CmjpAT4JGICMcCV
URaBJCwBE31JkhwGBh33RWRw30+epa57JY3L11DXvcxbBBEJpIwwcnwfL3ztUxzZ9mNSdMdEMCjw
bUF+kiSCKD5wChgSGBnQLxQqpKYhU8dOpSCfHTJ4yRNApPFTQI2iDYK0AB0gc0VoV5E11mXfqmiD
ooTsY8Gl17Ly9vdQ196NDRUbmfl2eISTO3dx4pknqbJD3PDKNbzxtRuY21XrC3QSYE8CX7UMARAR
QNwuOt/4GEU1HlOI9JclDJhogrj8dxctm/LrEzVDxe2iFSYxk4FE22OLIW5rBHoODfGt7z7Kt767
jWPDQuOytdQvP490QxNBIJhACAJDbqCPfd+9myM/+gEaZQ8MZtDAtykQwYmICI4ViECy060hmP0M
2mzs9xImgEIRD/WgtcAcoB2kUwKZB3KetfZmR7gw1vjzLl3PqtvfR11bN85FwLeOTF8fvdseo2/P
86xd1cYN163hhlet9oNkiUAZaX2XBHtie968T0b2k+5AYnlUPCD+UKr5SyvBZkCS2r5U80OJuV/a
JmEtFBWxJYBPkgTitqawfN8Du/jO97ax5SfP0rhsDY3nXkx1ayfGeBIwgUEz/ez93t0c+u73S4jA
/BvCLlR7gEOKHBY4ji8oGhzUL2Sm2i8zj53ZN/8B+vVzLz0CiLR+PWiDQov44p0OjJkrIkustTdZ
wjWKy5v6q29/DzUlwB842MOJnz1N/+5dvPra83j77Vcxt6vaF3JVovHjzxRr/lICgERqL+H353eZ
bXeywvKN0hL1eF1+URgVRDSl7cqQgTHF243AoSNDfOnL9/Pt723DzplL09rLqe1aiAlMERE8//V/
pufeb5JibkQEwZ4gMP+lTp9D9QBIj/haghNAvyDDU7EGZhc7s0cGLykCiKL7aXANCs2CtANzgVZJ
BfNd6F5lCa9SHI4hmpY2sfb9f0JD1yLv41sP/oGDPfQ+vhU5dZTX33wR11+7hs6OGn+bHEUmfUwG
sfYXEmQQ/RNKtLyWB7zL71QiU3w+SnerEOejZYwdi8igjEVQGiuIp8hPTgCdjA8UfTaFWMF/fuV+
/vNrDxI2dNF8wSZq50ZEkDKkAsPI8f089+VPcPyJraRoA4SAYKsJzDec1b3eHaAHtBfkJMhQNPqw
YiI4/diZGVJ4yRBAQeu7Gg9+OkHmYVgoapbmNPdWcG2OHKm6DBd+4PdoO/8KnAUX+uDeYE8Px7Zt
hVNHeP3NF/O6W9ZTXyt5ba8Q/65DXrvnwR69J/16l9TmJdp/zDRemfWnx1gcX0ZxwHikUI4QEgSQ
rDOI4wSx5s9bBUnXwMDgoOP+B3/G3V/4ASdpioigGxMIqZS3Ck7ueJA9X/sXBvYewlCPwFBA8GVE
forqfkV7QI6JH3MwLJjhSmsHzlzsxL5geenXu3+xCSAanltd0Po6B2QusEACs9Bad4vDXuiLePpZ
9qZbWXXbe3ChT+OFoSN7qo+e+7cgJ49y62suzAM/DuwlfXqX0Paa1OYx6BPkABSshuh8i4A/TkBv
ytr6NIuMuVBYlSwUKpo7NiaGpEUgvk/ybkGUjpSg4C587vP38ZV7HiRsnEvzBZuo61pIkPLpwyCd
4vCW/2Tnv/0Ths44PvCUMeYedW6nwEFFjkYkEAUJzYTjC85W7PyCEIDSr58btbZe7giAWnBzFNoE
ukDbwCxU9HKLfb2iYjlFx9oVrHv/H1PV0JTX+LmhEQ4/8ggntz/LrTet45ffuslr/AjomtDkyXH4
pcG9/Pj8EtN+lKbXsh8nlLPld1HKBQ1HbacQBwAK9QaJdSaaLjUmhHLxgsEhx1e/dj9fvedBmLeK
5rWXUz2nCRMEBCkfH9h9zz9waMuP4xoCK5j/MsL/oLof5DjIYTwR9E9kDZyt2PkFIAB/7kkCiLR+
GqgDjdJ6Oh9YKIHpsDZ8g0PPU5R0fYY17/8gneuuLDL3jz/9DEe3beWStfN4zztfQUdHTRHwY60e
m/mlwb28T+/y2C9o+umCXsbF0VkhpcHCctuK0osJIojXSUQEhhIXIWEVDA06/uEfv873f/gkzRds
Ys65F5OqrSWV8oHCvheeYvun/ozcySyGKgyyyxjz76K6T5UDIIeAXvz4gwzISDlr4OzEzllPAJr/
PxARQIPcGahP69Uq2ipolyDdGBYB63MuvEnRGsspFr9yM6tv/01SNY0467ChY+DgIQ4/9BPmNSjv
esfVrDm/q6DhXTH4nSsAOw7QlSMAV3y6qCto7en67+MRwUxaBrNVWhzLWK7CKFcgWo59/yQ5FJFA
HCiM1j3/fC+f+Kdv8LPdp2jZ8AoaupcTpAwmSJFKGXbf89fs/9638tZAgLkHw0/EyX5FewQ5okif
twZkqDRA6IfSn320fJYSgJZ8Ugb083Fuvw50DtAAzAVdKMYsds7dbLGXK0pQPcLF/+tDtJ2/CWvB
hZbccIZDDz1MuH83b37jpdxy0/ke9LYM6LVE4yc0+yjgJ0BffOYFmQ5QzwTzf6bJYSzrIKn141Sh
JMkh6RaYgqsQJOIFP/j+U3zik9+E9iW0rr+GqjnNBFGQcHD/M+z41J8z3DscWwMPBYG5R63uAw4K
clyhF8zJKF2Y5/bCXBpnwA2ZhJyFBKCJ/8lljXP7zSCdgraqSLcYs9ra7F0O1+wYovOSc7nwN/4A
U9OIyyk2dPS9sIeD923h4jVdvPNXrqGjPTL3E/n8ONiXDPKN0vglfv14oJ+M5HPoyffTKJWSzKiR
i9OU+BDlYgdFlkFcNVhiEcQWQJ4EImtgcNjxyX/6Bv9z/7M0r9tE0zkXY1KGIPCz473wxY/R88AD
BDQhMBhI6jOi+pTCUYH9ihwBOSnIYGwJNMjbE6d49pDAWUYAZcEvEfgbvMkvcwW6MdIJsiHnsnco
DqGf89/7q3Rf+wZsCGot2aEMB7c8gD20j/f92qvYuKE7b+qPMvsTgM+/Ei4AUCjDdaVnPDWZCHgT
PmZnSKwgto6m1RclH+JKxzguUBQoTCzHpJB0B/zkI/D0U/v5+F99mX7TTNvlryY9pzmfMjzx7P08
+3cfRWhBEALM1zDysDheUGSf+ErCE+JnM875K5SzjgTOIgIYE/w1+Ak4WwXmC7JE0sESmwuvt4Sb
HFnqO9Ns+L//gvouP0TX5RyDB3rY98MfcfH5XfzGe19NbS0FrR+Z77HmdwkTvzTnDyVR/nGe8ko0
aenPJ/4iynStg1EuQtI6kgLQY9cgjgdgit0DMT5I+O///gP++7uP0XrJtTQsO88XEKVSuGw/T//1
Bxjc2xe5BObJIDBfxfG8quwV9LAixwWG8eXE9mwjgbOEAHTUfyCIwN8EMgd0PsYsEZFzrQ3f6AgX
O4aYu+k8Lvqtj6GAyykudPQ8/Agjz23n7W+7iqs3Ly/k8xMmf6nmdwngJ039OAZQdGYlMqEmP/Of
kzNOysUJyqUO80RQUkFY9G7g6acP8NGPfh7altB62atJ19Z6IkineP4rH+fgD39IQBMG0xekUp8i
1O2K7hXo8cFBTkZTkuXOJhI4CwigHPjVqJ+lJxq2SwvCYjFyTmhzv6O4mpBjrL3r3Sy54c3YHDhr
GTp6nIP33k9nreODH7iJ9taaQlovoe2TAb9Rvn0y4j/ZqbbKPay8TACxTMUyEBL3INGP+bhAFPwz
pW6BKVgHEvjPw0OOv/2bL7Ht2cN0XHkrNe2dBOmAIDAcf+IH7PjU3wBzEEw2IPV5gYcVtw8/38Dh
OC4Ahd9KktITO8PkDCeAsuAPtBDsaxeR+YjpQnVDTjPvVRThOFf8+V/RuOR8bOhN/r7dezl43xZe
tXkVv3zHZUUaPg98hwd4EujRctG4fTfa1I+j0uPJlH36MTacuY/V9CQZSJ2MxCQb7xunDZPmf94t
iEkhEST08xLCN7/xU+6++9u0rH+FrxuIKgiH9z/Dzz7xp4QnNYoLBF8SdIvC4Sgu0ANyXDBnDQmc
wQRQFvw1XvPTCtIlsEBSqcUahptyZF+nKHVdcMWffpp0fSPWKmHOcfihRxne9Szvvus61q9fWEjt
Jfz9PPiTkX9KAoBJnz+SSv16GPsRmCkLQMZcOMtEE2+TCB6WXn8yi5AfN5CME5jEuxQIQQzs2dPL
R/7gk5h5q2m5+BrSdbWk0ik0288Tf/nbjBwcwFBFgPkxhh/i9DmFFwTTg59vIAMmOxr+Z9aNOUMJ
YEzwzwGaQOYLskjSqSWay12XI3O1I0fr+XPZ+KE/I6hpIAyVcGiEfd//MS1mmN9+/020tlWP8u+T
Wr+sBZBI6U1WK40F7OkCPun/nlmP0+xI0ZDpSUip25V3B6DgCkh5AjAGhoYdf/Fnn+f5Qxnar7qF
quZmUoGPC/z8nz/M8a3PxfUCT4nhyzjdpcgLghzET03WDyZ3JlsCZyABjAv+LpB2H+lPLbe53Kst
mQ2OHPM3rWTDBz9GLgSXcwwfPc6+7/8PG9Z0cfvtm6mpAbUlvn4M+mR0P/meeE1GSjXRTNzyFyNO
MJXvnO2Kwckcv1ygMDmiMK4YLEoPlpBAEMA//t09PPDQDjqvfRM17V0EaU8Ce779KfZ9479I0YSB
PWLcZ3CyU5E9gukFc/RMJ4EzjADGBX8nyCJB5ko6tTLMjbzNEXZbTrH69ttYfdu7CK0Hf/+BQ+z/
3o+46dVruOXWC/PAdzaaKDV+kUj1KaPM/bFSeqWaJbluvFtbbr/ZlNn6qvg3KmdDKj3sVIkgWT8g
Cc1fmiI0ApIqEMKWHz/NJz/xVdouv5GG5eeRSqdIpQ2HHvgKu/71czEJ7BXj/jkigcOCOXCmk0C/
3n2m/Dx4WfCn1P/AZjNIhyBzCWRBmBt+m8N2W05x0a/fxaJXvoFc1g/fPfHscxy4dwvveMc1XLFp
GWEYgTkmgYSvXxThj0lgjCDfqDMtiQMk142rOcerExhntzH3GWenqWC0knOoFHyzwRHlJjmdzPfE
JOwAo3jgK4iCiz6rA2sg0OjdwBWb19DW0cJf/8W/Ygf6aVp3Kaop5m66DVM9hx2f+RtSNC8yTn4V
3N8JgsKIQEYxOcFZMK7Qw8qZQgJngAVQFvzVUcCvA2ShIEslZVaFYeZtDrswCf4wB9Y6jj3xc049
/hi/88FbWbiwMQ/6ZJQ/qfEpeU9aAONKQtOfTXX8Z1SQUIvepn+4yVoEUlhIlhIXpQ1L3QED+/b2
8id/9CmC+efQdtmrCNIp0ilD/76neeZjvw/MwaB7RPSzKDsUs0cwB8H0CgyDCTmD6gTOABegLPjT
kdnfDNItyDJJmVU2zL3dkps7Cvyh48B9P2Hkhef5wO/cyoIFc8qCvzTVN9ZkHmNJ0bTW413SFP3+
l+sBpiejrIP8v5J1kSSJIA/8pBsQFMcF4tfIiPKxP/onjqc7abvs1T4mkEoxdPAZnvqT3yMigf0i
+ukSEugTTB9wxpDAi0wAZcFvEj5/pyArIvC/w5KbNxb46weO8e733EBra3Xe57euMJpvVF3/FP39
6d6qmQZ58vx+UfkjCeTpWAzlrAQBNEECUmoFJLMDqSQJOP7sjz7JsVwdbZtfQ1VdbSUkcAzMMcH0
c4ZUDL6IBFAM+8Ky1uOn514syEJJmdU2zN1lyc334H8Xi155GzYHoXUcvPcn1PUf4zd/+1ZqaijK
8efNfju+ya9avvtnKo0308G/2QzuzbTMZlZgvENP2SWgUByUJACCghsQWwcjI46/+ONPcngooPO6
2zwJpFMMHSgmASP6aVXZAeYQmP2CHAMzwKGqPvcAACAASURBVBlAAmcIAeTBXwPaCmah1/zBYhvm
3mbJnl8Efgthrhj81dWFSH9e01uK8v358f0RCdgyJn85EExUyFNOZqy45xdVrc+CTJVsihSA+Fep
FVDOLZAAMiOO/+9PPsnRiATSdbWkIxJ4Mk8Css+I+7SqOSDwnGL2e2tA+nmRBxC9SARQFvxpfG1/
p2CWmlSw2obhDSGZ6y2nuOh972LxK28jzPlU3/57H6J24Bjve/8to8CfjPirLeT2R0X5K3hgSgFY
UeVf/t/MyEwEHH9RpWgOggraTCQStzfFLkEMeBFPAkVxgRR84q+/xPa9p+i67jbSdfWk0oZjT29h
+z/+eTSISJ42wpdUZacgzyvmoPipxjJEZcMvBgm8CARQFvwp0EY/T78sMqlgpbPuTTkdeYVjiAve
eyfLbnhjwee/9yFq+o/x6795C9VVCXM/TBT4JLW/LXx17B5UIlMB3kyAtGKSeQnLRJgeC/SVkMEo
a6AkGxATQDJAODLi+JuPfZKjIym6rn29J4Eqw+GoTiCgiQBzvwj/rSo7PAnIQV8jIMP+66TcWcyq
nOY6gLE0P3UKrcACE5glimwKNfsKR44FV5zP8hveSBiCCx0H7n2Ymv5efu19t5BO44t/SsCvCfAn
Z/bJm/9MHMUvWtRJAHu845dzL8odolywqqThLLrWZ6VUAuw4mFgpeQiA8c+RUZ/Fd0H0OSaAaLmq
2vC+D72bv/3YJzmx9V5aL78ekRRdV7wBDOz6wueApisDDawYyahjRNCsIiKoBcm+WJUBp8kCKBf0
05SP+GsTsFAkWC6BuSwXDr/HkWX+lavY+Lt/6gN+OeXQQ9sI9+3htz74eqqqCsC3iUBf7AIktX3F
+f0SGWX+T/aSp5gOHPNw0z2fMjue7gdOx1yYwv7RiqmQYaWZhdidy5v+kgB+GYsgk3H83Z9/ir6q
Lto2vYpUOkU6lWL7v/wxRx98HEMVaVP1b4puwel2hUMgR8T/BsFpTw+eRhdglPY3ijaAdgAdgllO
2lxoc9nfcth0/Vzl2n/8Eqoe/Cee3c2xhx/hrl+7iblzGwvADqMSXy34/iS0fekc/uVEKMnxz1K/
Tyl7UPRhgnbTlDM9CzDhoSZBBuOdV+m2vCsYFOYWlCgjIGWIIJNR/v4vP81AfTetGzaTSgekqlI8
84n/xanH9yMIqVTVx9W5J3C6X5G94ucZ7Oc0xwP69e5KfhB6ujJm0K8OpEmQNlLSZXPZOx02HdQO
c83HP4sCLlT6d+/n+MNbeeevvYaurkasBZuDbA6yIeQc3kWIav1zIYTRe876bdaVf+VjBonXRNvL
vUoHD5UbRDRWm7Fe+eOXKWYqmrdwhl5j9dF0XjN1bhP1Q979q/A17v2guF9t/G6jZyt6puJnK7SF
dWEI6SrhLW9/Pbk9TzHw3M8IQ4fNWVbf+ftUtSuKEobZd4tIlw96a5viGkFrkngZ/Xl2ZJZjAGOC
v0GQNkTmiZFuF7o7HLbTSD9XfvQvMDX1WAtDR0+w/76HuPnmS+jsaiC0YMNChD8O8iWr/lQL28bT
/AD5ASJj9HPeBJzEFRdp0hm6f0lroOjws/98nJGiiQ/T7YKJ+lCjf3G/O/WugNPI9HcJlyDwYwg6
57Xxng+8k3/6q88gVdU0LlpBUN3Iug//I4988K1Aa7219l2BMZ9zjpxARiGM4gEZ5fS5Z7MeBEyC
H9QAdSAtiMyTIFikob3ekr3QcoqLP/g7NC09jzAH4WCGF771I175ynVccPESr8kTPr+WA3/0ikf9
lUopkEbd/FKAJU+9tOlYd2g8MimzspIbraM+vCyTkfHuY7nVY5GCAIT4gUP4Z84E0bMYBQQ1eu+c
38pNr7+Br33p26Qa3kRteyep2jms/dDHeOJjvwu0rxAnN4hhBMcwuIwiWUEsaKh5V2B26WAWCWBU
LwYKNUAz0CWBWahwXkj2tY4cK268hu6rXuXn8AuVF779Y84/dwEbN63y4LeFoB+umAhsghDGC/rl
/f1xgFRpee1UfOZR+5wGQJ8N9QMvliVTSR1BvDG5XVyk+ZMWQPTuNKoYVLjw0jWc6D3JfVu+wbwb
bseYehoXr2XZW97J7v/4N4T6KwJS+zEMitMRRTOgIcgIPksw6yQwSwQwyvQX/5Nd2gDSJsYsMEFq
cTYzeJeizFk6h4t+48PkcuCscnDLT2kMLK+57XLv38cFPrZY07uEttd4vP9Y4JeEJhinL5PaYrwS
4anMEDSVcezTBfBLwU2oGMijdizxuCexs1q/ryFyBwL/OYitADwJXH3jlRzc38ML9/83Xde+HoAF
17yJk88+yqnH92Nd+OZUkDqkMCQwrLicHzQk1n/L7DL4rFkAJaZ/CrRWoVGgVYx0hpmR1yiuRuQ4
V/2/X8tr+BM7XmBozx5+7QNv9Hn+6BVG3RGTQVLjF030kbiJSR9etYQEJiFT8etHVQROsF8p4GfS
7K80o3DaRYveZu6wUzzuZGeAEhdlB4JCvYCL5hKI6wUC4LVvewN3/+2nOfXUIzRfcBkilnPe/vts
3fPrhCfAWvc2IxxU5ThIn6KhQAZkuKCvZscKmAUCKO1BTan/rb4WgU4xZpEL3eWW3AbLKa74wz+k
qrGBMAdDx06w/96HeMs7ricVF/okwW9LwB+b/2OAv0ibT2D6l0oyPThVLTrp1N8kz3HU/mN879kU
Q0jes9kO8I3VdlIkoIWAoFNPBhoTQEQMqbRwy+1v4PN//88MtXZQv2g56apGzvv1/822P34/Kea1
i5qbEB1SZSi6fVmQEDQ3m67ADBNAOdOfGvwPdnYKsgDDcutytztyLL/xGuZdvIlcDnLDWfZ9/wFe
8eoNzF/UNsr0t2XAry5BAFp8HpJAQdmAX2Jb0XJCA08F+EnNP+n9tbLbOxaxnE1An6rM+oxECbeg
ImtRC8+XiZZd7A5E69VA+9wWbn7L6/nKv95Duvl2THML9QvPZ9nr38aer34HR9XmANkOOhDpgRFB
s5Er4M6aGECJ6V8F2iDQjsgCCWSxDbPvVBwN82pZ994P+7ReqBzc8ijd85q4aOPKPNiT4Fen0Rh/
HTXaT0sG9IsIWuZJkQpUskyxo4v2mqyLMdkGpW7OS0AmCtJNab8Kv3P0s1TS67YwtVgQFOICqn6w
kAm9NbDivGWsv3QtTz/8A7quvQ0R6L7+nfRufZDBPcM4lduNyH5VLDCg6LB4S2BktlyBGSSAUV0d
qJ/Wq0mhywSywIW62eG6HMe49H//PYhP7Z3YsYeRAz1c//7XFfz+MBnkU6zVPPhjQlDV0aZ/Avyl
gK+EFMq1GUuS+86U0i1LUhUc/BeVCKbar5O5j5M/zmgQWhtZANHzZ5B8kDCIyEADuPL669i76zOc
fPohWi64DDGO837zL/npB9+Ko7UelVtMwFex2qcwCIyA5EDtbLgCM0QAo0x/FA1Aq0EaBVpVTLdl
5CZHjnPedCvNy84hDCFzaoiehx7n1jddTZAyPtdvwYUOVcFZV7AAEtrfOZcHfxEQEzesFEzlwFV6
gyuxEuJ2M/WQzcQxf4Gt/inJbBBA+WMWnhfnIHCgRvKZAR9YFIxCSiGVNtz4plv53F9/irqFyzDt
c0nVN7Hs7e/nuc99EqVuPS7Yprge4KjCSUEHfcixaPaCGZHZSgNWAXUCzaCdkjLzbC5zKyiN82pZ
+yvvx+Y80A9ueZS1axcxv7s9An+s6TUBfpf39a11o4J+Y2n2yYJ7MgCslCgms/9ME8pkZLrXM5a8
mNdUTqZyPqpawX6F4JELwDjxhBAIqgIqhCoEQPvcDl7xmley5d7/Zt6Nt4OpZd7lN3LkJ99iYEcv
Tt3tQWD2qdWTCn3qU4QOSIwanBkrYAYIYMzAX6NChxiZp1Yucbilll42/t7foVFVX+9TzyEDp7jk
qk0e/KEHv7OlJn/yXXFOiyr9JgJTvH2im1juOGMBY6quwlT2n4pMFtBnAlBfrHOo9HvHb+cBaRUM
iop4N0CVAIMqBKqoGAxw0aaN7HxmO6eeeoS29VfhjOPcd/8Rj37wTpTGemvdNcbIMZweBx3wXzDz
tQEzYgGUmP7VoPWCtABdJp1amM2MvFGBlbfdTMuycwhzkO0b4ui2p/ml111OEKQIcy4CvosCfAUS
cE6xobcEvGVAoVqvQq09HiCmQxCVfO9sPtgzQVBTFa8ZJxpwMXMiMntj1yrpr4naxNutlWiuAMEE
gkMJjKBqMFiMEzQQrr/tFv7tHz7D8MJl1M3vpqq+mUW33coLX/kOhqprkWAb6AmgX8EKOjLTtQHT
JIDRgT984K9F0U6TSs23mdzN4KhuzHL+W96dj/Dvv28r556/iLkLOgmtwznng37Wm/7OglqXDwI6
V3AN1OELfErANVUzdiaOUdgfAkY4dGAnuaHjGIGcVUayIdmcwxjxnpyCGB8o0ugmCn60mMS/YukU
MZCfuhYwYkinA2rS/ldrnRrqm+fR0rYI605fKDC0jv17dzLc1xOfKjZUcs4iCKLi6z8lClw5UIkH
P/gH16igJrp+KaTRQAmCFEEgBEawqtTWt7N48VKQ9Ixdw2y5A6o+fqWBRDUBBgmAyDLwIUJoaGpi
3WUX8/hj91LddTvGOLpffRdHHn6Ykf2DOOveHATSo1aj+QIYiWsDCsCfHglM2wIo0f7pSPu3ItIl
ympLuN4xxIXvfx+pulpsDk7s2If093Px6y4lDF3k6ytqXcL8d1GwT3Ghy5v9+b7X0cAdz+ev1EqY
TgwgMMKhA7t4fNv9DPQf5/DR4wz0ZUhXpamrr6ImHaBxNaIziKivazDGE4L/zRp/Sw2oE5/zF0AF
YwyoMJwJGR7OoIFhXlsDTU3NNLXM5YorrwNTU9H5T1VEYODkIbZtvZfcUD/9gwMc7B2gtqqKwAQ0
NqaxDgLx1+G0EB2PL0ZxBCIogpHIRxbvH/vGASPZkEw2ZCQT0tZcS0tzHQcPPM3atVdQ39hZdE4z
Ye1MxwIot94ThScBpxZVQxARPEo+HnDpKzbz3M930vfUIzSvuwyxsPyO9/HkR3+XgPZudamLRDih
Sk7RwcgKCLVILUxdpkEApRetAlQLNCDaJIG0hGHmelBaV3Ww8KpXY7OQHQ7pefgJrnnVOlKpFDZ0
/mWdB3oU4Y/9fo3IwTlFrY5ZBVMu4j+VB6MSVwHKZQ/gVO9etj7ybY73HqdvOGDl8qWsXtzBgq5m
VixtZWF7A1kH4FC8L6jRnVR8kkfw6lQFBON7VRyCYMQQho7dB0+ye98Jntt/gh0vHOPYiT7CcIAf
fO8oV13zetJVDZO+7kr7YOBkD/d+/4sMZwY40S/U1ddxzcaVrFzUQWtrA+cta8OqYAxRFkcRFDEx
k/m+Ex8X8+Zw7M4pSGAQEQ4e7aPn6AA7dh/n588dYefuo7TOOc6xw19j01U30ty6sOz5TVWrT7X9
xNaAdwMAVBxGDarRO4oScN1rb+Irn/0P6peegzQ107T4AjqvuJpjDzyNU/saEwRPYLVfoAH0JEjA
DI0YnJYFUBL+Swtar9AiQarLWbvBoSstvVzyoY/7wJ+Do9uepaOtnu6l88mFNtL0LhrnH/v7LooB
uCjtlzT9tewDOtXCn9J2U40DZAd6eOQn3+HI0QHSqUbeetO5/OobLmHtqrnUVKcJgpk1z7M5y9He
Ab7z4HN8/r+e5OldR2mzg/z0gW9y5bW3EdpgRr8PAJflyW0/IBuG9PQKV6xfwltuXsfrr1tDY0MN
qWBmfXRVpW8gw0OP7+Xz33ia/3loD5kw5MH7v8n6jTfS0dk94f7T+e7pHDdu4xwEGJw6AjW4QFG8
NYA4FGjp7OT8C89n17b76dz8SzjrWPGm36T3gbehNDarddcaMd9SdccVTgluxJcXTV+Cj3zkIwB8
9A/vmcRuZbV/g/iRfgtNKrXUhZm3K1q35IaNLL/+NdgcDB/t58C9P+WG2zYTpFJFUf+8G+BcIfAX
kUPe/9fIhKLgi43nk1WWvmHC44zVNm6fy5zi/nvvYX9PL4FJ86H3XMPvvedali1qoyodYEwS/C7q
v+QLyI9eqIwogsAwp6GGi8+dxyVr5tNzbJiHnzzEnLqAY709zJ+/CKVyEpiILFUdWx/6OkcOHWDf
kRHee/vl/J/3v4rrLltJbU265Brj6yoNECb7t4KqTBFqqlOsWNzG1RsWkUrB1p8dJZuzHOl5jvkL
F5NK1Yy6JxPdy7Haj7fvZI9bvL5wxeKDV1G8p1A6Prd7AU/++Eek2uaRqp9DqrqW0PbQt2svEKw0
aXkMxwDIoCDDIFmY3hRiv/eR107dAhit/akTaCUIOl3ObXK4diP9XPSu38WFvhN6Hn6KCy5ZRW1d
NWFovaa3LiICHwi0odf2Nu/3e9NfEzgZ62Edq/BnsppgMoHAqrRy//3f5EhvLyO5gN+5/TJ+45ev
IBUUwOecxWaHyakF5wN5YnyQzIj/fWpBoqlnDWKC+FIxKQE1Ja5P8fmtWdnJn/72ZoYH+vnRT/cz
LzPIySM7aJu/llxYWZR+oj7a8/zTHNy/gz2HHDdfcy7/z/teSVNDbWF/LGE2SxhaFIeJp1OOr08E
g2KMwUU1cv5nugUxAaIatY2vrfga21vq+eCvbmJwZJjPfu1nDI8Mc3DvMyxffWVF5z8b1kClCsMP
BTdRQZBi1KHO+F8oViUQJUhVcfFVl/HoQz+k5uY7sdax5Jb/i8P3vRE3qLice4UxHFbHMYWTghv2
D8z0xglMwWYbpf0D0FpgjhrTZlKpTut8xd/KN/8S6boanEL/gePkjvWy+oJlhNb7/S50PgjofAwg
jGIBNrRYG71y1lsCzuE0bmt9JWAJa/tMQuWvsdh/Mvvu3bubw0cPMjLseNXlK/mNO68qAn+YyzI8
2MdILutJTh3WRZZNGFk60bWpU5RoxpPo5Uuex7Ia4jtiWTSvjvf98nqqq9L0DViCVJDvr5l4HTuy
h6O9GRa0N/C7d11dDP5cluGhfkZGhrA2l4/h+LEcfuIGdQ5Vh40judE1aTThn0ZgGPsaHemU5bfe
vIb1qzs5cSobZYdO370ut76SfZ1TQmsTz7bLP9+hdYQ5RxhaztuwnhoTMrj7WZx1iAhLb3sLjhwO
NimySKAdtBmoBZcuRuTkSW5KTlup9gepVmgUMc12OLNZccbICc554135AT0HtmxjzYaVBGlv+lvn
CCMwh6F/xVZAGJv+kfmf/yu5cTERVHrDKt0+mYdhqO8YmUyWVDrNKzetpKO1Pt9PuVyGwaEBQhvl
Lf00EfhIuI9++1c8eKSwrOrTYy4/yYmOfX+doKFjwzkt3LJ5Cf0ZJdR0YbzEDLyGhwcZzMDrrj+f
C86ZV3gWnGVosB8X2vx1Fa41ivQhUdYmuj7n1/vPRJO7RKbzGNcpGLIZS0dXAzdt7qauOkUuZEyA
T4cYKmk7EbGMOk4U5PbBbpsPfrvQ4qxfdtZx1U03cPKxLdjMMNY65l35JoJ6XwekTjeraDNoo/pJ
RNP5zp2iTNIFGKX9DWgNSKOIaTWpoDNrh69Xcqx976+Trq+J0n77SWuOVWuWY8PQa/3Qei0Rxjl+
D3Yb2nwMwIWu6Csl4WdOZN5XNPJvEqb+WN+nYZaRgSxr1ixi0/ql+fW5bJbhoUFEFBHjH/Qo0V34
sREpuMkCThI5TiRvQUepcQ+veL/ik2NwJMOchhS3XLuCL393O9ms5i2AmZCB/n46Whu55drzqaut
ivrCMdB3MspgBHk3TQFRlyjc0fgSve8r+Mk08nUBXgopw0JlRFKcKm4kyzXr5zG/q47BIZu/vumY
+NPZf3IBQR8IVBWvCkRRNX4eARQI6FiwgI6OVga2P0XzBRtxxrHiHR9m+99/HKjfGCA/AI4onABy
QAbIFaJHk8sITDoGUKL9q/CpiRYJpNNmsq9UNEjVWVbd/EY/h5+FI9u2c8HFKwmt9YAPHdapZz7r
Qa9OPSlEPn+c+49FjBQN+50OwGcyNmDVMDgScu7SDtau6vLHdY4wN4ziEAI/R6FRRLWEQgtBzeK1
8X8FNb6oxpcAIGXur+BN7WzW0VhfhzhHNgw9iZYhgKkUO43kQppqU7S31OXXZYcHsU4xQRAp7gjo
Cg6hGP6J886vUAr1HBKXO5S9Rt/cMJwJWdLdSnN9DSdHwjEJbjL3dirgn+rxVR1BXBGgBlIOR4CK
iWgULrhiIz+65zs0rl5LENTTte4aXpj3BXI9Q6jySiOyF9Vj6ucMGPTFQVMzAyZBAOW0PzWCNKnQ
KqmgMwxHrldynPv2X8YYD/4TOw6QslkWr1yIzblIw8fA975hbAF43zguCHKF6GkC/JPR/OPdpEoD
iUVXrKMJSI3xgR58ZB4gl8uSyeVApTDBiK/xKTlg4r2sMxbnj6MqAY0Bkjch8rurKrkwR0Njiva5
DWQy5F2A8a6jYgmVVOCK+mckm/XEFJ9ObL0nFXvszpd266h1pddYbh9vQldFx3dlI+6Va+RKpdL2
E2UIwPeThkJAdJFhgMHlswKK0jF/IW0dLfRvf4qWCzcizrH4ptey49OfBuo3CvJ94DD+dwX7gCx+
8pD426jUCpiUBTBa+2s90CISdLhMeKVCYMwAK151My4ay3/kse2suXil9/uj4J8Nk4EwG1X/2QL4
IwshfwmuYP5PNMS3UpfAR2crqycod6y4nboQdSGuaL84yGWKNGN+U9H3RR/iMEFiXcwLRtX/llJU
Vlv+9vpgYVVaqE4HZG3B/5wJser8iPT8CSsGh8sbnsX9ljfnKbgwJN8Tn1XjdFhEAozBGQJWFIsP
mnhXcezrm63MwGSzAqXrxXnLzjkhSIHPiwQE6q89xLLm8o3c+/Xv0bh6HabeMPeym9n975/EDiqq
usGI2YsypOgJgWGm+PuCFRLAKO0PPgBRpzDHGJptmL0KlNVvvoVU3vc/SMrmWLRiQSGy72zev7f5
wF9c+qv54F/+W/IatNgCKJWZcAkq2be0wtA5fBDO2kRrr8bydfARkvMWzYTfVtwuNqcFRfNWRfHt
dk59YYk6nA1RWwhQzYg4BYl+eBGwYZaY4GJllse4Tv5BzMc5ovLosiMzFZ8xiAgAW2peTw6YlW6f
7D4TbRPxhBlIAKFF44BpCtQqgYH2eQtobW+mf8eTtKy7hMA5lrzhTnZ97os4qq4Xww+xOgekDo9j
wxRSglOtA0iD1iraZCTocKFudGi74xTnvukuXDRpx5HHtnPehct8ei+0Eehjbe8KhT6hLZBAVAUI
vk+KgoATlPdOx+efjGWR3OYVkC93LWxX/yAnT38q9Jw/YCVt4kg7hOpHjtgZtACctWhg8xeUzeYi
q0eKrq3EO5m8jNNPeYWgCjhcUP76pgv46bgIlbkgPkiKOjQVxNFRogEhfkFDzt+4gS3f+SGNqy8g
CAzzN7+RF77879hBFbW62Yj0oxxWOCHoEEW/KlTZA1cxAYw2/6kXpFUC6XBheDkoi665mKq6GnI5
OLHLa/+Fy+fnc/nW2rzWt6GNzP1kxZ8nAKcF879c5L+cVFL7Px7ISwFe7ljliMTF0xUnfXgn/lXI
gPn9xz27cc67dEWZe6tqIxqSKIDKmEHAqYg1xc9AHM2fRgaqrCiFeMKoQIB6/xkXnUyUBoSZ0+Iz
ER+oyDoQP0rQD4qKswCJHhZonT+P1rZmhnZvJ3XuOox1zLv+BvZ/7X9Q3OUSpB7W0LWAHgVzCshM
VtNUQACjzH+Dn/GnUYxpEWSlYldaeln3zr/N/zjHiR37Wbq622v8KPLvwji/nxgDkPic1P5xJyRN
/6lo/+S2iUA+Vrv8lZdZb53zT6xNtBNmZqjWZESjeakVb/67GXYBrIOgUH4uqhjVRAzgdIh3c0D9
8OJJEtxMuAuV7FORFRDXaHjv38c/Iu0fD48G6F69kqcffYLG1Wtx1tB97ZvZ87V7CGhqc07PRdiH
0gBaGwUFE2MEJiaDiiyAEu2fBuoFmiQw7TbnrlSUuRdeRMPcTnI5GDo2QPboceZdvqq4qi82/eMh
wInBQM7aSPs7Xx6b0C5T0e7J9YUI7PhgnmhdufWKgnWIFvpdwY99Pz2oAMgHIRV8ijXUGQ0COop/
dskZgzvd1yj+13rj6kGLLdyHGUj7TQXIY7Wv5Dt83CQibVUCBVT9jEJRXUX3ypU8+9NtDLywg6YV
55KqbaJj4wUcf2QP6tzlJmAblhaF3iglaHUS+mcCAhil/cETQFT8E8xRsucpQyy76booIAbHntnN
vKVdSGAIszZf9uvCZJWfLSaAqBYAwJWJZUzV/B/P7B8P5JVYARCZoGoT0XEoDOI/fRLZI6AOhxIy
s1mAfJYi78/EA1pO43VqfB7iYyzjXN/U8/RT0OZTCAj6qkdvSWmgBJLKzxWRQhARn/4OhWVrzuf5
3dtpXHoOah2Lbngbxx75MNC0VDCdoI1AHWgaXzpW8bRhkw0CBqA1gswhMC0a2s2KI11vWPqKGwhz
kMs4Tu7cx3k3biiUOdqwYOqHIc46wpwtuAI5Sxh6DSqAGDOaeyKZzkCgyUwUWum8AE4935ZmAacX
9ZuCxBOmiPiKQhfOqAugcc1uXK2o6gMDUexjFsIBlPafRNejRkGjlPE0CKBSsM9mdkFtbOb6DIsA
1ggaeq4LFOavXMmOx54gHOjDNDczZ/FaajobyR5R1HKlEdmJ0gR6Aj9hiK00GDghASQ98tj8V2g2
YtqdDTcqyrKbrkPVu6Andxygua2BqppqwnggT8L/t7Y4DuCJIRouGMXSdZzqtYk0/WTN+Uo1/Vj7
aBiCCxFJHCe6kafROvZlB873nw0lP7HKjFkAClHezS+7CIinkeQcUWo1jqDDlAlgylp7hr4ntgDA
uwEa6f44aBxogI8UCkEqRdeibk4+vZWOy6/FWUf3jbex63NfRJELxZg2tdqkSJ3AEDBSqQIahwBG
mf8p/Dz/DSLSIsZ0O3Ktjl5W3/IW8pmTKgAAIABJREFUP2glMv+XruiKNH+p7x9GAyFsggT8QKC4
mk5i/38MqURjj0cG5faZTJqwlDBCxc/dl5gcszgpeHokFMUYRZ1FrS0aKTcTEk/Imlhz2o0cYp/Z
KZIfPzLx9U0LpOPsM1X3IL8ufgujY4lE3r+35NSEBCEIhkXnnkvP936E02tQNXRuuJ6dn/ssSlWd
c3KewF71v8E5gMd1RROGTCYLkAZqBG1ATItmw6sBWpcvo35up/9xz4OncEMjdC7q8tq/yPcPI5fA
EVr/kPrt3j2AhMki5YE+kcauNHdfeqzxUn4THT/GRDLqEo3184HA0yRG1KcjiaPLlT+klUo+TQ35
2vU4bT2jopQtjRbxBSZxv6qzU9LK47WZrGUwURByXDej5KNK6McJCNFULikERyghdU3N1NXXMLR7
J40rziFd20THxvX0PrILVd0gRh4WRyO4U2DS+HkDJ3QDxiWAxPkZ9bn/OkWaTMq02mz2IkVZ+dob
88Hh47sO0LGoPRr2GGKdK4zlD0uGRkaBvzAX5rW//74o+FGB1p6sfz+Z+MFE1kDBIvAPpVgdtX0G
sTexuHhMvfhxFjrDQUC1oCHxDzKICkZir/X0iCdcF5nPdtpBwKnm8Cez34TWh1Of0gxi3Z+vgPFx
AQOBD4wxf+lS9u9/noZlq3BOaN9wOcceeRKl/lwxQbOqzlGlXjxWM1RQGTgGAYwy/00UYawRkXpx
2q3YwLKfRVffBH7OB/pe6GHNpav9OP9Yu4dhfgCQsw6biwKC+QBhUvuLVzO2clN/PPO9UgKopG25
+ICI+AkuHEUugEOjWW9mCRxlDut8SBkQnDjCGSYA9ZMVUSjzc/mBO6dLCoVHUbCswjqASl2ASq2l
idJ9EwUXy1oBkUflo23eCsAAVhDjfxCzZeFCdj72TXKD/QTpZro23MTOms+iI4gLOQ9kF1CHJwDD
6DnZRkmlacAUUBuZ/80u1I0ACy65jHR9FTaE/r3HCQxU1dd50Ecz/MT5fmsdNpeLgoGR7x/NksP/
T9y7xcqSXGd634rIrNr3vc+lz+kr2WySaooXiZRMeazRzAADA4aMAQwD82oYBvxuYPziR48fDD8N
bD8Yth9mPPCLxpBsCqaGI5k3kTOUyCa7m2r2lX1js7vP6XPf972rMmP5IS4ZmZV12fvsUwqcOrsq
KyozMjLWWv/614oIwMTQWQ6lZ1jmafH9bv15xxZVIFPbUqsnxqT7UJfMAgQuQtX6lXir+oLDgAop
FwDUCDWyVAoA1ZBAI74dZ1zvYFHLvYg1Pw9R2PubrhtAk0bul4qrqcTPHhyurnLlySc4/uh9hpu/
DVa58vWvcvuHv0DRrxojP8CxBboG7C/iBkxVAFm7Avsva8CWGLNTu9HvOEY88w/+jtdcDu699RE7
13b8Sj3R6ld1iPvXLdZfAwKoq8aHaybDyUIz/xYR7nnn6Ks7zdJPfeBVnWBxLEYF44psgY+HK4tg
CQ05GKp+g45aL54E9IkeYWhqs/ll08JHrfQk/AtcgFvcej9M8s95eYFZ71v1XXSr/LyACsGKQ6Sm
MmBFPEE4Fi499RQfvPMWW89/BVXL9b/7j7j1wxdQ1n4TU2zj3Jb6NP0BC0QDehTABPwvgBWBDRHZ
EvQ5pS4cd/n03/9P0pJOe7+6wRf+zhe8tY/r3Dk/My36/Z4PCFGB8TjB/2j9PZzUiZl/uZWel647
cTdTeIJpCUF938+6VoWDGvJO9i6AY77YXmBRfDu0wrk6rKdwgSRg91aC4l/qLaalw7wn4mT+PZ4H
op+3/iLWv7dOUgDq5/RBcrVs5FnEgDguPf4kb7/wU6qDfezODpef/yoiJ6Brhlq/IEbuqEtugCWM
znAlug9skUQgC7oCZkON7FDrbwNc+8rXGWwMqMaw96t7DFYKhuur3scPkD+tdVbVPgQYsv/qcU1V
jRP8dyIT1t/3wWwIPu27afUviiRsnbNST45l/SwCYgJU5VHZxk6bDKg4nAiVeAVUZxzLzDMtEq1w
Eu4zDGQJMPyRRDqmnFNcWAQE7+5Uk/d3Hj+++/lhOYOzcADe2GWfQwg5RVeMF/zaVGDAFAMuPfkk
xx99wGB7G5xy9etf5+5P3sap/p4R+YXAFrAKuu+ZxOmlVwFo+38LDARdA7NRa/VFUJ7+u19GNZB/
H9xi6+p2gvWR5KvS6qeRCKxw4+Zz1iP+po2ZWPZrXk7+tM+z6iyaJdh3vHvORPblPzUesi2PBvDL
q3nO12JqUmz5YUJi7Toh3TlxAB6NLZPp8G6/a2bMwtx7fBjG/mHRw7yogY9mQFsBjBOxakSSQkAE
FUchNTuPP8HNj95j6wtfQRWufv33uf2T1zHIsyLFhuJWFR0KpgBOm2VWJktHAUzAfwGGIOsY2RJj
trWurtTs8fTv/2FYyRZ23/+Ez3zlWcbR6ifrX6VVgJL1r2vqauwVgAQhJwp/e8mpLhyflak3L8d/
liCfJb+gyws4p2EyUONri1M/ae3CyzRrGwjUgMsjmXSxJGDw/0NfmDparmXSgIEktj7xyi8uM389
gLNC/m6d8yiRRZVHFwGICipZKr8IYgy1qSH83bh8mZOXX6YenVCUq1z92n+M47/H8MyGos/gU4NX
SasGd6nG5pnNcwEsaCnImohsalX/NsDa9irbz1ynHsPJ3WNwY78C8OmYytXByrtGEWQkoKurEPv3
K/6aaEWcNgrhHGTew34+bx2ffOMS3AdIS3vLcsRDUT8zTmrUFWhVoW58sSRg7UDHNC5AAAPLDQN4
SjoSkmEpubm/ukCi77yoYLYb0CGRISEca4x3A4yAEdQIxXCN1c1Njj/6gPJzz2MHsP3cFzl8dw9q
vijCT5WoANTiFw0lGYrsmc3LAyhICMBsaj3+KihP/sHvhZuAvV/fZv3Ktp/z7+qU8BOn/FatOQC1
3yBhPPaaTSRNY40TgLoWt48AzDuwa+2n+bN9v5/n+y5CNKaHZ/NBAsuUjLSpaMoFIBBmsxXAQr5/
c5E4U8OfP6xUvMzieY2GW3G4M8P/7ncX4ccv+tu5iiQubkLgWBDE1ElWVAyFOGqpWL98mZPbH6Of
+w1wyuWv/QccvvvnOPQ3jZgNUV3Hc3dBAcRnPQcBaPt9AbIisC7GbDj0WWXMk7/3uynFYO+DW2xt
b4QZfy7b9aRKMwETCgiJQS4uokGMAJB8yz64H8t5iL/znOssmYEutF1yQTMalgFPOI5HSwgoTv2y
aig+ac9JrwKY5UbNuUTrzd/GhCe/6Elof0AC50EA045fRGz/zNa/jwdQvy4gtZ/8VIihMg5ram8o
jWHj2nV233iLAKS5+ltf5/0/+WMsW5fF2E1VNlAd4mX8tC32TckUQK//XwADjAxV2VLqouY+T/57
/wAFqhEc39njsace8yv7xq2+JiYCNVl/VYgGiPHmw0HY937Sgp8H1i8avsvrTyP/FjnmVKEOLk2s
B4hrXIBHLySCqG0UTu0Z8gt1AVLML1hfwU/KMcskAhVH7YMPzq8tcV5ffdHfLKIUzsT6T7teXodo
H/328GIMakwML4EYVrevMD54wPjBXYrHHmPzM1/GFBVUgqp7DuV1hYEQ84tVkwrItMEsDsD472WI
yLqOq2dA2HriKQbrA6oKDm/sMlgbYgYl1WgUBlzc2celyT/tpb9qD3GcS9bfZeRfn9DOI/UWEfo+
yL8oyTjLzdAqpjI3x/yml61n+oiLonjFqmr8llX1eOEowELFKSHRAACD5W/BB/CZl6H0LQl2HoGf
9t3DKIJ5LsZE/ew+FPwSc2GzWOd8KrAxplHqdc36zmVOb99g5cpVcLD1G19k/7VP0JovYvhLXCst
OM+571MAE9bNgA4EXRUj667WLwA8/ru/42Gvg4Ob9yhXh8HS+1l+Ofufkn7Ccl9VXVGNRsn6pxjy
OYi/XGgX8dX7yMVFQ4x914xFU3ZcNhcgJs0tiQZQaFbo9fz/hUcB1EUSMORuUPsBukQlIODHTNhi
zUdhMsG5AHZ/1ncPQwbOfZ8dS3tMBKsfU4GjO4AxWGNZ2bnEya2bbD//ZVSVnS/9Fvuv/QUKTxmR
DU3zAtSC1M14bCDAtExAwUOHEpGhWLOq4/FzoFz94qdA/TA4vrvPYGMt2+gwbPpRO+pxRgiGRT+q
sff/YztaMpIJ6HkSgM7i55+HX5hWV7300UoHjsbxohDANAcub5MzYYlynxOsF70kmNbkSs7nAU3Z
q/ARFb+dVrhetlN0b90zIJ+zWPqz8gaLKo0JJEOYEhxyAUT8tEBX11AZRBzDrUvsv/9u+s3OZ5/n
A/4UWH8CYzbE6TqqKyAFUKn6ZRzz0igAaXERJhCApYisYsyao95w3OXab/+9uLMzBx/f5/pvfipL
/Y0bfdTpFXfw9dsjB1jqmglAGm6SAFe70H4R697t3L56uQvQZ/EXySvoXssnwvjOaM/9l6USZKK+
TS4uklnhl5S64NmAtHIdZCHFdNFFA/MvIdtxEag97fuzkH59x8+CCOYqji4CUO8WS12DGL/6dOWo
jfMhWVsx3NqhOthjfHDAcGebK1/6fWr2KVhDkCsquoamlOD2xiHhcm0EkNqgLQRQj8ZPgh/wO89c
pxrD4c0jjFEoLG48Cgt7BNhfNT5/zPt3dU09CmRZsBpNCjCNW8Bilvu8yGAew3+WzENVDXDNYVw7
s7EBUo++KH5OQh2vGPZYvMiNQRKzmTJEG95GuvUeUVH8qtFxzghzVgR6mNBd99hFEH0zr9HjAlTi
93qIk4EQg1Y1pbHUtUNMTbm2zujBfQbbW6gKG08+xcnHNar6HCI/VSjFM4fR3yb/O40EtKCFIKsi
rGutz4Jw9UufS+08undAsTLE1UpVaViKulkAJC7W4MIa9X5xkCYfQaTZVDNvVizTGPpFQn2LwPlp
IcJFeYJU6ogA8oG4/CXBjDbblPnFQSISuzgOQGiGEWKarc+WViTwTyH2pTwUBzDt2Czy9KwuQvdY
//cuGd9mj0n1awGIILX1SV6mpjCWqnJYcdRGGW7tMNq9C/opcLD57Gc4+fhttJbPScGKOh2gFERY
Ot0FyL7REAEQKRFZUXXXAB77rd/GJ+vAyb19yo1V74cFYa+ToLtW7L8Kc/+ruvbMf9Tg6dKS4ugR
CSyKAqZB/3kC3sfo932eV8fvCehaIh/7eZlKQANsRMIOu8kduygOgJT1mD6rC+7lxZVZCkURPxsQ
kDkK7qwhwbPE+vt+s2jdyXohnbxbVxV1PvkHW2OcQeoKZwxYgziD1DV2dZ3R7Ruofg0F1j/9aW7/
6G1AH0fMwAilKjYQgf65BRIV+uYC+OMWKBBdwcgK6GcBtp65mniC8f4JMhj49f1cYP/T0l9hQZBx
E/+vxz41VSHM+Juc6GOy+QDTLP8sIZ/FAyyCKM6SE5COx9h79rNlW//2db01SQgsE5AzZf51i4vR
hXgyxYjfwmJ5RIDfjUji8uTaKIDzWv9p30+D+OcNB3Y/t8jwiTrhGVKhtcA4sP9iwDiK2lFJ7Yn9
csDoxodESLT17BdQvgm6vgOsqDAELRAxfY+pT30H6QwIwNihMtpy7LHz2d/yDcSHADc/86QfaLXf
mtov0uiafekDlFLnZ6uhYaWTsLZTJOZiu7okIEwKd/pNVq9rzftyBHJYNy2EmBOFixQfhqqAivas
y0kX4FGLiI+JK4JBtOpdWv0szPjkb2uEZtBahGrJDoA65xc6CUM0XxCkaefZFcHDCvW0OrNQRTP2
+uqJl6PaIbZxqTW6drVDrP9dubGNG53iRiNsscrWZ75CzQnCamFtsaZOV0UYKlKCSJ6fCv0ugOCX
Iy0xMhQjQ6/5T7j+xc/7CUD3RoAi1uLGnnmuAyHmXPzbhKK0s3RTS8AhoAIzl53vS9SZldq6iDLJ
j09DCDNRQQ0ZciJ8Ytn0uENx4vD0f5VWzH0YoW9fILgYMQ9ACRGQJScDJd7IJz01hxfz2Rd1Ay5K
KeTf9dcJ270nQrlxAeJ7DXIl4a+JhjXUs2trjHbvU66tUqxtYgcVOhK01s+Dvu6EUppIQGvXoKQA
MjfE4BV8IcigOh09qwgrOzsRZVCPKuzaamPdIwrIYKc69evTp3ht5aes+KVkk+VX1Zbw51Y4fx8F
cZpApu6cUm8W/J+mEOZdw/+mIsbd26UDjR9KH8yH2YoL6xN6xlg1Lp5xUQ5Jm9WIMfmGFGx9/UiK
gl9SzqlHXG4SwfW9nzjPQ7gC+bFZyuUsLkQvEhBprH5mRCWsihyJdXFefkYP7rP2xJOowtazn2fv
rV1QfQyRIWiJl+lw7uYyky6AqAFKVIYIqyCXALafeTw938ObeykRJGkr12ilRmuFLarrOo3hJNSq
Uy1/0wdt6z5PqGdZ61lIYNrxWYigqVsDFSbbh8HwqOWhh6hMS+YKzNkd+FxcQFwWPBQDgQNYXhGn
nkQ2fqUrP/QWE9a+cpb68wW4//eLIxP/VFt8QCZjrlaMjS51jaoN3znK9W3qw8OAGoS1p59j762X
UKefEitDFfEKQMMqo1lpJQL5lmACaTBEZE0r9yzA9mc/B3ikMDo8xgyHHuqHl8bwQGiURk2lfnnw
5oY7ojFHMKchgm6ZlUDULX3nWRQxdJGK/+w6QZQlb5oJYSKWt/4itY+Xu/7psudBBRpHaChOJGRy
LtnVUYOqILgJBRDLw7gDZ3UDusfmXWOmOyCSNpl1wcojNRKE3alDaqW2fmckHwlRzGDIaPce0RUt
t6NYyypGCpwG+B9gdzZYexAARpFCfAhwgOgGwMpOmeR2tH+CFDbA/KAAXOP/N3ufu3C8fwcXn9EZ
wn897H6fW9BXZgn8In59X514zVkcg9fGYT3ATh7AsjkAsSFdVB1x04w+BHD+SIDid5sKWZwmsvH2
odp91hakTUrj+FrQwj+sYJ/l2KKIYPK9F+CEAgQvX9YnmqmzqMa/4dk6hwyG1Hv3PCOjsPXp3wR+
CsrjiFgR9SEEbQLwcRRMkoCKCBp4AClw+jgI2889n6qeHpxg1teSoEvQTlFrafYXbSZspLXJNK57
Ls1l50DVWQO567sveq5Z4cNFMwKjC5CnycZ7e+ROcbshKKMmNfkM8fHFSjMTEOIKYbP3cbz4In7M
BcuozpOAi8LubjmLIlj0Oosigb7jXl5yV0C9RGs0Ng0ZGD/XqphyQHV46M8BFGubKPvA9ooIVkUC
/FcvcP0cgMbn61chFhGMiCeUTli7dCU9/mr/hMH2dotpjnA/+SyqYQnnBorG7L++Mo/k67oBuXWb
lbzTfSC5VV8E4k87X6vfqEFGvfd10WVmoowGlKdhSbAeBLDQNfpQgsT/goJUP7NkmTEAFUXTLOR2
lOMsvv55Lf1Z6yyqIFrHtFO3dqgNckV0sRWtnd9OTBUph6AuhQI3nvkSyhjntDQihXfp1fisIgIE
8M9xggNQL/uCURFjRJ3bUo5Yu/Y0APUoLOJhLVXtffs6Nlybm4jW3yO2Bg0015P25+ym52XrNadY
zFXoWv/ueeem+05pi0hcF0fwIzPVpjPX8RGXkPevSlhBAjC9LsBCZ+v7Tef5iTFYrSe2Bnv4O55x
hpBr4otrxlmrmWe3vGf9bfzuvIhg+u989AYyBJAZu2hYPQLoyJopqHYfUK6tsrK9hXfXFIQVRIY4
Bt5fa7unExyAET+GEBExNu1ts/Opx6hHcHL/FALNRUzmSY3zjXEufnZph5pAaaYb7crpPMHPj3WR
wrRowbwMwT7EMc3t6CMi/QMI6bG5Yuh26iMvcbW+pIVDmO5sCmA2PxBtvT9fDTgLF7T50UJF1Wcj
q5MUSWq+O79AnxchLFJ/qqWfdo4Q/gsf0Ej0aTuy4xWBwwTFXKystbK0KfGrA1X6eeANIC4P1vJN
JxcEURCDBEJpFYSaB63G2rWVOM6SXPvVjePAc4GnkZQbEBf9BAmr5cy2/tNKn4DnZVaGYKuj6R/w
feedRTL6w+3lf7SjZZdRvN/oSDP2eqzjvDJ/kDf3ZJxkwn+BfMe8blMlzUen3xK3q/cribMgg77v
p43fRZTBospK09wOP9lOgtBrrQn+OxcIX5TR7gNWn3gCFC59/qvsvn4D4BLoKsjQZ/dioUninAwD
CgbBYMRUo+o6wNbTX4qIi2pUgcadWTXt1NLAFPEvmgZ6TebrmbasZEJqgqABzOYCupC/a5UXJfK6
DyzyA9MGQf/5wuBvpQIHS7xEF8Cvu6gg+EFCfS4lMOsa+T1JtADnjiqcpwSkI7Edk8o+Lw9r2fPv
5/12UUu/UFvSuBTv65s8rB5fNX7XPv9UTDlEq1ECaso4PqqBdwMoSfuPN89xMgzozZfxlX2MZ/Ox
y+nrk3tHqVIkJeror2h4INJ0gOeO/MWMiQ+tuVxXGBshbL6PSiGds0PkTcsBWMTX7+MHptXvQxS+
cY1F8hVCH+iSKDIFrRWpFCnFC4i6pIS75dyhQGksfS2PdAP0/svj76vZoWi+m3Me2D/vN2f5flH3
oPVdfk8SxngSfEjypySiV8pBMwKFEAUARS+TJvelHLVUugrABIgwwGuOgT/ZSV4DGQyoQzg2bmzi
G+OTM2IGYK6xfMafb1L3hrvpvtOLjyTkmr97jm6ZxuzPUgZ99af9JiGA/FA0lssSEQEx6tfo00ji
zIaks5TANMTUruSh4kXhi0VKRP++eW0ScFFL3nfsYQV+kc9nQQvqslmXtPkc71J7l0DVpwLXYYq0
jj1DL8Dq47/J/hs/B+US4jesFh+FjxAOmHAB1CgMRFhBdBXVbd+EEyQzZuO9e7jDOzBYQcrVBp4g
YceYJs5f1yFjyzlMOEm+Aag/EAZsu/smLLtIO+7bDMwoaNOtwVnCgtM4gz5E0SyX3YI1IcoRO/aC
5uTPKA6lDvpdwrTdaQpgvqJtF40IL7vHhMwegX6bdkrVsAxYZscWhfWLCPFZUMCssog7MA8teE4n
Wtfm+6aKpKXg4mu0u5vWoly/cpkMfkszKCNz0+8CeKiADMCsq6ueA8GubqWfxNXu6qNd6vsfUlUn
UK5AuQ7lVmpkfLmoDHIjqW0o33YJpllgndg2vO37xyWquoN0sqO7iGOeRcx/k1+3cXdce9S2ZeWR
F9/XAjVo6QKTPBsBnP0akeMI7hygUiELbTB9QUXjGEgSkX01XXjPIsyLwvdFznsWRdD6HAQmfucX
24FCPR5wziHOYeJGMEqYHxFKPhaj0DY2svV9NwrgJwLBin+JReDyZ7+cqhx8sk/aGE5BXUW9d4Nq
dOAn/Qy2kNXHUbsWfJfmOUXyRp0mwW/79I2Gm/Txm+O+f8KmFFMsXKhCVyG0zzn9AU7E+zvWPz3Q
5kdZTy45ChDBhlPExYy9XONeROnwGe5saydcRPGPUxBnoqVYeE3A86KC7rGL+G6u4qCz3Hkk1NV5
ecK/nDZTg2W4Bu40/cblbjs0wm+yz0wiACFtCEIR1ftgZZqW10DIOHA1OjqgPrpFdesV6mqEDC5T
my0YPulX+wkCKWEWWRImGitskmKInkEu/G0Y3lYW2gsLuz5/6tIpAj013g8zlUanV5hwCx5x8QOk
xmC8e+w6xOSFlKwPxeCwS80ElLDtuqpDtJ74fhEhn/X8zlJ31vezz9OY4cZ9hHxnKV8rRDwy9r/F
LWmYcJZxPnlERjnp2qDGYvUigIYa8ESgZAsJth589iZSkTEuG5MztAI3otp/l5O9m7jxKWbrc5Qb
n6Lc/hzYYXIDoBF8FJ/bLD6MGDuhj1CLkH8S5meWKYM9ff59fp7mc1vY+6B/+/cKWFokCXHhjCVZ
SCXskxdYHvFuQEzFPk/pJ/4aJVvjMMvVcT6xzI1DNqDnVuateXgepfAwv5leL3NlNRf4+Lv8NyEb
MLg73hjm4XYJj6IhCOleJhL+YoKbmlEBkP72IYBYOTCG+aHwJgl+LnC5FQ6z0twYGEN9hNt7k9O9
X3L68XcxG8+goz2Krc9TrD1BsfVsEvxcoHNlkAuzX1OkcSFaQk9HUJPGbD+Qxu3oIon4kHSifn9R
JsKAyy4Rtwn4zMQwaUZnz5abVSZ+F4U/HQ6LUyx5RaCmVc3qROm7c8L8WcJ9Fj/fF+kcb5b+mnWt
Lkpo/z6IG9qQu/i7t2lYKkyMUQHvzmcXTE0Epq0KnIQ9bCkm2XHCcSNZxVzb5DPEpHliboxPK7C4
w49AhPG9lxnf+zmIwW59lnLtCezaExQrl72A0hFYAokp2Sz0pBuiO9H83+3YVtRASIolrlLUKOk+
Ye8+2HA+naYAOj39iIs6vzhrPj//vMLfX9r3YjDU4lhargNBCOo4poSwd07Twimkb9/n7vGz+vYz
n21GtkXiOp2jG0pOZLKkutEARdvVuLsShmZUCoILct+K7uWi6XQbO721XQSgnfc961rEPP78Kl4f
1LmFkOgaxD0JIphQb6WUoBD8d/Xeu9T7v/LnLzcp1p+kWHscu/44RbmRYFObkOtpuDZa0tfpx6k5
+Ri5CXWZQshO2uf75w+FRMX64qfiyBKCf2Tt9DvIOiP4TP261WcPf4m2z+1Uw2SA/OgjVniqPisu
jaPpqx5dTFSg7ae36/Qoh0zg/bBo8iTS3xmLtSak27o2jfCjIfcmJgJpGnoaxm3T0vDOyietCRsd
Y96nABx+BFVR4bQeq4m/DhY/EDM+YOAtdFwrBlOGs9aNEshxpNa+Tgylqd8GSasDxntvM971+57J
cAu7ep1y7XGK9evYYs13l3aseqtT/bFc/BvXYPaU4u4iJRq2we5TCL2DD4O70M0BszJFxvziK3WY
CmDT/U9r4/ku3FzcGMupqbHL9HyUsM5kgpW9HMD5yMDoDrZtYDIOfX0o4TwtwW+MRyPAXWXUC9Xj
Ff3fuIS+SJr91yBTSXUrV2EPj9B6BFvbrbM1+TY59d8+R5cEDJIofpG7mirlD7TaK+klYkIMsgl+
xWw9fyolkWSqQN3ELOOmEpGSY+uFAAAgAElEQVQQCS6CRwh1cCcKdHxAVR1S7b/nLfRgE7tymWL1
OsXqY5QrOxMEnUTio+UueFUpgXBsKY8IudLvvcsRjXyLHKSrNCLREs+2POifrqmEVTrGIGHFnI51
fDgkoOQKzSnYqgK7vDwAVRAVTBwv2r8gSFP677dPCGdacmhD+oiAvYS26k0y/p0WJeMx6VK26otP
9HHq0aRGvqo6oTq9RV0dY8RhRLHDDYpyA7a2vVgaL/KeI5CWSzIDAQggtaBjhBOQE5DaAYeHXg8Y
oBiW3riLUJvg88ezifFCLAXGGGoMIpY0k0ji9II4YyGwuWLDLCEJx0xTLyxx1dQr0eqI6uCQ6uDj
cE7Brl6jGG5RrF6lGG5jy/XQwfHpZQ8g/c0hV/OcPbutiYTMz9BGFDEvteMeEHfQWaIicLEtFjJ2
eBFC6zzFCGCXtxwYkBR3BMz9CCCH61OcsD7fPPup1tqcRjM3IAi8dp55l7BrSrxGc/44fpq2ddyL
hDj8sfroJq56gOgxUu1hyyG23MAO1ykHqzDYQFJEzGSiuJm1IOiTrG3xbRcBOCdUgoxE5BBhBHD/
jR8D/xkIrO6sElcOjyrFK6dwTIp0vBkgmU8tofNUw/7ncYJS1LjxGA0KQEhEo6syRaMBLQj10Q3q
o084ffBOuPYQO9yhXL1CMdymGG5hitUJheA7p1HzQfYTCUnr/27WYJh40yH8mgG6TIbcgLVp1yXf
xRc8GSgrzkEXdT3yos6nAqfP4ueYuEkh9t83nxvL3RxP8D32URZPb/v6zRhwwXrPvOuJPomhupiQ
F4RN22OnPv6E6uQ+7uQu7vQeenIHcJjBOrZcpxx61xetfR6ExPZ5UtbnScRrltl7nxyetyq+Twog
3K5DGWE4UTgWI+9i+P3Wj0SC4Mbc/KAEjG3gtgiYAoN4BCC+iZhQP9fM6tooAkicgQQ/Ok/0UWlc
iIQMJDw8R9r/oB5RH9+lPrnfnNsU2OE25eplbLGGHWxSDDey59bAuSjEUSvnHEAr9Fg38+/b3Rs5
gBx3PcJSQ11peNBNiHSSvOyflDWtNFxHe0EQFT+780IDDfOKeBXtXQEF0Qkhblnv0NxGwMNJmITe
0626F9i4UGcyBEBi7luS1UD8Nvryv6tPd6lP7+OqI6rjW+j4wKPa0wfBmI1JJHncSVsrhCrJRS7o
TQg+jjkaug0Tv9K0fmOLkJ8MA7qAX0fAKUZ2wWDsJkb8xrO+EzLBT9Y4KgaDmIACxGCKYUAFmZAb
27yPUYGEHOLhqBhMu67kboI0dY0hhaRiUo5WQQbDeWpHfXyH+vhegzxEMMMtbLlJUa5SrGxjixVs
udJ0sNASmpQ/kPqt4wYI6MQmTI+4WDwUdClanNjhVom5pAuX3Gzm1rAi92UvtEw5pbcbGvS9fyhd
FyAq8Vxg2yi/OR7ZdP9ZwmzWtsX3V2xYd82Eh5byaQt8Ndr1afJHt6hGD3DVEXpyN78bmgdUQx3d
RiUl1kUEbEwYh42w+1y9GHb3slBsbyddsH/jgyAexl/EELd2bPVuH4OjNFkWtT9hmXWwybSQZA0I
/n4Q5KSZpGxfU3Lhl86x2CEeQbSOifVmJ8obWSjRFLFxQdiDzxaRQdzSSoKSiKNCClDBne7jTvcZ
I+TLXJvBBrZYoRhu+r/lCsXKVvt+Wsosu82ejn2UpXY1I3WsSuXXiw+DM3IYD9+4jpujBiOa7yj1
6IsJLlddJQic8j/yUFrWUtUuJZuFkWlD/RQWjsH1mcX/dnxyFzc+xVWHVKe7aHWMG+01QgzhfTBa
cYOVLgcQ4Xy+fJ6H05ho3SUosKAUovHx9s5gh4PUutP7H/nTWrmpTlX6trCmywH4azr8LpBO1QPr
u+++m36wcmnVC3pcfDKRD3HfgagYrEcCKUU2Cmcu/PFYJpQEiJ+ENgh4hPgRxoltlM+EG5EhA98L
zW9CP/t0wviQMl9dq9QuN9rDjY4YHz9on9uWFIN1TLniV2HJLgl4y79M6x9dEA0xcuvvdxoHcL7S
tbSgulwS0KHUdT5NdtaCIN1c+9ynJ3ucmRLQ5lj8jRufUNcnuPExrjqmGh14yz46CJmuwVJr3Qh6
61rajOV8PGp2PNXN0YX/T2J0yURCPU7s9+NWAroW48PwEnWFbIKfD3CIiN/BVoNsZ6WNADIFj6J2
UH7iTsec3r+d+qUYBLhvC6QyCYZIEsioBDzjX5SrjCaEHxqmPzucW9N0JzESEDsoJw7DvdiSuOMw
aZKISYooKZt4MWPS2wR2YsZD1K5xxiNjYmpP40qMqU524WQXqStgo4MztUX2LKf4weLvIt5Tp1kz
rdoiiqKpY4x4+mOJPKeo8xthJGWebw+Wa2CahJvW9PdMGYTD45NdAKrRIeoqXH1KPT7BjY/Qyq9+
1XRkDD92oHo65pp6aX4MzViGRlEkOJ8piwinWmM4CHhSXCFUHoUdAnKx2PX11A3O2ajIRnhNEMiF
tgbMFIAnrZwQ95lTI3ICIGYjGXIRMGIziG8atyAJaJGhgig4+ZPs+Pv+Iu1j0oHWEc5LFHyvhBoF
kdVLCocOOuggg9gRKa8hIgRtzpNnMuZaPCgMPb0PHDKRBxBCVssp2aSpoLjUaQNC4rh6KDSQw9Kw
56OZeIqPtERhdxqsrAbI38nUdOMxde13sK7HI1x9CqpUoyNUa5yrcKPDbBxkguuvFP5m7mOSHW3G
H/FPt1/zJLBcUeRjLJPFKPAC3kUtgLFXdhIJds8DeB49C/mJ5wMQoVhbTSDiwZs/prDPgjEfo+4Y
5RQxPkU0e2ptF6CtkERrjYwLt9+9x6VnLrN+vREIMQVYA+PGDRBrExoQCdDEDtB6HK7T4zN34XvO
CeR18qSLqAicNtmIZMomEoMJLWQdTV4/u/GUfJS3MXM70u9i2wyc3gU+hjxVVlv6YAnFE351rSg1
SlwUZHI24JnCdtk9dK2sEQ9FdYmujmj0z8PScON9Htx6BxTqeoRWpx3lDm3FHQUd8o1OPWzPrXkm
vBE5REMDpDSbyNan64TxlIRbsnPF91kb4nGJyW+OtvUPhih6BsYjUInGSooga+Ld5Ew+xPjolhj5
UGuOEU5RxggtUmSCBGzZLVHEmH3R4ebp/Y+QZy6Hk0b/XojbjiX2P72P0YEsWWjC8mdwPLW8h5ds
KYgooBHJBOhkQodFi5/i4ZnFTse0sdC5tW/lJORavjvIM0hnY8JS2wXwbVmWcEhipyUoLOeUOzd+
RV2NifdRDFdS/b5SDoZp2bauVXN11TEQy7y/2KIg/CogJYxOqE4OaUP03OdWuvfRCEnkmaoM2QSS
Lp8+27Xg6TlHK99FD+G7KNSh5bjMQLQ0a44OAspN58yEPxnVkExnTMvQGmMZXt3BCOx/fMvLkQcJ
Y4GRImM6OwNDfxTA439w6tRhUHErHN/fTa7w6uU1Rh8/wIihDv5H1EQixqOC2iZUYIoV6rrTAXlG
IDA5pz52ZHYshQU7zbVdfoHmoSThDn5fCqcQBDW39nVQFKY9uNMmmNENCddNv+2QYZmPuZzi71XF
gRQYu051sI+s2GYgAdXJUYZgukWoTk96jodSt3/nlLD68BKVgPGKzlGgcgvqO6DPNbKaIkaQLGgS
MM2eS/5wPJfgS4ZycoieigYkkIXskuCG+oJn8iXUJRAlBp/Elgt8sv5hFx8Nv8s2BhEpQbwsmUwJ
NNE465WhSHq0pw8+RlhFjD0ATjGMPTQU13ASoUvTO0mvOJunBioRuQnCg/ffST8wgyJZe7HWk3eJ
C/B7iubkoNgmPOGvlQmdxofVI9gt4e8qjHDMFM3xlGocTxxhWvSxpPkuwvq422yOKGKoRsIDDUlO
DaGUuQytDszbvlQNgKhinKDOIeNPoLofXAEFCQklcdJVmC3Yfnmi2Ieoel6R3Q59aNLcjmWWMIkL
CxyBxlVvcksfx1XG10CGBvJX7tvnrl2OVrWB5pG5T3xRSHKLxzQT4rxNsS1x3kwcS3kbW0ggXNtE
N7r0WZ4RAVjrUXiUN2spt3eSbTvZe4CYFX9WpcZvWuEwjTMby+TOQH4mSQWMEUaIOcDUHO2eJA2z
dnmN3Q9zgc/em0AQRuE3JaZYBe6H0+dCrG0BztvSCh/2hJsk83mgY8m754rES0YIpoETH3I2gLIJ
TpOny5FF7Lec9MmPLa8oior1zavvAittxTYxOdm0+y+WqQb9Hjn5pYCKLFXPOafUlQu8RniOLV8+
eyZJQeWQvcve5/WjsBovAhGyyxQk0eIHAmw3mRJo8VfBZXUZcmglMEUkIKRdmAN/Fl1oY8ow5jMO
wBQY8aHAohwk+Tz86L0AguQmaO0QJ7FRHQDY5wI4hAo4BY7Emtep+J0HIRdABOwgQH6TayLfEEmZ
Sx2UkGB/56ZbjmUU/NjCKcjA5HWkvw5Km3PI68WHROe7nETMJiWlsdJVFk2X/e0WbxWbfeWHxB3e
2xLale6zwPc8Zg1qasTJ2U7xkEWQAGjiA4kuYRTMLosffxjaGdsrxvsw4jqCSDb0TCPIyUrnvr5m
xzJLTzh/jhoSupQGecZclxZ3FJVWUD6mTHBfA8fmZapo0IDxsjh87Goavgc378TuOValEs/8d7SS
L40CaIyYE6FWjwlHGDkEePDRraRDN69vYhIDaZIiSKnAYhFbQOXJwKJY5zQXJM0sbEsRZ4Ld5+/n
obpu/XZFWmTi1Hqxbvw+QrhINM5SGMH3D7/NJxOrcTjjIflyioJWflVmcYjRkLfdZZzPUrptzwQN
MGoRUy/VC1BVnDicbW+ckZqqZAovKgU6Fjs+Y2ieY3QHst8Rvs/5oWSresYD4Keyjzu/75KDNIpF
MiWTThXHtwvGtESst/QRFUjmcktQDHZQEqf/V7t7gCBG3lanY8Jerg0f1mrRRHEgYzwCOLZl+WsR
4eTuIVWYezPYEG/VUyM6703R+C/RZylWmkt2mWalI/x9/r5hIeFv1ctRRk9JqctdDkFoJmaESRj5
g5zIC2iThqLGC/9SXWTJ9gWNfRd9T53xIkM3eT/1+cxNHYfBLRv5CKhKWiwzHkuoLCmCaH0jaunA
/e78EoIy795v5IL6IgAR1ufjhLo93sRkKe1kv82OmVweYntMY+WtP0cbaXvXOkbbjCkY7ITFQATu
vPZSuL7cAI6BU5CKHqias2yxY9RBrTBW1VNVPRUxCCt88sqriEC5ATHsJ1KQiL8MkkiE/uG4KVfo
h/SaQXqlV2Aj0ojtnCbUueLoS0CaeAh53Z7kpNi+1gCChlmP19C2O91K8VxOcSq4QC6JFk2fpb41
U16ZVRBITFLrFQZlZh39BNOlajjvOqv6GX+pe/PnED63jEBHSJNAx7pRkEMKeCL9csWR8wjRONS0
FUlWWmS09PNc+fjL3dOIMMQiZpDxa9EdKBoZs2WSr8HOViAATxDj18IQkY+AE3w6a8eKNXcUKqe+
9BMHPHM4RvUUa26LGXL/1x/4MQVsPL7Z+PhBE0WFEBOAMKU/LsYTgROaLkD1NA+7Rwgja9rtqHZv
0lqHYBbkbyX6zEEIMAMlQNOf7d8b/GZsyy1x8AZ3LyWWBDcgvc/IrIVfoa9ypKoOs8xdgQAh7ENh
otGAtsBmpaWkbadunJATUUIcB65T33UURyQGszGQxsdka1tj1Vgmxm5XUWTf+zyaAjEDTLT+pgiJ
dpEY9ErAbqxjS6/EDz58E2M2kMIeKXokiEcAJiQBZTofplHVYUqwwomqnogxHyKw+/5H/vcG1i6t
ItaGRkTNlLsEOVFRYAdr6Rkk/0eiVZkiiC0mfprwdyH/PF5gEYSgeP++pK2l+1BC5ACyXxvFzdEr
F138ppEV0rL2NI3ILXqrCK0RMbf4enWYo7bM4iLuqCq0zueDdPz+HLEl4c1L/D7+1jWKADJl0peb
Eks+Hjtja6JO5hKkMZ+1s2f8ehI9wv8i+f7eyPr3GqID5cYGkc64+9rP/LgV7qOcODhFpCLEgrvz
U/pTgZWQIsUIOBYr71PJ1+6+/at0odXLa0EzRQKw8771KrERAcSkmpRQ09fJQnuvsxlQK+/cWVa/
D271V+4oozn1g9vRBsOPVjS6Z1fwSTkSGGRJR7NKXbie+8D54VloqHlrVKkTDF5O8TsCOYwVxMTY
ex+yzRoqRccli/dbM4Ea0liKboGjWc+yLzEojJXWLL9uvSAwOfGHNEpJ8/MENyRF12IEoAyCH4nA
Mvj+vs7K1aspyfXgk7telK25obiRSEgCEuL86aZNTDom4WUcRmqEMXBiivJDED5++ZVkRFYvDzGm
RIosLBHdgABZ/FyBQeMS2MEUjRg7QlMHNE3qE+yOkM60+ovyAuEBds87EyXE0mbb1Yln4ZfkIgsE
Blj9tcnZ5fyVlylwP3cVWm4D5CEtH7FanvCDt19OJeQCCD5m34XgOcSvPIRPmX65Mo8Ib5rCy8dY
tPA9+SjQGdM9BPZEncALtB5JvEbgwSLcNwFlmwIpBk0EwJYp1L7y2OWkpx68/csIAD/C+/7Rd+kd
jZnTIZn8x9Qwc6xwKNbe9LOS1rn5mkcBa5fADgfJ6nsNVWbWvwNdxFIM13s6qqMtzyT8s3z4br0Z
CKEL71s8QV8JDymkaXYfeDLASyviY/IVWTBCOoIQhGHiNSP7Ly1ckXMd/gJOYOnZjhLC8zWk9Sia
b7O/05Re+L71rAv64XusnhmBbiTqrPVaY1CyNTO1+SPRgOb+vzdMkQQUY/2MXFNgTMlw2xOA1dGI
47sP/NMy8iqESUAi9YT/H5rRuutsuDuBSkMyEKoHUphbIuvc/uXrCQWsX1lDTJl4AJLlj5OFbCAB
/Wc7XCcJD5JZzQCNTKbJewW2z9+f9jAW5QW6RMw8UtDQcAOZW5GTfjG8trSi2WKZEY4WWRsM3kTE
Vxj0Umbv48t2Xn0OR2A+ZrpSF1+cqp+GLN0tzyQT5Oz+5j7H3C2cYrnT9/O4oL56U5RAzn0ZO/G9
mEHLfW6509YbVg3vi411zNA/pnvvvoYx2xhjHMqhKkcgI5AaxDUL9zfykO5YxeBEUDF+vTWRGjhV
1UOneoCxv0aEW78ICsDA+vUN3yCJFj/+zW5ALFL4RhflJphs8Y5000VgdWcQgnQ17DThXxTy97gR
Mwe0ySxFHHBZ/VZzdblKQEE1rlCckVmphPz/tHLNtHz/GDGoOy/X8Gbx3ErYinyJJe204/D0VVfA
coVuOtZ9GhrojoEpFn6i7jSF0YdQp9UJ741tjKFIgPvDYFAzJC3NZyMWY0pWHruaInj333yFgCB+
pegBRg4VTtRQqeBcsFNqGns1eQfp+UqN6FjRI1V3INb8AoGPf/5a8hY2r69jTZG0UtJYeT6AKTIt
VmDK9fbDEEtCbdOsehdeTdW+i4YCz2L146Ay2fvsoZo4EJt7Ehcg+ZLdgAb1xjbllr3seXWsf1Sy
E6ggzLuYSGt9dBqu9wkL4Gpc3ezYM/XXvc9sSv0JNDADPUxA/RkotMUf9JwvRwIhXb5B0BYxw8ao
2sy9tv6zmIK1x65gjOeA7r75hj+v5SOUA4UjPJE/VVOb/F1rpqhfPboCGaN6XAxX3wXh4NYBezd3
QWDjmiThJyQmtCx/phiwXhGkZbgV2hBTsg7JO6lj0Wf6+/l55ikJZj/AeO1kTToEYarjr+VyEpDO
qguPugg+Nu7qMBU1klsdh+9hL5KdRqNDvsyiYW+8OiCVudfPUZthcdKPSUU/UTdeew4v0EIMOT9B
4DFs896UyYA2kD/IFJNIwBQlK1cv+8dv4O7rbwQdLm/gE4BGeBIwhABDyUSs6cGOSxVKBZwoeqiu
2jeF3Td2m49e/HHiATavbwYL341XllmDG7fAxs0NovDna/21GqOdBzJNqLMHME8jL2z148CR7Hez
hai1/6IBMUt2AZx6JRQXppSLzkQM2DFdU/36A8ss4ieqeP8/CvWsWH38XfYMpynyVt2uHz/L35fZ
9SaUwDRy0P8VOyAl1CX0HCICwaAaYzFFSbm+QbFRIAK3X3sFY3fCnAH5UEX2BTlCzBgRbfbwFJoV
tFoIIKsQGiwitYqeonqs6g7E2F8CfPCzV1P17We2MEWBsU0ewAQnkCEDW6xAuRoukQu/dpRQx1L3
dq5tdd70h3pGXiBBxxnscKwfBqPmulTiXm5LKnF5s7hKrkTS70Iv0vmU/LalFadArX5dv1abhPmK
oMctmEn6df34af7+WZVAUFwtF8afJ8lL6aG/ScZ0ELi2TCGYgvUnr3s5NHDzlZcQMwRjbqC6j+IX
A/Eze9ttzorpfimQaQipUUYoh+r0QArzU4Abf/NWchc3rq9ibIYAJBf4xlcx8Xs7oFzd6XRgLNq4
BvN8+YXzABZQJLErkpWYRQZl7ZbGb2ptTBpTVpdV1K/hYjQ4HyYimKy9+Su1fc6r9bvu/IaLci3O
UBQcNRhFCNZ0Ysr3PEVwBnTXFdy5/j6zlUA0dFEJpPvyRiTJjS0QO8wUQIaobUj/tSUrV68km33n
lZf93RXmNfX+/yHeDZjJ1DatCEak81wdwliRY9QdGGvewBhO7h5w5+0PEfH5ACubK0HALVLkAj9I
cUsxFlN4TVYMN5sHkDogNOJMwj+jzkTIcNaDPoPVbwlH1pbcBdDJlMtHWgKaclrjXN34luk1S7Bn
vFq/afefUIetY5dYRDDGoLW2MncnYf08F6/zm1looCX4c/z9hEbnRAiUTAmEgWNChl/hc2usLRp3
wDZ8QGNIS9aevIRYODkYsffBjXB68xqie/hZgH4dwGy5sMXmApBVRmrQsaInqnpki+JDsRt88MJL
/oIC209vY+ygUQJhJeB2/LIMmq3AlqtQrLRZ5Za17iKDvF2LKIiuHzcL6nWtwYwOaQ2qzJJgWy6A
C+u7Ly1OriCEzSEBNYHx7gUhCwr/HAtfY5ZOAor4netc5ULGY96+TOktYrXTbxZ5/vkY6qDKafW6
Vj4vJqujXgm05SRDAsUgcQEmrg1QDFh74noC6p+89D2MvYQYORThnqocC4zA+HXtZPqzzVrY/dIL
lyCV+iWFD3F6INa8BfDL73w/TdTbvL6BKWLDS5o8gIzISK5AiRQl5epWp+OyMM3Cwj+tzgL+fpcY
mpcE0iWG0oMO7WklAvmpshrW0PM7DT9CRBBOrc55hjwtG91N/OlL9Jn3yhJssnuwsFyeA8Iq8GF9
gxjinChdN2ABt2ACAU4T7m4ewKJKoJOZqJ060f8Pgm/NwL+PkTRbNu6AeEWw8dT1BP8/efFFQDBF
8XOnugvsA0dhBmAm1jKh23t6JfIAqWKYGShHiu4bW7wAwr13PmT/xh5iYfsZQ7EyxMSwX0j8Mbaj
0ZImKxisXiJksNCOBtiMIMleCwt/pv1nQf6cRZ5arwfud+v3KA9JsyJTl+Y9+0iKo6aua9REkimu
W3iR12wgRXdTzmUUv3iPUKcNUGchthyhQTNupvXHggZhwv2bRQ7G+lk7W0R3qGMGXi5sEfJqgs8f
XAATZMgEBG1MydoTj6VVxT559Zeh+fZlVX2gsI9wjI/izRwBbQ6gD/n5FYJPgWOUfURv2rK4Z4rL
vPPD75HcgGc2O26AJwSNLb0iMIXnB2zIZS5LzGCjR7CzvOjUhgtyDVqQb5ZV6J6jO5jaVUFaIbLa
1X534E59v7fsI1ICxoCVIJhmMsX04S9Afv+S9qdbYlG/P6CrCRORdMYzDKWltLtobqJypgQW9fen
Qf2ulc8n/7SRgLElphhmiLlI8pKT51EZrD91nWIQrP9LP0LqAcE/+pWq7gocghkhUqdNRPPwXzYt
fLLlMvlBxFQqeqTovqruSlG8CsKb/+Z76ZyXnt7CFGWICASLn/sv2eyl+CrXL/lrTEzs6KQJzxR+
6anTJ2RdDT9NEPNzLAAfe85jMX4d1k46kNBeO/CiSsrercL5xbfigq/S+iR9m2484uICjFVq717F
1Y4WDQFOTAmfgRBb4cJp58wFvK9eZ8ymdPdYFHKBtyHcF4yoSe5zQAXFAFN4BRDl+cZLL4MUmMK+
rqoPQPaAQ4TRRFt6SoYAcu0Qlh5uEgZcCAeeqNMDW5YvIsK9926y/8keYmD7acvK5qon+UxGXkQ3
wBQYWzRTG2M4MO7vF92BvHMmsvv6OnheHTKNPUf4exnfGRY7hQE7JGCcC/Ao/f68GUJYWk6hcgGN
dCxe72ua399Tt2srTBv1LKdo2JEEJkNW8xQ7maDOMxbh/MlgPMTkn7yOZv0Ytyg3FimGmYwMMcZn
+TW8QBNZs2bA2hNXEQO1gxsvvgiALezPUD3w1p9ThJokvtPLYk8wLRMuh6C7qu5jW5YPTHGZ9374
/ZSMsP3MFiZoMS/sMQOwyQeILKYx3l0oIxcQS+IC4lJhDyv8XX+//wYnCJ6FLErjIrg8EUhd2ISl
m9bMI3MBBEFrRy0OjcvDzg35TT/bvPpOLGkZ2iUVIe5YU3uFq5kSI7vnszy7hV2CBUi/RZRArkzF
L+hpbIGxA2wK+3XcgaLE2gGmGLD57JMe/lv49Y/+HHdaghHFyJsisqvKPj4E2GwCKrT1ZfY4+zmA
vLIR8OtNjhSOVHVXnbsnhX0VEV791z9IhvDa85vYMsQyrWf7TVAGrYhAzGyyAwbrfr/BhvhbRLDP
IvxzIOIEwz9rGqn01PcPND+7wWJcx7p0TnmmTToXKA6ffah1nFo9zwU4q2Iw+ElGkj4te2cgrRUT
5wE0rWDyGS/gFiTFEevP4o3mkYN9SqBDYrfcXD9m8um9TaTML7IjdhBkJ7gCtsDagrUnrvnHK3Dz
RQ//bVm+oLV74FQ9/DcyQoJNmvOYZyIASf8LYMYIJygHqu6+scVfYwy7v77Dnbc/whoYbsDalXVM
YPolyxDMNZ1Js5lKr/lWNmlCgJ2HMhEROIuCWADytyzBDKGZiAhE6+P7x2VhQIfDzTIqKZ/9Yorf
r8LvZqNpklUX5s+b93HhxTkAACAASURBVD8tbFh0+iXc58RyWo++iAhOfATCJwJ1+7BL1s6D+fn4
mFM3Cv9UxNBVAlmIUrt11M/sixbfeOE2psSUA4xExr+JDhhbUm5ssvbUDsbC6f6Imy+9Em7ZvKzK
fUnsv4zBLIQ2szvpqoe8MwSECuFUkQNU76Pu19aWN8Su84tvfiutEfDY85cDGThoCIxEZAybuGYI
a5iiYLBxNfSSbTrs3Jb/LLAtg/xzF4PI+6KzpDMGbZFuJjBW08tFIgAJl1TxefL+SJwwMw/uL3qF
yHeEI49605Oe06u44HXE8TmNpe+x7nNhfk7ozUCLM93JHiXQ0lHN3Jfk7xfRIIaXlCmbNiqASKJv
fvoprPjH8N4P/gwpLmFEHqD6rgoPFA4QOUGomkcvtCIBc6MAk7cUx5EKjEEPVXngnLtjSvPXAL/8
7o/9LFSBnadLytVhIgNjaNDETMCY5JDWERhQlKvIYLPT0bHD4p9cqy7gGiwk/HMQQp+imHjwAtgW
AhB1iM7n+y9MCQiI8RGAytXMRTPnLZr7zktNdvaXRFCnaB04gJluTtedm+EqQkfwZ7mVUQnIlD7u
/DZmZaaxHPP+ByEsnhGApggT68pEBtrSo2lrB2x+6nEP/w28/92/8D1Sli+p6l1VdvHz/09g+oju
ln4OIAcArTNJjZGRooeoHhhb/BxrqU4tb377+1gD5QCufvaSJzSiViu83x8VQXIH4t9iwHDzanZh
Mj8vJgIF6HQhlp859egZEFO4gRiKctl6ACHjap58X6QbIM6/FCFtUnmRRdoD3pmlbwuCqlKrQ502
/T2X+e+igVn1DRPIofecpjPWJio0v9XJMS3WBlc4uMB2mNJ8k2FMCXQDTDlk/alrDDYsYuD2669y
8qD26R4D+1cqsgd6oHCiIrUav7rXIiVTAD0QIYMOKgY1goZogKrec87dKQbDl5CCn//xN5MbcO03
NrBFiSlKrCkx0ernSsFkN2mHlMNNJO4d0NKWEUrlflpfh59F+M8SEZhjTSM6yUJiEpfQYkpTYivO
m0vfOaeqFw6twwtIDyO238RXccZX+F3HImi9bPGP2dYalrg1WR8vwvwvuhDMIm5mXm8BJdAKo0oi
yHOXWIqBj/PbmDdTYAtvNAtbsP3ZZ3yul4F3v/8DxAyx1r6hzt1DNfj/ckqW/aciqDFpenr3Bcx3
AeLJEuoRGatwqOiuOnfHFMUPMMK9D/b48OU3MIEM3HlmO4QE82hA+Gui9isTKWiKYUABMc57XsKv
r4ppP4yZD7WLEObBRgGK9noA6MKrZYnIxbgCLigBJVPiJmvjebmADBKqbR9+pGXyAr6vTJM+PsHN
LIIGFoD5LYUxz6jkY28e8+/31Ix+v7Ee2jdykKX8Rt+/HDC8dIm1x9YRgaM79/n4Jz8BMZhB+SN1
ekeV+4ocIXKKGJ0LPbOSekBlystIezD7UOwIZF/V3Vd1HxpjfylmyC/+9bdTTsC15y8FFDBoNFyL
EIyIoPlbrmwi5SpJCXQf1qyIwCzhX4Tsm4D887iBPEnEZoi7mQA0r1yUC+BzkQS1UfHMWRH3oS7k
+8jf/nJZgLibd10rLpF7Z80D6ML8WW5g57xzlcA85t8bOhMYf5uM4DAR59E42sxo7nzuab/un4V3
vvctxG4iIh8jvOfZfz0AOQKqRh+2Efy5ScB238UTmpEKR6p6T527bQcr/waEd77/U/Y+2QszBGHr
8U1/M9HvN01eQOMDZREBW7Cy/Vi787sRgdYcgbMK/wx/f1HI31UUQRFpTlw+0vh4/z2I+A1C6wTN
fRgoIoyHfRETb8L100ZEyywqGCWkU/cp7HMocJgh3CyuBJKLlLkmORJI0H8li/Xnr0CMF4Mm/FeU
DDY32Pz0FcTA+Lji/e/9AARsWXxf1d1RuK/IAYZRAiw54Jv14gwKoAUC/AzBE5BD1O0aw3umMB9J
sclP/+j/IuwczhNfvuoTg1rWPn8fQ4JFgkHlcAO7uh36L5/skTOp8cEw/UGfS/jnhQPb2X/JtxZp
hcUdPSjsITKDM4U9tWjY0lVdNgvwQg20d3XS9ZyG7cgu9gqzip9g5RDj8PGwjqLOybn0ecHnuUgO
wKx60c9P/v5kzr+xwzTxx9pBMIhlmkMTXQMbDWVRcuULz2IkWP/v/hn1eIiIORFrX1NlT1QPQU45
53bUs0nALhkYO44wQ1DYU9U7rq5vmbL8ASK8+Z0XONp1HgVc8yjAFgOf6FCULX8ndkijGLxCWNm8
3n54vXMEZmj5hYS/OwAWjQiEuvln2/6dnGOezGyXIVPZU6v4JFnFJb70wks2vVjy2Y7da5332vO0
nCjOBBdg6nA/Ixo4cw5AfD9l3CW/P3wfxq6xIcnHhrReO0gZf41RHPgweemZ/+HmJpufukLMN3v7
29/x5yqKH6hzt1X1jsIuwgnIGDHNODpzFGCBIvEXAmJkrOihqt6v1d021vzUGHNX6yGvfONPPAqw
8MSXrmILT/zZTOi70D+5BcUKdrBCmVKEtf235W89jPAvEOLrnq+vrgHUoC5aoxDqmXgAs+PmqmHm
oEzXHdLzrjmB4KNjiljjlfZFQvQ08867PdHTeBR6ZnoJLpcCKdV6ltK27c8L1c3HRk+9uUogM07J
G4vEX4kthhAE3o/3zvgvIxoouPz8sz4IY+BXP/w+1YEDY9QMin+rym1R7uGz/05bXRGJ33kvWghg
wVdTvBsgsiuq97R2t8xg8BcI/PxPv8voyLfDcwFbmDJouKIJ/cX5ACkzsAiwqBgy3LjiZwoC7TTh
8ID6Bve5hP8hw4FiwJTZxJj492w7A5hFcP6M5Ju0HFhNYOtN6/Yfzv8ntG2Ywp3iJh9AwAaJGTlL
kdb7/rtUVb8iELVXctHXXIjNZ4G6iyqB3G3IWf/uOPXns2Ear9gSbOk/58bQNMYwTvoZbm6y+enL
qcmvfeNPQSy2sH+hzt1S0TsKDzByBIzPm5h1BgSQWz2vYcSYkcKBovdrdbeMlZ8aY+5WpwNe+uM/
xgaZeeLLVyhKn/BjM18nRwJJEQQ21JYrrGxdo4kISOb7565BFhG4UOHvQP6pXRXdgaxNmcviWyXE
6cHTZFxb9eOp4oDKJXlKi9Vh8L6xVwY6KcTnLCJCOxSkGGNmNOscKkCk+TOluUaEQk3Dq00w7QvA
/FnCvbAS6LqOdG43pmHjSb+Q7eeTfoILXA7CWB+2Js+JLSms5fLzn26s/w/+kpPdCoxVUxR/pepu
i3If2Ac55SH2oVmMAxAhxveawSSQuAA5FthX5x7YwfB7CLz4J9/meE9TRGDz8a2kBRseYJBB/0FY
LzBMJy5KBmtbYUNRIc2l7u4rmNKEIzS7iESgM7gHIp2UVL8tt++22H/eX5aA8adbWml974VMkOge
TIO8IpiiQAVc3Hf+okN00j6n6rh1P4h0how5I9II50puxmT7VcOu66FuW0DnKYFu1OAilUBeJxub
psAOVjGlD/PZPBcm8/0jJ2btAFuUlFubbH/6MiI+4fFv/u//B8RSlMX3FL2nKrsIBxg5BWrENP0m
homVfxZyAc5a/DRhxMgY5BDVe+r0lrHmZ8bY+1oP+av/418klPbM1y5TtPICirbwp3UCypaiWN15
0mekpYeRpwjTOT4jTNMS/hnw7szuQWDCO9uae6GIcmOaAR77n/YLaH+XnpO36GIkLCY7eX/VeMTu
3gPKwQrUYGy+l98FFVPQ5BdEAtC3KemGTHBzD33i1brHRvl5mqEfyjrnuHv3Fqo1BhPmXuTPIZSZ
ML/r688jiOP7WUqAjPhr81WmWA2r+IR03yzpRxISDsggyEBRlDz2lc8i1nvAb3zjj6LvjylLb/3R
u4oe4rf/dq3OndnxnRdnQQC9KMAAUgHHKrKvcNc5d8sOB99B4PVv/Yj9T/axBlYvwZXPXgoRgQj7
S6SIpOAwI0XidMgSO1hlsHHFd3aXEIwPXKGB4n0PcwHN37IeMxBCd4AZA8ZnAmpIXQ52PAzyMKCT
hcysXPYyprGChDoRNUhztt4m3bp1izdffZWrly9BXVOfjKH0g/ui8gBE8eSVaXiYnB5IbQ33ONvy
ZPeYK7oMJXXL7oP7/Oq999C6wtoi7E2YKYGF0UBHsS9UbwElEJ9PyvcvsIMBxq745J8iJPsUJVKW
mfEbJlfAlANWr11h48lNxEB1XPPOd38IxlKU5Xecq26qcgt4gJgjkI7v3z8+ZpVzIwCJv04ogIAC
3C1j7M+MLd6WYoPv/M//q0clFp780iaDtWHQiOHmo/9fDJL/n1yEYgVjB6xsXUPKFX/hXAkkrTtP
sEOLF0kYmocQWp0cFEVR8uEnu3xw425QEC7oy0boTWuQN7A3vaf7XfbK9nLrltpVfPjh+xgDhR1w
fDSidg4GBeYiV+wZFNw/rLi3dww08N7k99Jqv07I/eRrsi/6BrGqcvv2bfb391nfWOP2gxP2TxyU
+bLgXaW9iBKIGuw8SiBP941pwEkgsOVq4rdsiv+vBMhfprEfIwOmGATr/xxifM7/69/8E+rxADHm
gZT236pyU+Cu+mW/T731j515Bujf6wIsChv6oy+KmGNE9okoYLDyLYzw0Uvv8OHLb/k5Aptw7fnL
FIMYAomd0SwSkhRAgE4RQq1ffjITgjxBKDyAFiGo/XX6SjdysKjwp7oKq6u8/OrH/LufvAkYCrHe
f7cGYwRjDcYGKx/GqbWSKYg4bgRrfFqBNREVzCbx3nn7Lf7qr/8tTz1xHdVTvv/yLqfjgmJlcKGz
DVnf5saHh3zz23/DaTWmKAxGNCk3Y/w92mCYjVisGIwYjAhWDFYEa/KXPyah3jQl98knN3jhhb/i
dDTiys4mr759n1/fGUHR3RdAmOBsLloJAImYzknImPwjBht8frGDZPW9MSs9H5CiXmXYAajElgU7
n3ualUslVuD47gPe/PNvg4Apiv9Xnd5Q1WD95RihIqHG85dzIgBp/o8RAaFWOFFhD63vG8P7tixf
FrvC9/+XfxkWrYQnv7TCyuYqZhBShMtIguQdE481/IAtV1jZuU5L06rSEuyJNOEMIvbexqJhw66f
mX8ewtoK+3f2+N73f87paEwxGCIi2GAhbbBuVsQrgiT4uVB4rW+MINYgNiiLKVaxrmvefut1fvTD
H7C9ts32RsHxac0PX9wFV/Iw9E5fkTVPxv5/f/YTbt7Y9YPcWIqgqLzga+AqQtszYTemURKR0/D3
GPmS/pF869YNfvrCj7i/u8v1a5cQKn72ym12741gWE5pbCdqMzPB54xKQOxERCQfk1IMMIPVlPSW
s/5SdsJ/doCUQ2xZUq6scOULT3tDXsBf/2//E8ZuILa4bQrzsqq7I+gDFfVhv7ylXcO86Is8t/PM
cLHxdxAB1Vr83gG7DrlDXa8Vg+F366r66u6NA176k2/x1f/0D1ELn/73r/HWd09R57Dq0MKhrkJd
iarDEHa5JYTCnENVGaztUJ2eUB3v+2ubsOJKSkqX8Cy6sdq+5i8q/F3fsqtMVvwiCNtrfOMbL/AH
f/AV/vN//PcoB/iBkhaEAP+Uwrr9584NVm7fvsW7773DSy+9gKjwxLUtbAH/6pt3+fX7Y8zVS70r
dp0nHBhRhMgaPPUML/z4I/73//N7/NP/5h9TDtVPPi060DuVaX0/5X1W9vd2uXHzY3724k/Y233A
Y5e3uHppwLd+9BF//eJtWC2CxrR+hlA37Bifr8a9McOz7O0YGxMosjpd9BSlLCy4EusT/6iP8Q9W
vYtbZNY/N2zFMBm4OOGnKAoe+63nKIb+lm688hp33r+NMUNsWfyRq9zHin4C3Ac5QGTcQiMPUfr2
VjpTEbKUF/GLhYjoXVUdqqvft4PBd6vT03/44z/6M57/D/8jVjYMW9fgymd2uP32PbSuMc6hRe1X
0w1x9BhOV3UQjqs6VnceY398CnW29JVK6I+giVW8UriwbMH4uQ9JFCBbsK3c+egu/90//WOuXbvC
H/79z7D/4D77xxXjqsbV6heyEL+xpV852CtRDTvdxP0u1bm0FIK6uMWYb8Px0QN++dZbHOztsr42
5MrOOqtD4c/+3QO+8a272C2/MvPFzTSMfSPYtcvUOyP+h3/251y6foV/8l/8Hg/u3eT4RDitlMq5
EAXVMGPX3xOh/fE2JNwrYQETFYc4wYliEKrqlA/ee5cbNz+mtIYnrl5ic6vkL1/8hH/+r95md28E
20MwK76T4hY5E8Id3cMLUgJiGmUTlUAUfoRiuOb9+TC93Ubhj9l9EdEGJSDFAFuWrF27wtandrAG
qpOKn/3LfxFyBuyLKK8p3FDljggHqIwUyYasOZ8dCaVRAOdxJqQHBagcqep9oHDObRdF+Zd1Vf1u
dSrb3/1n/yP/6L/9Jzjg6a9tsvvxIc7VHgVoHQa+h1RR+NVvCJcQAQprl57g6O4Nmu2vohLIhHah
eQKLhA1hOjEYHoSu+e+fGvDu+3f5r/7rf85b/+Xv87tfXMcyplKHq/xLqamdUjsX9rt31K72S12r
IE5RV1G5gIDq/7+9Nw+25KrvPD+/czLzLm+tvaQqbUgIbIEAscjYYJoGY7oHd7fbQzuio+2ZXhwz
03Y4ggjHRM/02NHjWTzhwW5PT09Es9oEi7HBQNPYiK0BgZBASGJTSWgr1aLa36u33y3z/OaPc05m
3vvue/VqUamIfifq1c2bN2/e3L7f3/e3nHNyP+dfUDmZGCabGTsmZsgyy/xyzp/+zQKf//oCXWmQ
tjNPNM9DExJkzw7c2UX+59//DM8dn+Ptd1sm0h6dvpCrwziHK5RCFRfIzaknviIU8JvCkeMCfgwq
BeKgEEVUSETIsoTr902RZQ26vYLPfeMEH/6rpzl7tgszTbATIBO1bHC4P1eUBEZn1g4uZ1lrUW2z
zvLX4lgxtV2Pb9m0gU0aZK0W++66lTjuymN//Wm6yw4Ri83ST7s8P6Wol//IKmG8/3g4lwN+uAIK
AEo7HN/0gVVFEpw75YpiJmu1/7K3tvobh7/7FEce/jE33vUS0gbc/Lp9PPXN494VcA5N/aSavqrS
W3x1QREEUkCVtGlozuZ0z5+mHBwCqLICtlIB6/RmfG8YL1G3CH6JD1bkoCYYi95kefLJ0/yr/+Me
fu6uG7jzZXu5646dXLerFSx6IDkThrg2LgTPFHIFHGrBhvmvNdxvp4oxDpyh1xvw+Kkehw73ePTQ
Kt891IHpCRqzUOSbTgd/2c3KBMUew2B5mT/546/yyN0Huemlk7zujlluvr5Fs2koCsWguNyB89OV
KUqSiB/Si4IGUCRhJuXCoZkghSLOYSz0BnD01Bo/Pj7H935wjocfm6fbGcBMhthJYCY8cyMpYRFw
o9fgYkigBvz68mh8SfMAQOMtfhnYDgG/JAz7ldb6+oc6GBtcgCRN2PXSG8kmDdbAwtHnePwLX8Ek
E9gs/Uvn3AkHpxUWMGYFJVZfhfjbZaKfGgFc8kyvUcZWywrSQVUUOePUTVrVR22aPlygd33pj9/L
r73n3aRtYfaAsOOGGeaeXUBdgdEw77v60W09CSi+l1sUG77uMZuYpRj0GKycD8rfVkHB0hqE/4J8
vnAx0FbBX62PBT9gwCVABgf3011d5iv3Ps1XHjzGLXsazLZSJBKUBrnvPHuI+uuv8YFU/PTXxhf0
aDgusRaw5E45u2Y4s+igB419U7g8p8jXW/4rOu5geEastGCmSTHR4+vffg4etNyzL2PvpCWzgeBc
4V03PJH7W+C/79RhMKiJvfoK/OxKgqBgPTEsdx0nlgrytRwmE5htI9IApv310Ly8D9V5ygZxAfEu
Yem7b0QCdbKQmuwfbRbIfQS/0Qpp7Vr33iTUtNTBbyuSsFlCe99OZm/d5UvmDTzwgfdi0kmMtcfE
2gdcnp9AmRNYAfrER4GRU7uMdkUUAOHGhXARoANFuiKsonpe1Z3LWhNf6BbFHd1V17j3Ax/hF377
13AWbnrNNGvne6ydD4An+vzB7w83sl5irwFErZm9uEGPot+jqgsYE2CLBBGP77LAb4fdpRiAFD8l
l9EJcA7XaiItBwN4drGA+fjQ1Y4p7ic6/xLXSWnNJM72O5LvtcbSnPWkUQwGfpcXAfbNAoIb7Wdo
veKDVDcewBphvpdzZs752IwrQowmgFDVA62I4IsR9RohIzUlF34gMZAZ2O0HwxQyVLOwSw/QqhhJ
xpBALVBXnri9CBLIqW5MLe9XxnQTbKONSRtVd/ckZrdqfV5i6i8JHYHSjLTVZN+rbi3r/X/06U+x
fHoZJCHJmn/linxOVRcEVtWP9TcYdtMv3/rDUAzgMvZS9wHCsggDVZYROeecm5R8MJ00Wh8d9Nb+
2eNfeYDb33g3N77qdrQJN71uD09+tY9TsKqQukr+R6Gn1UFWgUKlveN6ludOQN6vXIBS/ofv1EuF
xwbyLhH8VM+OEX/S/tgEIfUgixW09d1sQW1tvE2IkeDIBxuDNX6/vp/RfRpj1n1fRIam/q5/Hpfr
64rCeVwbwbYsIhe2KVslqqHOUK6MipamZpToh0mAC5BAHt9sQgLB+q9zBfy9TlqT2DjGXwR+reJv
OBDYJAkxgTSx7Hn5LWQTgrWwcOw5Hv2bL2GSCZI0/WtV97Q6d0JUz/oRf+khUiHgcpP/tXYFk8Wx
JDGCSZwgHUUXVDntXPGcMfJIkmYPSdLk83/w/zJY8z06p/f60YPSzNcF2DJaWhsvLQZUyu6Uoca6
0WJq14EqJQgQCzWgsqjBXxt33JcC/tFqPaV6+DYq3tlKz7ytbBNdo/rDXu9AZK0dek2SZOxf3Kb+
N7p9mqblsrW2fDXGlJ2VLnRsl3KOcbuw02CIY51BrERcf5/W7TeWLq/bcFzV4Egrh0CLQcFgkESw
zRDxT1skZYS/UUb97ZAr0Cgtf5JZZm7az8yNPnWrCg984H2YZBIx9oyIfEmdO67R9/fz/NXM35Vt
V44AZOjFg8WQA6uInlfVU87lx5JG81MitpfnDb747j8phzu67o4GE7vaZYehyKCjgZPyIicpNg0k
kLVo7zpYu0lQWvzyBtqKvYeO+9LAv+Fl2OCzywX+RqAfBfw4oNfBXQf7RsQwSgj17esEUf+sAqWs
O+ZLPefNtrmoezCWBGQDEoguS1Qfte6+4dmwWQB/tPQx0JdllcUvn9OMJHT9tWlKY3qSPXcexFof
w/vexz/G8ullxBiSNHu/c+6Yqjslqucxskao+Cs9kfry5f5xWYVA45rUAEggS/GuAHoOp+KKwUzS
bH1k0O3882e/d4TvffqLvPKX34YqvOhnd/LYl/J1D07EbRUjSMugo9/MkIowset6VudOBDlnKtek
XhhUDwxuxQpcJfBv1MZJ9Lq1V9VyuQ6W0eWtHstGvz/uNc5rEO+Xc26IqMa5DJuB+UJkMe5abPS9
rbkD0devZQdGu5uXMQsfDzBZC5s1gpyPs/YOxwCGAoHx8yQlazW4/rUvJmn4R/L4w4/w5NcfwNgG
Nk0/obgnFXdSlLMqsogfcCceGeuM1xVoVygIWGvB/a5lBZyEAiFEGs65cza1h9JG495B3/38tz5+
DwdecSd7btlPcxJu/bm9PPHVE1U9ABGzWgb/hlJ/CMjAb9WcoDG9i97imWE/SQ3rUoJDNQCj1iCu
vjzwP1/Aj3/W2rGf1fd9OSSwEfjjcn19JIStksGlEME4Erio9ZuSQEzrRSNWD/h542DSBkmj6SV/
BH8ahvGKw3gnjbK3q62p1CQz7Hn5zbRmE6yB3mrOd/7sQ5ikSZIkh8TId1yhZ0EWPVbox2CH1A71
SrcrTwDB7Fb/C6A9RFZUEcQ1XZ5P2DT7z64YvLTIi733vPs/8Kvv/jekLT+Q6MFX7uHYw2eqeHGM
IodlX4pt0NAPW6OPr9Cc2gnG0Fs4579nwikqVIFBUzH9OiUQT8M8b+C/GODXLXt9edxf3Pe45dHf
vZhjGEcEmy3XyaAoig2JYDPFdNVJQGOZdlCCQ1V+YLIJkiwtLX8ctbccwz+p+vTH/i3Wet8/zQwz
N+1j5qbpsnr5q//3/07hMsTYVZMkf+mK/IgqJxWdFyMrKL1SlT9vEYDLrQTcqJUsSinDBbregkum
6tquyNtps/0x11n7l4tnVrMv/tG/45d+77dJgH0vSeksznLm6XnUZR70sSBIYzQ4HrOp3ShFRWhO
7gQVekvzVQAJWFctCIwtFx7pPHI1wD/O4tcBb63dMvgvVwVsRgAbkcE4gDvnSgBuRgYbXcMLZTjG
XbOtkYAZLhaK/v1Q+W+o+8dX+dlGy8enrAnpvAD+rBaYjqNf2+AipCk2s7R2TrP/VQfKwXG+86GP
sXx2GSQlyRrvc27wrCrPieo5xPiov58AoSxhqRaubHseFEBoItUMuZ4QCjGmo6qLCJlzRRNn2kmj
+dFBr/NPn/3+UR78xBd5zTvfhnFw8JUTdBb7LJ9dIcdhoksQSVGkRlox30wp7ZvTO8HYSglI9O1q
nXPqgcEhl2JrsdHnA/ybAT/63KNxgNF1WyGAjY5nHIAuBPpx66KFr7sE8f1WieBSXIKtkYB4M1zk
IxvVXIGAOps1K/CXfr8J5bxhspvS168F/zL/eWO6zcHX34ZNPO8c/ua3ePq+b2OSJmnW+Kxq8YQq
x1Q5jY/6dwHnx1wgGNLnx/rD80kAoQk1sPp4wJqqLiDScEXRNNZokjZuyge9v33/n3+OHQeu49bX
v5ysAS9+0w5+9PlB6ZLlItAPF6NW7Vfe7tJye7+uObkDFHqL0R0I4B830Wi80HbYHbiYwN7FBgHH
pfEi4C9G+m/FFdjK8Wx2fJuRwOj7cXGACMBIBHUSiHUHG7kFF+sSbJkExub/a5a/MUHSiGnptFbn
bz34Y1f1kBEoS3wzrxCydsaB195GGoJ+C0dP8OBffAqTNrE2+QbCN9S5o6p6CjgfRvh1iFzRar/N
2vNOAFB6AbENvENv9wAAIABJREFUgI6qLoronDrXtDb9KugtuegtX/r3f8bs/v+RXbfsI23A7T+/
lyfuPUNvBbQPpLEDUG84WBNztRCIwE+T1pzaiUkSOufPVpuWfv8Iu9phy3+1wB8BPgr+ccDfahwg
vl6s/B93jJu9jrPkEfijCiCuG1UDo/sad4xXnARK2a+EbomheVKwjSZJs+3Lea2t5fV9Os9YG6L7
yVBtis08SSSZ4cDrbqM5m2AS6K7kfPmP3o1qhrH2WZOmn9fCnVJlTmFRjHRQ8kqJ1o79+RMA9TTg
FawJGm11ma0goh1Vtap61t+kQdMm6UcK9LcG+WDHp/+3P+HX/78/IGvBxE649Wf38sTXTtUuidTi
M1r59rGcVEIJZ/CbGu1pxGRVD0LqSiAGApPa+43z01cS/HVQbwb+UdCPvq/vaysq4EoQwGbWfzPg
j6oB8AQYFcFmauBKkQD1dcZAEVWAv/dJawrbqAbpNKHaryrxrUbzqeIBGTYNo/pmhv133cLkngZi
Ie8WfPWP/k8f9BPTSdLmX7iif1hVTyqcFp/yK4N+/rEtHf/ntV0VBTCcGgSU6AqcFxHnnEspBmma
ZB/qO/ebnbUi/cS/+n3e+X/9HmnTVwre/No9PPvg2XJ/QC3QWCcA32GmvhnGkImF3dextnAO8qKW
FQiBxDpANjqNywT/OF+/DvzNwH8xbkDc/0YxgK0QwEby/2LiAHVLP7ocAV5XBFENPD8kUPmK67aL
vr8IaWsC6yU6JjHEgWqttWW/flvLBMTlmPJLAvh33DiFCUG/b33oT1maWwOErDXxH4pi8JjCMVU9
IyLzoGv4Wbdr0v/5Bz9cLQIAoNZhSARUcxFZUdVCEOOcM0ZykzZa7+/31v6H+TNrfPHfvY9f+p9+
A4Bdt1iUPTz7nTN+d1H9l+CPy2GM9Kg4xCBBEWStSWzaZOXsSTTvUw4kEqVgWPbcEJ+WcOxXEPx1
yR+BvxnoL6QALpYANjv20WMdXd5M/m+kBMYRQSSBeCz1/gf1zzcigdFjq3+2bn39HKoNq15+ImAS
0mbbD3Vm4yQ2Nlj/FJP6YextHL6+9PltsPwZSUOYvWkvMwH8xsD97/9Tjv3wScRYslbrY06LH6t6
v1+E8yirII6ylP4qOP61dvUIoKa2tVrRF8SpqIgizjkRU9Botj/U6679N4cffpIv/ts/5W3v+qck
wO5bLMpejnz3bLVfAxW1xyGrgTBgZRkYFEGMRcQyte8ga/OnyTurw7GAmioowwW10MLQ6VwG+Ovl
uxuBfSuuwOj6+PsbEcHo8V3oWOvvt6ICthoArL/G/dSPO66v72Pc8W6kBkatvoj4QUmqs6qMhzrE
pt7yWzM8iW3q037VumHJH+MB1kbw72H/q/b7dJ/AI3/1WQ4/8hhiLWnW/JwqD7qiOKaqpz34ZUWl
8vurWrWrY/3hqioAiPD3mQEi7nKBNRVZRGmIc02M/W7Wmmj2u6u/+vj9h4A/4xfe9d9igT03W7pL
s5z+8YLf5cBLfxEL0vdAj4nTMDaARAsuBVHuT+zcT3dtid7i+Qr4UqspqFv+oXUwrhOKX78xoOpA
HWf5t0IGW1UAW1UBo+83An9c3ioJjJP7owHACPK47JwrU5r1375QXGDDNtYVqAf7ABSb1YN9aRjF
OXbmSfxfmNzT1iezSTPfHyLJSLII/n2+xt/AM998gENf+TomaZAk2X0i5hFX5GdUy9F91hDKsf3k
Klv+2K4yAYw0I0F6Sx9lEfGdPSlyMUmjmzbaOwb9ztsef+AxWh/7Im/4x28D4OCdTfKBH0ikdAFK
NwCqQF6tn7mxIHkNJIbm1E5s2mRt7rT/rlbAj6RQn3TNc0TFXPW27sHUqtNqBG2908xGvv9WFcBm
JBB/czMi2ErbShBwM+k/av3rJBCPJRLC6Pr4/kJxgWEVoOXLOKtfOaH++UgbE6SNJtgklO/6iL8x
1kv+pL6+UgZJkpT9/T34d7P/lcPgf+Cjnwjgb9wvhi84lx936o6J6FlVCeP617v4mheEAq4uAdRM
f+UK+B5YIvQdsiSqoqLiin7fJI1Ppc22GXTX3vrQp+9hZtc0L//FnyEBbnl1i/ZMwrHvzwfwB6AP
ggKIdfyl9M+DCsCvtxbyHGlNkOy/gZW5M7hBl/pYAlIOLuLfVWoANlMEGwX76lZ/FPTjSGCj96Nq
IP7OVsggvt9Ku1T5Pw7wG/n9o/7/6PWrtyESKE8mKvkR9cLGVh9jabSnQnFPmI8igt4mGKn5/uVs
VT4VaGsj/dgI/mj5BZ6579s88LFP+h6CJnlKDPe4onhalRPio/7ngbVh8G/pdjwv7QVSACOuQFAC
IvRVWUJVEM1d0UtN0vhPWXMi7ff0Tf/5A58gSSw/9ZbXgsC+21JsuodnH/SBQRn4PltQBQMl1ATU
lYIYixQFfs4+D7DpvdfTXTpPd9m7BH4knpgqZJ0aCKsCKYwJMlED/wjwx4F/I+t/MbGAS3UDxrUL
Wf/68kbA38jvH/X/h67pGEKoX9Xye7WPJH5vHXHo8IZAkjVJWhOVVY8WPrF+UtqoAuq5/+gOhFeb
pCQZXva/cm8Z8Dv8zW/zwMc+gUkbiLHHrbUfcUXxlCqHVfUcwhyKH9iTOu5fOAZ4YV0AKJWAGh+J
FyO9QAKKkLqin5mk8bmsOWn7vbU3fOm9H2dldcBr/97PQgK7bzYge3n2u+fIRUgQnFiKPFh744OA
IlLGAsQUiBmEZYMrfKagNbMT22jRWTiHKwZ4q19TA3UXgc3jtUMAH2P9twL8S6kJ2Cr4NyOBcVmA
zUAP64t/NlIA41yA+jVbD/54INXiOsVQ+359XMX6OsGQtiZIGk2MtYixIdCXlGQg1lY+vjUlQdiy
w493C5IG7Hnp9ey6fbYM+B3+5re5/2OfxCQl+N/viuIJVY4oelJElkBXgMEQ4C/CJXs+2tUlgCHE
jOQDwIPVK4HQcYgUNHV5LzFJ87NJ2uzm8Nb7P/oplk6e4C3//X8NwO6bDLCbY9+fpy/iy4UlBgcr
vx+RqiNIyA5I4T934bOGMaRZRmfpPL3VJVQJMruWKQhmZ6NgoD8Vs6H134wANiKBjeIC9fcw3hWI
6+uvo8vlLdokC7AZCdT9/o3Sfhv5/PFYNgS//9Ghx2dDlTAi91XBphlpazL49B7UngCSUt6bJEFM
UrP2Ifg31NvPYDPhulcdZMcNk0hp+b/D/X/uZb+IOZokyQddkXvwq54QkTkUP51XGfTjBQc/1EcF
zjaYPutqNS0p25MA0lXVBXAGMbiil1ubLGGaeS7y9kP3PkTRWeNt7/p1wCuB9sxunvjGHD0B6fuH
LB+YEuwYi5gcKQYlcJyx+OmpvApQYxBjaO/YTdJs012cL9UAouXtE2rSv34fFW9hNpD4FwL/Zqpg
MxK4WDdgdLm6DRe2/jDsj19M2m8joG/k95cXVasgWYwBbJwC9BOriDU0ysKeaPVtCfJo8aXuCljv
Clgbcvwx758ZslbCvpddx+wNExjrK8cPffl+HvrUpwP47REr9t+7ojihKkeUAH5YBdwQ+K+R9oK7
ALHFhya8CUpA+qq6jLoUJHXOFUna+KyIcYN+5+8+/t3H4f/5MG/5zV/DWmjvgNt/fhfPPrTIyrkO
DCyJGIpBlP4GKYFjUBPVAeXn6oqSEBoThkazTWdpnt7qsn+wCPPY1zMBtedwXJ7fmEsjg43iABcT
D4jXdjPpH9dtZv3j6ziLP04BjEb8R/dVP64LWv/gy8dvuqJgvc9fVwBC2miQNCdISqAHq5/UQG9s
TfZXfr6YmO9PMCbBZpC1Um54/c20ZmwJ/vs+8GGeefhRpEz1yRddkZ9QOKXonIgsoepn8a3Fvcpn
/Bpo1wwBwFgSCNWCKLgBymox6Pdtkn5Gs4Yb5P13PP7gY8z/7r/ll/+Xd5G2oD0Lt79xhmcesCyd
XiGXzD8shSHPQ22m+ECgK4IbEBWAKdAipwwOOoMzBe3Z3WTtSdYW58l7nWD4Kxemng2IgB+y6rI1
8F8qCWzFHYjv69d6s3ahGoCtRP7j8kbWf3OrX24Favy0C+pTeDHzoSiuGCYOYxOy9gRJmvlgr/Ug
LgN9YpEo+0vrPxwQFBvAnyQkqdLa0ebga28ka1ezkN33gY/wzPcfQ5IUmzS+IcZ80eX506r6rKrO
icg5NIznP2r5rxHwwzVGADAEq0gChQgrqprjXBdDXuQUNsk+I43kVL/X+Rdnnpvjk7/7h/zd3/lN
Zq+bQAy8+I2THP9hyumnFsl7QG5ITE4x8LPXutL6G1wkgSK6AHlQA95l0PB+Km0w6K2FIGF9QIkI
vgA4qmUigMPnl+ISjJLAxboC/lJeXCbgUqL/46T/aNqvurUXsvoQwe9Ey8I9I6Ycyrb6TYcYQ9ps
kzbbiLGl5Jca+I1NAinYYclf+v4Wm6QVKWTKjht3s/eO3aSZB3/eVe75wz9kYW4ZMSnWpl+xxn7B
FfmzqnpMlZMisgysIGPAf005ANcgASBSDSQS3oM6EekomqNOFZzmqLGGNG1086L3W3Pnlvn4v/4D
3vl7v82um/cCcMOdDVozuzn2g/P0OwOk7y27FkIhNlh9gxhBC1ORgViMyXFBDTjj1YGxBcZasmab
3soSncXzuDCKjDGCEb8va61fJgQQSxLYujsgsnH34K26Av7yXTgYOK5dbO5/q37/1iV/nAanIteo
BPwWQQkIfnCNRtsX5wSA2wDsuuyPYBdbKQBjUiT6/WXKT7CZsO+O69l1y2QMH3H+6Gnu/eCHWF5Y
RSQhTbP3I/L9oiiOqLoT+M49C6A9hH695oVYon6NtWuPAKAkAYgunYCiISawBE4RAvjMWpq0FgZ5
93cGzjU/+q/fzVv/+T/ijre8Bic+Q9Ce3cUzDyywttxD+gY1gphBiA14ElAzKGMEagrURXIokCKu
K7ybkOc0p2ZJWxN0lxcYdFYxIZZg/BQ2NasdwFl3By5RDVyIBEZdAX/pLp4ALlQDsJkLMA70G6mA
4Vse4ym+3kLxtRgG/OxQMgJ+NSTtJibL8P05DGJNIIAUGwJ+YiySWIypp/mSMg1ord9eYuQ/hbSV
cvDVNzCxO8EY7+8f/d4h7vvwnzNwBmNMz5rsfQr3a1GcUXWnQOdEWEJ1zR/+qOzf2qN/tdu1SQBQ
ywbUSABFRAYqsqbqFlGThb5Erawx8ceDQfefOGNu/PIHP8mpZ47xlt/4ZRCYmIWXvnmWI4+scf65
FYpBBgM/S5DJDa6wwfJ7i68m94pgyB0o0KIILoHxXYqNYWLHHpjdSX9tmaLbKUFeTmCBlOTAkEsQ
iEAuTARXMhg47rXeNsoCbEQCm9X6j1r7zXz+Is/L1JgYg62ti2Tm03pC1mxjsgblgLAEOysmgD4A
O/FlvTHlV1n+tHIFgtUXa7ApTOyd4sCr95eS3wh87zNf4Ptf/hqSZhhjFtKk8R7n3CF1xQlF54B5
QVZAuxH8Q1dWYvr42mvXLgEA9chppQQUga6KiPonqutwSjHIs7T1wdz1/04u3P3ofQ9x8sdP8Q9/
73doTQk04da725w70uT4Dxfod3yqUI3BFANcbigCyJyzPkZQGP/wmAJ1OS6qASlACowLE5KiZM0W
4nIG3Q55d62sTistfc3yRyIYig9cgAg2IoGtqAHYWipwHPjj8lak/zgSqP/OOuuv4KdJ9dZeqGaq
0ZHOQQgkWQPJGv43w9aK4qhNoBoAH12AWOFXpgAjOQTLb2K//1TY85I97L592s+9YSHvOL723g9y
6vBRP9KvSZ5IbPZhVwyeVtWjqnpKYVnQJS/7fbDiWgz2bdSubQIQWNd3ID7E0HEiimoODlHywvX7
SZJ1xNgjg0H3H83Pr/Chd/0uf+e3/wU3veJm1Ph6gandO3nmwSVW57q43OIGBswAyQ1q/Og03hUw
SFHgSpcgKoQCjJ/9FvEDlvpHMCVrNhF2MOh2cL0uLgw8WQK4JAJTxgdKMij/LkwEmwF/o0zARsCP
IK63i5H/44J+ddlffuY0VlCUBZVR5td+GMQTM/jP09DfXoMhjS6Cn47NX3kXCMCTaiX/TRKtvU/7
2agAktSTTgbt2RbXveI62rPGu3EW5o+e5avveR+ra30fUzDp143I5wuXH0b1iKqeVjgvqh2UfrTy
EozUtWz16+3aJgCg7LyjDJOA/9dVkVwFh+oA5/pFMeiAmc+aE0cH/bXfGjhp/sc/ei+vfPPdvOmf
/X2/uyl46d+a5uTjbU7+eAGxEmIDOa4waO4tvS8SGiDOlwtr6FSkhScAg0NEQRVTezQFJc0yhGk0
HzDodtAwg2+VGhwGu7W2RgZsSARbUQIXcgMuFACEi5P/mwX9nHMInmCM8dBXhq2937lXA/H40oaf
TYckQTUCfwT8/op6EpBIBOHa1Kx/GRg0PtIvJkUSwWTCzhftYs9tM362HvGVfT/4/Nd5+K+/gGQN
jDFrxmQfNaI/coU7quqOo3pGhfOiugYUlXvKUHnIT0K79gkgtniRGU4TimqOsqRCDjpQ57oi7rw6
t5am7d8vXP9XCiOv/v43HuL4E8/wi//dr7Hr5t0Y4PqfSpi9fjdHHllmZb6LDgyS+9RfkRukGHgV
4ILvXxQ4sThTkGqBiEPUP3Z18AsaOgopkmU02hOgSjHo4fp9XJ7XQB1iBFS9BqVGBOBf6mSwGQls
xRWov27UthL9Hxf5hwr00dobIyRYCueGgR/BIooKJGlIwaV+roY4Sv/GBBBdgaAETJwsZjj4Z2ty
X6yX++lUg+vv3M/kbouID/R1lx1ffc97OHPiNNJsYLBPJ0n6MXX6hHPurKqeBJ1TYUGgUxb4RNkf
//sJsPyxSbzJjdf+mxf2SDZrpV6kkleCr9+nXGdVaAFTIjItxuwTY24wNrtB0Z/r99fegTqMCHf/
V3+b1/7yG3GFn3VaCzhzuODE40sMOgN04HBFjuY56gqKIseFIKBzA7RwiDqMuBCTUKCouQKhr0AI
YkYsiwTbp46i38cNBl49DFn5UEFo11t/G1yGxCYVCdgLqwEYHwPYiAS2Kv/jQB6qSpEXQ6rAuYKi
9nnc1jmHK+Ky/46Eohuf2RkBvQYfP1YCSlwOV1q8otAw0ItfZ0CSEAsISsAk3uqnwq6X7GbvrWHM
viD5n/zWIb79yb+gwHoFZ5tfEmPudUVxRF1xTFXnFT0nynKI9BdVaaKPRpSyP7pTo8v1csZroPUe
+l9/ghRAbNE61q+kf5ALgVUVKVS1g7o+jq6jt2okW2m0pp8Z9Fbf6bS47luf+wpPPfwj3v4vf53Z
/ROowN5bLTP7d3D80Q4Lz61C7pO/6goktxRFKAhyFklyRCP4R1WAq9ulYL2rSdIiIWTNhreP6tBB
TpEX4IoQNPTy31pbKoOhVKKpaguo2dq47biU4FYJYBzoq8tc+fIx1m3E4NRhrbfwVoTCFQjetxcR
irwo06MISGJIE4NYW4E+1H441Rr4a5ZfCVfWd8xyYebnighCRkCsJwQxGOOJRRKBVJjcPcl1d+6h
MRHkvkB31fH1D36Ik4cPg0kwxsxnSeMz6vRHRZEfRd1zKnpGlWWBoYE8rvUc/1baT54CgNKkaj14
JUJtUDWroi3BTCOyy3g1cL2x2e7CFW/uD9begSgGw2vecjev/9W3oc6PDq0Olubg+KPLrM53YaBo
XuDygbdYzoNfUFCHUJTvTU2YakkC8VENLgFSvpYzPYuUKkFz51OOeTVkdvlnx7kB3mWwF8gErAO/
2ViqblUBFLUUoHPFOmuv6kt1VdXX8Bifq6+AHr6rPrevGoFekUAp74lEUPn71Z8BjF8fCcAY79Cn
hsZkxv6f3sPU/tRfb+PHg3n8aw/z4Gf/E3kYOcpKcl9izd+o07PqiuNR8qMsovQQ7flIZDgyDdrf
SRmR+ElTAD/xBACAql821fvweRNlQozMipg9KmanSZIDxiQv7g/W/olz+XU4x8yOWd7y6/+QG152
Q+kWOAdzx5Tjjy4y6AxgUKCFg6JAKELgrwgkUKmAUQ/VW8GaAgiHaOM4A0JFBtFiSy2aXAQfG9BC
h8hglARGwW9NGOFYYi3C5p2CYrsQAdSBvw78hQvR/fJEKylffmf4PUAREB9B7hhVAOuvbLlsBMWr
JRVDIYbCgG2m7Lxllj23TWBMZfUXz6xy30c+wukTp6OSOm9t9nFxHFJXPIe6OVU9o+h5gWWUDnFg
+wBqie4oEvr5bRPA89e2QAA+dVR7qKvRfROEtiBTiEyKmH1Yc52x2QHnijcPBmvvQAQGA37qtS/n
Df/4V2hNCc55Ehj04czhAWefWSHv5Jg8gj33D4ILKsDbNe8LBkUQgR/LVSIBVJY/iFjBxwZMJIOg
CMpMQQ28TqGaKBkPCSlJYDMVYGoEoPhMw7gWnwmn4y3/UCAwRsCMt+LEwOBovKD2Ss3iV+sDuGvy
v4wHENQeMBr1j/6/YnAi9IHCwK6bd7DnxVMkabD4AoOu8v17vsIPv3YvNDJKq2+Sv3GuOO6cew51
Z0V0UZVFUdYQ7Zf5xxDcLeNQEdzbBPA8twsRQFwXhhbT+J14k0QShSbQxJidIrLbGHOdMekNYswN
g6L3D/Ki/yJQUoRXvvlnuPtX3ooxlVtQJwLXK0hdzP/7DUwZs3YjcQBXBgONCYFBA0brwcHK6hsU
3xtRK8CKYMNrBWSfGSiJIVojDUpCPZiM8bEBp+N9fxOAFdfELrYmzpoVZa7E66q151/Xgb206mOA
719Dt2G08v0j2EVRByqB4zRa/uov9LyI0RXAkAt0CmUgsOPgNLtvmyFr+XOIf49//WG+89nPkYsF
UazJTibGfkJVj6srnlOnJ1XdaUXPG2QNn+LzudvAQuWVKkG9TQBXp10MAUBwCaj0tuCvvZCoVwMz
ImanGLNPxOzG2gPAXXnR+3vOFW2cY3Kyxc+84xe4482v8CRQQKFQ9OH0s54ItOdoipJIkP/O1R7V
IhBAlawy4oZOpa4ESquv1AA+bLnHr6upg0AUQ+vxgFeRMii3mfUHTwJe4dZcACrAV3/OW3I3jgRk
PQHUQU90A/z9qkt+VwJ/WPq7eEXFW/6+g7Xc0VPYcXCKPS8OwBdv9Y3AqceP8c1PfpalpfPglVJu
JfmsEfMd54oTqm5eVU+DnlNlSVRXRchRLcoitChDwnO0TQBXu10sAQBEORo/C+uciAUyEZlEZFZE
pkVkH8ZcZ4y93jl9Q15036Yo5AW79l/Pm975dg6+7GAZG1CFvAenD+eeCPKcthFaYaAQgyJaUD62
UepDLSYQpX84PBFsOMxRF2Ac8OvbjCMEExUD1TYwXgWMNq094EPAj+uGQM0wAaA4t14NFBHopcXX
Eh/VspSyn+AOuCj1tbL8q7ljpe/IrbDj4BS7bpoii5H9APwTjx/jkXu+zKnjx4n5vsRk91pjvuBc
cVKdO63qzgLLqiyALovSBS0kWnmtAztaEbYJ4Kq3SyGA6HRrbTup3UeRBNEJUWkhMitGdorIXrD7
jLH7C+3//bwoXoUoFAXX33iAn/mlX+Tgyw74h9R5SzXow+JJx8knV+ivDphMYSIRUokPRcgCqCLG
BQuv1SFKSBMGsMauAuuBPxzMQ0YDh+N8fv8rVZZBAhdK+DeskCD48YRrFADtsaDVuhLUw8vx8/Wy
vy71q3UE616SQok7KQOB3uf36muxX7DQK7DNhF03zzBzoEmSev9egtU/+ePjPPy5ezh96lSY6l1I
TPIjMfbT4vSYc+6UqjuDunlFF0G6otpFGHgfJLhuUY6Il45DAN4mgKvcLpkA4pPt1+u672DUBwmb
IUg4IyI7EfaAmRUxNxcUv+Rc/iqgJIJXve0t3HrXjaUaiK/Lc3Dm2Q4LJzu0LExlwlRmENVQC+Bq
h+ZKF8AE6V+egsgIKUiQtDIUJCxHHhqV/EYw1MmAkjTql7BGAf76lAtaBt9Ki8+oCzAe7MMg1yF5
v54I/DrAxwbidmJKd2ChW7DcLVjsOSZ3t9h50xTTe5MhmS8GTj5+nIfu+TJnjh2D1BcVJdI4bI35
lDp90st9PY+6c4ougK6JShfw1VghfmIiYIPPWIGe2vI2AVzddlkEQIxYgdSqB8M+fLxABKEBNAWZ
RJhWmBLMbhGzR8TcUsgwEbTbbX72HW/l9je8HCPx4fZ/3VVYPF1w5vAqeSdnMhV2tSytzOeLfQDQ
1eIACjHox0YqIL5qBXrWuwjU35saAah/X1p+iVOyDF8yh9/W+Q5WQQFUgB8Fuf9cKtC7Uas/DPh6
xD9eMycK6kHvgNWe49xan4WuQ7KE2YOT7Li+Vcr8eKvFwI/v/T6Pfedh5s6c8FIfEJOcSE36OVQP
qStOqrpT6vSsii6juoLKmqD98qxrIDWq1fMyBPr68jYBXN12JQgA8DXn3p8sCaD8XEWRFKGBaNu7
BmYGkZ0iskck2SvCdQPN364uv8u7BooVw11/6/Xc8cbXMbW7WboH5cO8AGeP9Fg81cHkjummYfeE
ZSI1ZYWgL0piKCYQPxtPAkHem/EBwrrLUA8EDln9mvqvt9L+hQc2yv8IXsZa/wrsTocDfTEgGNej
leWv5/uXewWnl/vMrxUUYpje32Jqb5uZvXbI0hug34FD936bQ/d/m05vldgL0Er6PWPtt4yaE6r5
GXXO/+HmVXUhyP01lEEp7cPJhkegmhV6mwCuoXbFCCB+x7sFOrK/IAlEhQQ0RaUl4l0DxOwUYQbs
XjHmxoLibufytxLTf50Bt776ldxx96u46eUH/doQJ4hzVZw/DQunuiye7qK5Y2fLsqttmW0ZUltV
Bnr5P14JlEphhAxGA4NDQUL1LgRSneqwK+CbBm9p6Nkvn/lhEog+/3jpL+ssPoEQI/gHuXJudcDZ
lQHnOwUDhJl9bab3NZnam3giNMMW//Thczz2zft56qFHYKLpd2YMhuS7ic2+rKoncPm8qltCdU6d
LihuEfBxNM25AAAKPElEQVQBPtEcxVUz0/qXKr3HNgFck+2KE0Dch1IGCeu/URZ9SYKQoQQioK2Y
nWJkl0iy15hkT6H91xQufzO4WQCKgon2JLe/+hXc+abXMb2nuS5W4IC1RZg73mP1fJ+1hZyJBuyd
SNg5Ydk1kYwQQHAbbJXKq2IFw+5BVRugNXKoLkd8NbXLUm9ae8bXvUbJrl4vaRH9+8rqV6+eCCqS
gNPLA84tD5hbzZlfG5C1Umb2tZncmTG11/vtcYgEA2Bg9ewaz/7gMX5w7310umuQhBmcjV0wYr+Z
2Oxb6txZXDHv1M3j3KKqriG6grImVT6/mlNM4yMQVEANpNsEcC22540Aat9F0ZIAwvrKMCSIZIg2
VKWNmGkR2SnG7BAxu0RkGrg518EvqivuKL/fzdm5Zzc/dfdd3PbqO5ja3fQR7SAaokrodmBl3rEy
12d5rk+vkzPdFHZNJMy2LPumEiYbtjzFCvS1eMDQ+nB6NesZPIYhIqhfUmqnPAp6V18eJYLwGguI
IgksdQrmV7ykP7M84MzKgEY7ZXJHg8mdGZM7M7Jmqd6rP2DQUZ793iEe+94hzj79FLSqPmsi9hkr
yZfE2MfVFWf90HA6h9NFFbeiqquo9A3aRxn4KywVAAFx1T0fBek2AVyL7WoQgFf/qGjNHQgvITCk
glEkQ7QJMgEyISLTCJOCmRVjdxljdudavEZd/nOKu87vQ2FtwOzefdzxuldw210vY3JPswQQUR3g
wdRbg86ysjzXp7OcszLXx6myb9qyo22Zahh2TaRMtwxTTVvmvkfBb4IljevsqNAZIYDRZzu+d+Gv
CBvVSaAzgDNLA86tDFjqFsytDJhfLRgUSms6Y3I2ozmTMjmbkrZrx1W7DUZgZa7D0UPPcPixH3Py
iSegnVICxtgTgnkotY371RXzzrnzqm5O1J1X1VUVXUK1A/RQ+qI4EdV11p1wb12N4bcJYJsA1plE
8YGr6rfjNopTEYQUIRNME9EW0AQzjZhZMbLDiN0lYqZEzP6BDu5Ul79MtbiuJJOBY2p2NzfffjM3
3fESbn75AZRQdoy3WWUpbFjXWYa1pYLemmNloU9/raDfyXFO2T1lyaywZyqlmQiN1LBvJi2Ljm7e
ZUsyqCuCC7kAz5wrAikJC2s5C2sF3Vw5veQD6M+d95WyWSsha1kmdmZkTUt7KqU5FX7DVK/lbQnB
vJM/PsnRx5/m6JNPsXj6tAd9BAymI2IeSEz6A0GOOHWLqFtBdUG9zF9CdBmlp7CGak9ECx+x9NmW
eCISrmV5L8uhCbcJYJsAhpbrLkCwHlE9xt/EE4H/WBKERJAU0RYqbRWZEu8iTIiYWTF2RsTuEJF9
A9f7aefyO8Fd739YfYVLt2Dfi27iwItu4uCLb+HAT++HGhmUoAwPbrTEKKwtQz5Quss5ea70O45+
J0eB/ppj0M1rbq/WHuwLXPAAXGMNzSmfd0+bhqyZYFOhNZVgUkNrcswlrBGMibsTOPXMPM89cZgT
zx7l1NEjYIrg04djEnsCkcespD8yIkc80N0i6hZUdVlUOyq6iuqaKl2gi584ZjCas4+jMkX1VncB
tgnAt20CuBABxJfKBRiJE0hQCwhliTENhBYqTcRMEAgBMdOCTIqxMxizo3D9VziXvwjcy4jSVIPO
7uTsuuUm9ly3j/3X7WPHgf3sf9EOgHUR9XIdVKQBJdaheuZUYfW8bvoMTuxYLwsiiOP1GBrLr345
qCz++dNrzB09xdlTpzl99Bjnnj0CLev9EAJYERDzlCH5oRH7OMopJT+vyhrOhfJcXVXVVdA1RQag
PZSBqBYIrjq5eNL+xYwJ8G0TwHD7yRwR6IVowamW0BNu5EPEl6vnKLlCF2QVIRFxDVQaDm2DmwRp
ihZTOJkRMc9Y25gSoa3IAUd+m7rixRh3G6lhbv4kc3OnePxRhb5C37HzlhuZmpxm565Z9hzYT9Zu
cMNL95fuArYiiLhqdCTu2T0VwLf6LJr1nFCuO3X4PL21LqeeOcrK0iJLy0uce+oINAw0aqwxnYWf
NE+JmCcM9gmwp0XdiuKWnOZe1uOWUbqquiqiHZCeCjGgV0g50eaYsxAYrm3cbhdq2wRwUS1W2+GD
hTr8mZe/6vAPbF+RLkKC6DLoeVRS52iJyISKayMygUpLME+LkYeMabTFmAmEHbnmt+KK60F/mobb
RdMyf+4k83MnOXIEeAToRSmQsudF+6Gv7Ni/l/ZEC3rKnhfdQJZW9jqbnmLHvhZpnAl+hAEGBZw/
s0Z3aSWeEUXhOPXkMWgIhSonnzyKaQlnD58Cyb071Ayg0+AezaZhj+YcyCHEPmcwxwVOquqqqFtV
ilVV1wVdRd2qKqt40PdABviu/QNF8yi82ADcssln223ztk0Al9ikdHZHVUGQuAIi4kD7CrkifU8G
dBFdRWko2sJnFdogTdAJVdMSpGXUPCkmaYtIW8S0EZlx5AcL3PWo24nme2myyx+I4+zZE6BwduGU
ByHAo9/2h9MjBA7YGk6CmvAWvE50wZdeUZgCtJyr6xxiFxA5LyTPGOSsYE6puo76wF0XtOtwXS/l
dQ3Vjqr2BP8ZIj2gq8TUHYWUYXvWkZXHfM2V2G6X1LYJ4LJbKLEV72+ul9VCkK0O1YFCR30HJIuQ
gjOIzcA1nJKBZqJkiGSKNEFaotJUlaaIJAbbRJIGptEWtIXQKNAbENqgszg36ytc3CwUs2AsTTUI
u9ajaAQ4Q0wmcygOpEDoIPY0imDMgiALqK4ZkiOo9lS1A8UaKj1V1yvUDZC86yfN0K6i3SDh+z5a
T1/RHj4EmqP0a6BnM0Cv/3wb/JfTtgngSrYQJ9iQDCSSBTmQq9BDRRQNs1tiEbWKJCLOqkoKkqkf
vyBxSopI6mMJ0nRCE6cpYn8oqgaxIsYaEBERq4SAJNJGaAKZoglgRkJ5EEIGguuDDFDWgA7QQdVb
ZT/8kao6VdWi0EEf0QFolzhDDq7v4yE6UHQgQcqDFkBOGFcF/1eN9LWRvB/6aBvsV7ptE8AVb1WW
oRx0Y6PgoX9RRPJyyC0gRBgMgkHUglgVDKhF1KIkKpKhpPh7aBQMaBh9TEQQq5ABTe9e0AQSFAvY
ENqPiIo/XajTPPjfXfwAGT2BgY82aG2WT2+xUc09QdAHcj8SinrlgBSqYTtEkVhdsTUgb/v2z3/b
JoCr0gIZKGychIuEIABxSKFChUGNPQQwiHhyAAtqEOdzoOK8U6ziCcTf3xQkw5NB/J6s1/8h2RV+
Fw9oH4gTLXDEEUBDlQ2RBOJfUS0HmF+M5Zb6Vtugv1ptmwCuZgu2eaSGYOONK5Xg6xDqAPVQl/LD
4XSYhK96twIsQpD+9R2vawoSLX1OHdQV6KtNiaRQP2bdZPfrz3A7kPfCtm0CeEFbLYAYDD+12pX1
W8d8WFmk5LeMM9XEfQRyqdYRMVl9eWO8ae1vzBFc+JzGrarmbBm3j23wv1CtrATcbtttu/2X19aF
grfbdttu/+W0/x+yPGSbvr74ygAAAABJRU5ErkJggg==
</content>
  </attachment>
  <attachment>
    <filename>play.png</filename>
    <filesize>23368</filesize>
    <author>XWiki.Admin</author>
    <date>1381994503000</date>
    <version>1.1</version>
    <comment/>
    <content>iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAABmJLR0QA/wD/AP+gvaeTAAAACXBI
WXMAAABIAAAASABGyWs+AAAACXZwQWcAAAEAAAABAACyZ9yKAABaBklEQVR42u2deZwlV1n3v6fu
2t2zZSZ7SAJkWhZBVBZlMyAg8CovhqgzwyogqyIqi4iA+AKCgi/yIq4sksyEXVBA9p2wJCQkgUBC
Zt+6e3q5+1rLef+oOlXnVNW9fXsmyZ3bU7/51HTd2utUPc/ze5ZzCjJkyJAhQ4YMGTJkyJAhQ4YM
GTJkyJAhQ4YMGTJkyJAhQ4YMGTJkyJAhQ4YMGTJkyJAhQ4YMGTJkyJAhQ4YMGTJkyJAhQ4YMGTJk
yJAhQ4YMGTJkyJAhQ4YM44AY9wXc1ZBSiuA+rZT7lfokhJDjvt4MGe5OrFsFEAh+DigBM8A0UNDu
2QP6QAfoBvM2mSLIcAZh3SkATfDLwFmuJy/6/k8WHjW31H54rdXbbjtyqtt3Cq2uU2h3nbrteLfb
rnvzpunSN974vIf8AF8huJkSyHAmYF0pACmlhS/4m7/+w2MP+uHPFl+2Yar4mIvP3zB9zuYyAkGr
59Bo96k2+qzUeyxWuyzV2izVurS6zlc2TBX++sNvfMJ3hRDOuO8nQ4a7GutGAQTCP/3xr+194A23
LfzldLn4xEvP35i/9MJNXLRths0bikgJ9VaflUaPpVqH5VqP5VqXpVqXpWqHhUqbhWqHVsf9hBC8
5OYP/N7iuO8rQ4a7Eta4L+DOgLL8f/HP1z7xc9898JlSIf+bF5w9nd+2ucx0MUc+J8hZgmLBolzM
USpYFAvqrxX+LeYtckLgeu6VnZ5z0+yuax437nvLkOGuxMQrgMDnL1zxF59+4e1HKh/aMF3YWi7n
sYTA8ySuJ7FdD9eTCCHI533hLxYsCrlgyvuTEALX8/BckFJeCPKLs7uueevsrmsK477PDBnuCky8
AgCsK1/76UfUmr13lIu5gmUJPM/DcT36jkfPdrEdXwEA5AOhL+ZyoeDncxY5SyClh+tKpPRASpBY
IF8DfHt21zWXjftGM2S4szHRCkBKKV7x/74xc3i+8W85QU56EsfxsMPJNealJ8lZAQvICwoa9ZdA
3/ZwXBcZxv9lUCEgHwbyh7O7rnnmuO85Q4Y7ExOtAADx1RsOP9/13O2OJwOBd7Fth34g/H3HpW+7
OAELsASB5Q8YQM4ilxMgZcAWAgaA0gJBnZBkI8irZ3ftuWp21zUbx33jGTLcGZhYBRD4/pbneY90
XYltu6HF7zseth0wANv/3Xc8PE+CEBRyfkCwWMiRz1tYQtB3XLp9B8d18SQBC9BLARQb4FkBG3jo
uNsgQ4ZTxcQqAHX9UvKrIEOfX7EAZflt2w3ZgO36vn3OUnEA/6+Ukm7PodtzfCURSLr06T8pbOAy
kNfO7trz57O7rlk3qdQMZx4mXQFIz/Mu8iQ4rodtu/T6geA7jub/+1O10eb2I4tU2l2K5RzlKYuN
Gy3OOatAp9unb/txgigIIAl1QJINFJC8LcgUXDDuhsiQ4WQw0dZLSpm77473OUIICoUcm6aLbN1c
5pwt0+F09pZptm0us2GDxSMecAk5K/2Wu7bLt285zLs+/EPuONIMWkffVviNFf0XNaFgCXjuHR96
xmfG3SYZMqwFk64AxOzv/LsHglxOUC7m2byhxLYtU5x31jTnbd3IedumefiDzueB9zo3tOENW1Lv
Q86CgoBiDjbkBcKPBfLFH+znle+6FscJ9ggVgdB+xpSA/+fdIF51x4ee3ht322TIMAomWgEA3Ptp
/yrBF8qclaNYyLFhusi2zWXO3zrDo37pQp75pAcCUOl5HGt59L3kcQoWnF222FYSFC3BYq3Dy/7+
y9x8RyVoqZHZwC3Azjs+9IyfjrttMmRYDblxX8CpYst9f+uNgTgikbiupGc7tLsOza7NH+98CFtm
yrQcjzuqDo4nkTI5uZ6k0fc40fGQwLkbC1xx+Swz0xbfuWU+OmFcESSVwHnAc7c98MqllR//5w3j
bp8MGYZh4hnAva74F8XTQ9kUAgR+fv8HVz2HciHHoYbLQscd+bgb8oJ7bcpTzgv2Hq/ykrd9mWOL
negEsSYU6WzgE8AL7vjQMyrjbqcMGdIw6VkA9BSd9Mt3kRI86ZcDlwo5JNCyPaQn06cURtCwPW5d
6XOi7XLZBVv49DuuYNcT7h2cyswUmClD7bokVyK5eXbXnkePu5UyZEjD5CuAWIpOKmEEXyEEcD1J
2j9PSjwvfbJdyf6aze2VPiJn8brnPpL3ve5xbJjKqxMYFyLDcxrK4WIkX5vdteevZ3ftmXiXK8P6
wuQrAFWhhyl4ig2AL6eOm84AQmsu9QIgc6p0XW5Z7LHScfmV+1/IF979NC7/pfOigw9kA+HyHJI3
IPnG7K49l467xTJkUFgHCgBC3j+EDdheYO2HTYHlT3MJbNfj9kqPfZUeG8pF3v3KJ/CWl/wKlhU0
YSob0K9HAvKRSG6a3bXnd8fdYhkywLpQACn1+gYb8OEOEOy1TifaDjed6NDoefzvR83y+Xc9lftc
sik4/UhsYAuSj87u3PPe2V17psfdehnObEy8AvBlLuZ3a2xArUl1AdaqADwP6fljDNy62OZQtcf5
Z83w4Tf/Fi+98ufNi4p+DGIDz0dy4+yuPb847jbMcOZi4hWAEqqBvfcgoPZecnLXOMWChEfrfW6e
b9F1JS+54pf4yN88iXPOKhJe0Ops4D5I+f3ZnXv+ZHbXnolPyWaYPKwDBQC6gKWxAVfK5B53gjsg
paTZd7l5rsWReo/7XXI2//2OK3jqoy+JrmFVNkAR5DuRfHZ2555zx92SGc4sTL4CiOfeMQVMEvj/
ieg/sUme9CSl5FCly4/mm+RyFm964aP5f6+8nFJRCxCuzgaeDPLm2Z17fmPcTZrhzMHkKwAYKGCq
DmC0AGBStlfNGsSmatfhhmNN5pt9Ln/QxXzunVfwK/ffxhrYwPkgPz+7c8/bZ3fuyQYizXCXYx0o
AE2oEorA/3OyGYAkS2BwNWEwua7Hzxbb3LrQZONMkX9+zRP5y99/MOGHhlZnAwLkK0F+d3bnntlx
t26G9Y2JVwCRBZXxhSgr6wypAVizUkicP3275ZbND47UqbQdfvdx9+O/3v4U7nXBBgw2MHzgkQeD
vHF2557njLuNM6xfTLwCCC1oMB8tjqr73CEWe1AZ8Ki0P4UkGMVDt843+NmJJhees5GPvOW3+P3f
vA+DlFUKG9gA8j9md+6+Znbnnk3jbukM6w/rQAFAVL7rzxvVgIELEAmYN9rkncIUYwNz9R4/OFyj
bXu8fMdDeP8bHs+WjXnWwAZ2gbxpdueeXx13S2dYX1gHCiAWWEthA44b5P2lN9Ba39VT13a56ViN
/UttHnTZefz323+bJzzsItbABu4F8luzO3e/dnbnnnXw3DKcDpj8Fyll5F6dDagYgJQgvZQgnuRu
VQqHK21uOFJB5HK87Q8fw9v+8OEUcoLBbEBnNuSBt4D8yuzOPReNu+kzTD4mXwFEQ3Vj0v/Igq6a
BUhTComUIHgpy1ebPGPy4waNrsP1h1c4WmnzhIfdm0//3//NL2w/i3Q2YN5LsM1j/JqB3U8dd+tn
mGysAwWgoJlyXQkATopfvvaUYFT0I1fJIAzOMmiKwYM7FlvceKTKxpky//7aJ/GnO34BQ4kNZwPb
gE/N7tz9ntmde8rjbv0Mk4mJVwApA3Ak2IDjnroCSFMIgwR/Lceptvp8b/8Ki40ez3zyA/nIW57E
hedMsxob0O77pSCvn925+wHjfhYZJg8TrwBgSEcgGWUBTjX/PwrdTy0cWs3tkBLX8/jJXJ2bj1a5
5PwtfOTNv8Xv/fplDGMDMbfgAcD1szt3v3TczyLDZGEdKIAhHYGCedtNRvqSOX0GTnKYIK/KFGKK
IkwVJqfFRofv7Vui2Xd41bMfxntefTkbpgsMZQPhIlkG3jO7c/enZnfu3jbup5JhMrAOFICCZhVj
owL5n/w2hS1pwgfXBHinOBnHI4UoaAqj57jcfKTCbcdrPPg+F/DJv30Kj37QeayBDTwVuHl25+7H
jPuJZDj9MfkKwBAGSLABOSgIeIoU/s6cUk59pNLmO/sXwRK8/Y8fyxue/5Dgs2YjsYGLgK/M7tz9
ltmdu/PjfkQZTl9MvgJQiAlDqAiQOK5MofWjU/jBCiGuRNYo+ENKlJHQ7blcf2CZA4sN/tcjtvOJ
t/0m97l4MyOyAQvka4Fvze7cfa9xP54MpyfWgQIYJAz+OinBTskCnFwgMK4Q4tmANdQIeIPWJc+5
f7HJdfuX2LSxzPte/0Re9Nv31+6d6N71+w4XyV8FbprduXvXuJ9UhtMPE68Aovd+kDAMTgOefEYg
vUZAn1a1/CNnG/zl9U6f7+w9wfFqh+c+5YF84A2P5+zNZUZkA5tAXjO7c/d/zO7cvWHczyzD6YOJ
VwDx0t+4MEgJrpYFSC3KOckqv7WkBOOpv2HTwOyEJ7ltrsoPDixzrwvP4qN/87/4rUdeHLaDce96
+4SL5HOAG2d37n7wuJ9ahtMD60IBqL/SsH4RdAZg0PfQSt71k0FQ1DSga/Lg2IDvOiw3elz7s3mq
bZu/fN4jecfLHkm5mDPvfTAbmAX53dmdu185u3N3NhDpGY7JVwDxtF+MDUjpj9KTKlCuaSwNo73K
yD8jT64/ea4MRxeWakpxJcz9B3c5tm2PWw6vcNPBJR768xfyibf9Jg+979mxO2EQGyiAfDvw+dmd
u88f9yPMMD5MvgIY2BHIVwSO50VWNWGZNWGMT6dg7dMGFhkeJNSUgKGGVs8wzFfafPunc3jAO//0
sbzq6Q9CSK1t9IMQtVPABn4Dv1PRk8f9FDOMB+tAAUCoBGJsgCAFKJF4qVT/1Pz8tM+KeSP4+Gu5
jvD+9LuKKY+e43LdvkV+eqzKUy7/Oa5585O45/kbtH3TFUHABs4F+dnZnbvfObtzd3HcTzLD3Yt1
oABMy5bWEUgPCK6WcjvplKB5FdqU8u9UFIQ3eN2hxQbf/skcmzaWef/rn8gznniZdm1pWZKQDQik
/BOQ35/dufs+436iGe4+TLwCUIKsLTHYgGv0779zrPJaov96pyQVxFv9OEPcC/2wsfgBQLvv8N3b
5zm01ODFT/sl/unPL2fzxmLUNsPZwC+CvHF25+7nj/u5Zrh7MPEKIPKVZfAaq2W+IvAzAClCpvY5
CSE8GUViGuC1KB8zNWjWEgy+3r1zNb5z+wKX3WMrH37Tk3ncL18wKhuYRsr3zu68+qOzO3dvGffT
zXDXYh0oAIismmID0Us9dCyAcN+7Lx1ospXgKkdVIMqV8VZTGv5UbfX4xk+Os9zs8VcveBR//cKH
ks8Jrc0GsQGJlPwuyJtmd+5+5Lifboa7DpOvAGIWTC1S4h12BFI0F0OWjCKg4cdfw/UMmEZVCPpx
UpWBsV3atlGPR+l63Hpomev2LfCIX7gHH3nzk/n5e29ZhQ34y6XkUinlN2Z3Xv2G2Z27c2RYd5h8
BQCJF1f9kdLPAiDBd56NaJrhlCf8aV3a4oKsLHBa3n9o0HANiiGpshICHo0rEC9pTrKKpWqbr//4
KI6UvPsVv85Lrry/pnwGswGQOSn5a6T82uzO3ReTYV1hHSiAwbluwB8LAM+fpEc6ZY4F2lal8GbE
z/zH4Cl2ruF9EZIxCT2AEb/2pDJRui1a5jgeN+47wc2HlrjysffhA69/HBdsnRqNDcCjpZQ3z+68
+spxP/EMdx4mXgHIWNov/uLa7nBhH+Q/Dx4ZaNQpdg4vea7UTMGwayRSJBrRGTi4SKiQYsHE40tN
vv7jo2zaOMV/vOE3eOqvXTIqGzhLSj4+u+Pqf53defX0uJ99hlPHxCsAVFVbMO//iV5cN2U4sATL
HyaVwzP6Q2y+dkmhsA6uB/DkcOufVCRqnxgTiJ1XxUOMq5LQ67t8/7Y59s7X+OMdD+EdL3sE0+Vc
TBEQtafe3vBCKfnB7M6rf2HcTz/DqWEdKACI/GN/XlcEvgtgimty72Rw8E6ZPPObAIn1JNSFeV0J
hRDdRbKyUdvGiyuV5Dq1fv98jW/8+Aizl27lmr9+Eo944DmERU7D2cD9pOS62R1X//G4n36Gk8c6
UACJyLWx3FklX55mdQdKpH6mVeIEUV1CygFXvZYB2QH9Gr1Bx9HOGGi0wW6Ef4Bmx+ZbPz7GQqPN
/3nRo/jzZ/4ilmAUNlCS8K7tO67+9OzOq88mw8Rh8hVA3FLF2EByNKDVfXa9tn/0XP6IsQAZWO8B
acnh1D+FPaS4ASYLGOZGELIET0puO7zCd249zqN/+RKufuPj2X7RxlHZwG9JyS2zO65+/Lhfhwxr
w+QrAOImL1ouZVolYEpEf4jJH5Xup++brnASEj+op2IioBf5FmGuP8YyQqXAoA5QkRPhxc/heVSa
Hb5+0yE6nsd7Xv3rPOfJ28N4BdEZosaJ7vYCCV/cvuPqv53deXVh3G9FhtGwDhQARBEvbT5Y7rpx
ITEjAlEq7i74elBayDDOBgxGMIipmMIb3lHKNgQDioYUP6whiLMAki5EsIvtedyy7wTX37HAzife
n3985aM5e3NJYwNgKIFIOQiQr5aSa2d3XH3ZuN+KDKtj4hWAScc1fqxiAE6yL0Ba0H4Un3ztU8q5
guuMyaehw0LVMUAZpLOGKOIfWf50hqKOb26nKa7g94lKky/deIgtG8t84HVP4DceduGobOChEn64
fcfVzxr3+5FhOCa+vHPjvR/zRgAECPQRrvz5xz36/vRsN7Z49ZGwYiPwrxHS+BNfI1fZLaTzMrFi
wKbpuY20VTJkSil7BDvosux5kqNLDXq2y2//2s/xc/fYxPduXcBxPb+9w6bU2lQIgBJwxdYHPG12
2wOe9qWVWz/ZP+nmzHCXYeIZgC5sCTaA9LMAaJZVp8upkzoWSeu8msWPjd032P+HVOahBwd1tpB6
HH9G3950LeLXEFl3SN5L9K2EWOsGC44u1vnyDw9wn3tt5YNveBy/OLt1OBuIlj9Dwk3bd1z9sHG/
KRmSWD8MAAitkMYGLn/4fSNrdTJYZbdBAcD0jcP/hmyy2vrgf6nNDzxsnAXEmUXiqIlr1Ld1XI9D
CzXyuRw7Hn8fts4UuP6ni0hYjQ2cBTx36wOeZm97wNO+s3LrJ0+eXGW4UzH5DCBh9THYQD+IASTr
7lNDAcnppKP/g6Lv6WwkWdkXBvxTWEtM3jUdkM4CzJhAclt1rrTYgRknQMLe4xW+cfMhLn/oxfz7
ax/DxefMjMIG8iDfKuFL23dcfeG4X5sMPiZfAUCcchJZOn9EIGPTcBotiDf6NLyAJ1mUk1QIqa5B
mB2IzjVIkRn1OqpdDBdB29+TqdedcA1iCkQFDuvtLl+9YT8d2+E9r7qcKy+/NNw/kSkIrwVA/jrI
m7fvuPop435tMowSDTvNceGvv14mbkWoecFf/MlvB2vSb3VULipOZr8h/oGUqx1FmnNyteXRUvO0
MQWoUYC4CyETGiQ4XjjraeeNtt2ycZpfue+F7D1S4U0f+AGNtuO3mUgGZYMVau4fQbxq70ee1R2l
OTPc+Zh4BiDjL7JaGCwLU+MDrHxqdC7FxA/cbxX/YJBLkRrZj1l2/2tAqwQUibMZwntIsBj9OFqb
hWXLRixUDw6qsQc09qHdS6Xe4ovX72XjxiLv/8vH8agHnhMedzgb4I9AXrd9x9X3J8NYMPEKIHrZ
g/m47ymj9cP8/mSuXkGs0RWIC2lSag3qr9H92F0ZFxYJuely+HQ+7oZEtxHPMhDfLqEU0I6hKg4j
hZCWDfGkHyC84bZj3LR3nlc84yG86um/QD5vjRIbeCDIH2zfcdWLxv0mnYmYeBfggse+TpMcQRSM
9v//85dfsebbH6VREtH6UX2JYceSQ9Zq1j69viC5PEnpNfchrnDMkwR/PHN7GbvrhNvgzxfyFg+5
z0XkLIu3fvAH/OxII2jXoZkCgE+C+IO9H3nWysm3Zoa1YPIZgM6FU9jAYMvMQEqwGlvwzyb8SQYT
Yg2ZBK0MOMFOkiXBhlxKkdIEkfDHK/oIA37ReTwZv65YoBE1piDGsQw2LzEZgdYFuWe7XPujQxya
r/LWlzyS5zz5smC3VdnAFX6A8KpfG/drdaZg8hnAY14rSbUs/rI/f9nTiF7d2O3e1XefaqzTrb0c
vtMAxhFfqglqzPdOxB0S1ttLHCseTJTSPE94BcG8l9RWlEsFfvX+l1Cr93jzB69nsdoPmn4oG/CA
t4D4670feZZLhrsMk88AgPCFNF7yiLJKZa3NPVLjf3fGFPepE5dqsIt4UDGdCQxiJ6nn1ITTOE94
z6oDEoQDjOrXpjEPs/OQHmPQ2Ith2c3H0e7afPWGvTR6Xf7xzy7niQ+7ILo244INNmABrwf5ze07
rrp03G/XesY6UQAQSYI2D6FkJHLuyT3vtGmQ36Gi58aZ465GXJloy/WgYrwTT6g8lECi/dZSf7rd
V4IfuiSG6xH7TfLDJP51eJqLEc0T9K5UrX374RN880cHedb/uj9/9dxfpFzKoa7GdAvCiwN4BHDz
9h1X/d643671iolXAGF0O1pimMfBfvgIvv6A1OGqU+w4HmpU8pRCI/Nmgmv2kgKnlhsCn+wHEGY8
vJhi0OIAvmLwwuYK/xixAP34KYVCkGAAUdhBG4jEi5hCrdHh89+7nQ0zBf7l1b/GL//cFuM5DlDe
m4GPbN9x1fu277hqZtzv23rDxCsAIApI6QtCC6gLnNHzXttuwJR+qlWCfMNqDbRjyJT9UK++QErT
bUkoK6nVN2j0PpmnDwQQiNJ6XniQSCnoAUcZnVMfiUgbayAKAA64D53xxNrjh3cc58bbjvKKpz+Y
l15xXyyh2mUoG3gecMP2HVf90rhft/WEdaAAIrFJYwMm5ReMIvfDWEHitImFw5QDMSFLK/VVQhCs
D3VHwnkgUnIR9Q8Xh65A7H5BUwyxa9Tm1bq0242XBRuKJ8wIEM7rg5Oq+cVqk//57m3MXrKZd7/i
UVxybjTK+BA2cB/ge9t3XPWn23dcNfEB7NMBk68A4mmlOBswhD1OqXU2ED/uKhODd0nbzlQI0lQG
Gg0fREJSlydcCLUspsUwrb5SLMnfURvqJ5L6SbWTC4m5LAxiytg8IQuI5sF1Xb5/6yH2HV3gzS/6
Fa78tYu0WxmYMiwC/xf4n+07rjr3bnnH1jEmXwFAjK4PYgPxfcwpVShXmRJWe4hySF0XO1ZyvYwE
J7ZM+efGhUDinlUlX2zXqI00hmEwidh9RYHBFAZAxDb0faNOR9Iox9YHW/U8ydETdb543W089qGX
8jcvejBbNuS169e1nHEjTwJu2b7jqifeLe/YOsU6UACxtztcFuPxIUTKlDziKNPAy0mj/fHrDTdV
EXsl7DFf2jimGdSMG3pdeYW/jbNGytHTBTd0B+JUncQ8nj4fXSvx/grK3QrvQZrnjZ2z23f4+g13
UGu0+fuXPYJHP3Cbdu0D2cB5SPm57Tuuesf2HVcV7/53b/Ix8QpAf7H9WZMNmNTbdAOS0inDQ4w2
mRV2A0nAUKVgVhKmbq+OmRB6GVumhFf9TuvAE+MIGvvQxw6A9HkZm1dKKzUeYLAKTSmE+3rmh1al
ZO+xE3zthp/x9Cfdh1fsuD/FvB4ITWEDfsT0FcB3t++46ufG/T5OGiZeARhUOIUNmIG32K4QUw5x
az3qNZAi4Ml4g24SjW30OISi4/r9aQKXSCeiB9n8j6CifwiVpACHbCKw5ujnD0+bwhYSSsALz412
DeF8rD4AlYUJ4wAiUmTBX8+TtDp9vvi925gqCd758odzv4tntKYeyAZ+GSlv3L7jqufe7e/gBGPi
hwTbcOkj3+jPJTsCATz8YWk9TQd0AlpDXDm0vsM3ihH+YdvIxPK4R68srv8nebx4KjS+SSQ3MmUb
TTkYyijaRymL2CGM7ZVySD1+dILUbcxQh2Sh0mC52uR3Hn8/ts7kuHlfBf3ZpZQTF4Gnbn3A0+67
9QFXfHnl1k/2Rn+iZyYmnwGgv4lJNjCS366OEPepB02SkLbrU3ybtPOlbxNnBmjWPsli/D9R/MJf
75n3oAl7YpwA0JZF82YAMHIpzHaN/g/ZgdSYQpx5qeOrykFP3yYWezCO6fsylUaHz1/7Yy67xyb+
9sUP5byt0TdHhrCBnUh50/YdVz38bnsNJxSTzwAuecQbB3UqEcDDH/bz/m9dGtdi6tcE1UMwWhKK
zAAXJPWHblXVKmlulGQg5h4yvn2YloufJ9zAPKM0rz1unVOuRh0mYikxFmIopdhf9UcalxCxhWOL
Vbq9Hk9/4v1xbZu9x5uswga2AM/Z+oCnya0PuOLb2UCk6VgfDMCIkqnF0rCaBuvXo9p3wpTw/bXV
/vlSWEKMBug/zW8ZxeYUfdbYQJjqS1BpYfw2/P9QwKIS3vi9+BY7COohzfvTr1tGxzWYl8EwZHg8
qV+DHjgMr8eMIai04fxKnc9feyuX/9L5vPYZD2SmnNPOl8oG8kj5JqT86vYdV91j3G/q6Yh1oADA
5MbRSyhCY6xKa5OugP77ZHVA4mBxxWBeVYIhxNN3utXVj2EKvSZ4YCggiIQuDPIZ7kMwHx5XpsxH
9DzuEoT3pAX/zLRhpAz0jkhKjXmG8GuC76mRjPUqRc1l8cB2XL5x416WaxX+5oUP5sGXbTbuakCm
4HKkvHn7jqt+e1xv6OmKiVcAMi6+wR8hwArcAMMyDpDeUfjhQCUQWsaY9Tcl04yi69ukXEOqIkAT
yPDQXnggXUD10+slvyANRUFMXvRCH7TzRteh30uUciRF4ehCrGcLjHuUwlAaeiwgLCP2kqzgwNwK
X77uJ/ze4+/Ni55yGTlLZx9BNiKMpHiA3Ir0Prn99/7jn7fvuGpqPG/r6YeJVwAhpdUXEBBuITE6
1DBIeJOWeqCuGEoBYseNK4T4droy0GZ0Ci+NQJ8mkPHjGGxA642nKcWkEkhaeF2fGrRfCT5anYGU
wWCh5nY+ZQ/SgZ4XG4I8uL5wuRcGCNWF6EoGz1Qg6kOueJJuz+ZL3/8JBWHzlj/4Ze55TpnIx/CZ
hPklVUDyYjzv+u07PvjAcb+6pwMmXwFo5j1SBEqaVGDIrEoLLWnaoUbm+9puaTEF/PPKAYOKEv86
r2bBQ0UQSXF0gRLUt8fCYbvQrLPK7af43MhIWBU9D/3v+GQcOGzi4Ld+HAzhN3oiBufWxxXwwvsy
3QwpgxGQw/10a+7fenidQVzCwuLeF53DRedt5cJzN/HmF/8qj33QWWhWn3B4M5MN/Dyed9323/3A
H4377R038qd+iNMBSkKE/9IHQi9ELBqeYq1PNR8wyHVIdEhKbLvK+jTXQKPj6ecXhhUPjbmMnVnG
5pX118+hX5euWCUBKwnUqK4E1D6aO5RwvxQr0nY04hbheeLxC39ZMZ/nXhdt454XbuOCszeRswTH
T1T5+vdv5fqb9vKDW/ZhlTaR23QJIpcnCoQGzFCoaxdl4N3bf/cDv4EQz9370d9fPsVXYSIx+QpA
Si2tF4h0aFUFlhARbQ23D3cOKfYpXIDxJzbrQ5hCZ2yzmqIIl6mlXkxAZXwWRLKoJ61IKK6kTCGX
AxSD7jJE95DuaijmodX6acIsByqE6FlJYGaqyL0v3Mol52/j3K0b6DsuB48s8tHv/4RvXPdTlpZr
kZsCuN0abu+nFLZcglXeFD2E4Dx+ylBdkXgKUt5y2e++/1n7Pva8r57iyzBxmHwFANHbprS78FNu
Qr1kaZ/10T4TLkc9z8Dzpy2MdYaJee5Cu2yZWJ3cI6EcUtmAJKGIwkXRB891VhRnSKYSSNsWU4hj
16Yi+v52GjPTlY52HqldpF66vHmmzL0v2sbFF2xl68Ypqs0uP9s/x8c/9z2uv3kf3W5fE/rQqoc9
KqRn01/eS276HAqbLgLL0p63DF6TcL8LgS9d9jvv/zuRy79+70ee7ZzqKzEpWAcKQJPwgA2EGXdh
fCWMmBEk6tAu0g+76nmHbBqXXjloWxFchtQELnaYUPK82OFlyml0AYud3hBmpSwJhU/fNjxvwtKT
IvgyFGzdLfA3TfY3kLpC0eIG5541w6UXbOPi87cwXSoyv1Tnhh8d4Ls/3MuBQ/PYtmNYerMZReAA
6WwQnPYJ3G6N4tZ7YRXVoCOpbMAC8RrpOr9+2e+87+n7Pv78fau9AesBE68AZCDIYR8A9YLkc1od
gL+h/65rwj4sCLDKxwDlKgpCjvAjafnRrtHUGMPYgJTpxzVSpGmMwdhGhIIttXmDDUQ7aa6B7m5o
5w2VSsr6YMYCzj9nM5desJWLzt2MJz0OHlnmM1+9mR/eepCllQau60bpQ2EKt/GoZOpSQOK5XTqL
P6Ww8UKKGy8IBH4QG5APA3HjZb/zvpfu+/jz97DOMfEKIHxBhS7ePv0XIj6uXkrsP7ZADD5LbEOR
qgXSlpjCm3yJE2W9MdchElyLMAYQcxNSlQBxP18/Vgrt17aPfHqhuImmFAgFPc0dkPo1aLEAKSX5
nMU9ztvCJeeexXlnb6RSa3P7gTk+/eUb+dmBefp926gFUDJv3p7Z5Ss1o6M9UV9BeNi1o7idKuVt
98YqFI1jhaEh/+cmELsv+533PQnES/Z9/HlN1inWgQIIEPiCUkQ96y296ETKVa02rDUeoNcYpHP8
+PHkkJUydZkIVxjrg+CmFl6PWUF1vyI92JdmxZUXr1H7JANQ20vzPIYbE8UBSoU8522d4bytmzh7
yzTFQo7DcxWuu2U/N9x6mEqlHhY0ybBJfQU+6HkkVWg6M1Br9BiI22vQnv8xpS2XUpw5OzofmtKL
jvVMEA+/7Mr37tr3iT+4fk2vxoRgHSgAnccHL6tlheX34Seqhe/rhekg4xhrzQQM8f/DcEQKF0iJ
+Kf9lLqU6uulaf2j44Z7JZdpFthooxjFV+eINotTd1M5pAYJgQ1TRc7fupGzt8ywdfM0nis5vljl
9gNzfGrvHIeOLftFQEprRIG4wE1Toph8JhppHwDFDAY9H//YnuvQWd6H060wvfWeiHwBX+kIrSBK
1ZDIy0Bce9mV7329yBX+bu9Hn7M2G3GaY/IVgHoBNf4mpMQsAkxaZ1O+5Gg6YE0MIjaSjbYsMcZf
yu0krzFOqc0zGhmFcKPQriXPG+ykx0iMYyUsun4NAT0Htm0qc85ZGzl78zQbZ0q0232OLFT4/s0H
uP3QAtVKK/Tj1b+Q1qe4XzK+gLh9HxIHCNeYBiHtLFJK+s1l3G6DmXO2kytvCpJHflA2qmQQAAXg
bdK1n3DZle991r5P/MHc6m/CZGDyFUBoPcCUemnMCeXkRTwzPfg/ip+whmtLylz8rY8rBU2EpdB+
eZoQmoKt7kmm0WaDHYQh/8C9F37loLZtMu4Q3gk5YXH2linO2bKBbZunKORyrNTbHJ5b4fpbDnDw
2AqdTs8sHZbRPQpDSWlNoJ0jYgSEejn9iZjPeeA2qSeNlIBj96gfv5XyWRcyvfVSP1sowZPCr1hU
jeKzgceBuPmyK//9sfs+8YJb75RXZMyYeAUQeP7Bjyi1JcMUoESowJvhyOqI9SuPHT/1lxxhm/i1
aspnoKKRkW+vU/S4UJvb6OcwQnraeWO3bjSZeQ7FAIqFHOdsmebszTNsmikjpcf8SoO9h0/whUNL
LFWa2I4TCrrKyZvV1zJdkEWaLdfdABL3MeiJDY4WqC3lIOIQtmFn5Rh2q8LG82bJFWewhB9EllLi
BRWlQabgHODzl1357w/f94kXHGXCMfEKQJX+Cv0VU4ogDASArgNSDrL284qUWZl+JBmT3vjv5HYy
KSzSQqJq/4O1Iih2wlQoae6AkYuPSboEcpZg83SZTRtLbNs4RbGQp93pcXyxzvdvOcThuRVa7X7U
My9gElrpTWrEPiF3oWs9OMA3XNxT2if9TOlHDWvFtOBo0IZOt0ntyM1suugBFKc2I4XEEyCCvgcq
0CwscQ+Qn7vsyn9/xL5PvKAxwtty2mLyFQBEQqG6/+LHAIJ6QAA/wJN4cUYLBcrVlqTQy+i6jItM
CdSlpAWNQFvK8cLUnL6ryt1rwU61fyyAt2G6yObpMptnipSLeTwp6fcdlmotDh9d4dvzVVYqLfTe
gGF9rvKeZFKopUy2Z2yRuZ+xreJyKYGBRCulp2AT7W8s1cqEgt11JRCWEbsutbnb2HbPXyaXzyM8
C0942rZ+ZyYhxANA/jZwNROMdaAAtACbYgMiektDIh24g/Hg4JDA/EleB7q8asvM2PRAay9l7DBq
vUccqVkFGfn7pVKOzTNlNk8VKBb8wqi+41Grd1hYrPPD2xqsVFrYthta9NC6h1VUMlZQpRXcJqx5
cOZRmIC+P7qiiymRQelAERN0Pc4qRahKYr1EhjsKgYB7/S6tlSNsPvdeCEuSk377u9qdBFWEjyNT
AKcLomBgmOIKlIEuSPoHKwyEb8poaiCVgqZR+zgLUP+H5xPhy2dEuUPLpPa1AoHy4gcll7PYPFNk
01SJfE7gSYnrebTafZZWGvxkpUm92afXs4MUHIawi0BopCHQerReK7wRWkgxhQVE16wKs/S0njS3
lcMFEvW8BrS4Id4hC4lqtIYJvHEIXY8EO/bbVaSUWJbAEuAKAncr0jQSHjPSy3IaY/IVQLwjEL6F
EsGbEL54MStlQphv8oBzrPYyGVutqgySiiH0b0PXVHcLPISw2DhdYuNUgVxO4LgeruvR7TosLjW5
deUErU4f23EjJhDWzkeFQQIZUnMRCL5ym2TQlnpnJYMFhDI8iAWo9QGlDylXZI+TbkDSMVuLj6+V
8WiJnrRc40gqIbhGD/X2iMj3Qmu4kY5zumPyFUBo+aVZKx7kc0W4iVzlGEOQkjWM5+HD9SkBuDRL
J1NW5ASUSwVKhRzKH5aexHE9PNf/e2K5yU+qbbpdG09Z8lDBaYG50GIpX9c/X8iIlIUUUZYkFGgt
uyDCNKV2j4NYgNpfbxVprBrQ2mbuZbXSXp0XRMcbINypxQWDj29ZFkJAecNZWJYv/j5r8rQKRxVc
ll9nwjHxCkCFjszAkJb6CTIA0hU+fY4/+1GLAFNiUzG7nSLlZsy6lLfIWTlfaizwHInrenieh+tJ
uj2XxZUWzbbtC73nJdhAlOYLBjwhKFwJBNkX4sCai8i9QJuPhDgqeoksuYiMnHY+YAALCNo+LTho
NHHSDUi2ZfyhDAjZSrGKklgjgguwLD93XCgW2bD1QnIW/nMIg6Aax5ASsCZ+/ICJVwARKzN7BCra
qui9Pxuriw/2jyAYsnLg+QEsER1fSpCe74e7MhjCyvVY6tr0bQfH8XBcGe0cMsx4ZV40qpGKQpt/
SSoBFQdRljwcGFVjA8E5hdAsfUx5hLcmIvssY7Kr0/u0ehstzEEk5mZR0HB7r55ozAXTQ/mJ7VOW
DUo9hOt94c/lBPlCgS0X/ByFUgnPDZ6h5+JJDykt/b26Fel9avUX5PTG5CuAUHr0jkDRi6PGBQgi
gPqsAY0Eh/C86LPWrusPdul6bvBiSDzXt9yeJ3E8D9eNfEWTAier7cLAG8QsdkDnVf92KYKglhxZ
CfiH1N0AoQXJIsWoC3S0H+H20e8UFkDUnkbL6eyB+MqUdUMdA7VmEL0fVQkMhmUJhBDkLIupDZvZ
eO6l5HIlXNfDdvxJumoUJvX1JeuYEDzpwH/9UX3kE52mWAcKQEGG9FUGgi8QdPr+A+z1HXpdF9d1
fascWERPH3XW0wfIjB9epp3RmDGotVquhDO8RKlRbX1eBZtMwR3OANKVgPLRhXFcpXi0eIB2vVFM
IFg3KgtQbRCLjaUF+YbF8+PWPrndqD7+aBDCHy7OygnyhTwbt1zI1OZzkBI8x6XvuNiOH3vxQpsi
QLAI3pMO/NfLJ74KENaDAjA6cgdvuUpbWVCrdZFAp2dj911Nmw9HIjSgfU5MjzRE59ecEGX1g+vS
f0cUXcbmg3RbjA34DGBEJaDOoWIPRlxA8+mFVjcZ7BcmQqQZ4Vf3I2M2O63AR28bsx3j/Co9DoCM
2nBw2m+tFD+5jbL6+ZxFcWqGDVvvQb40hetJ3z2zXfqO5vsT3vCXQTz74KdfnnUGOn2gggBxRRAI
RU6A548+YwGu0F/JNZ0lhNDZgIhsltDMo9QEP/47UgSRwPrWWTGASCH4wi8Cl0GGcYZUJQCaGxB3
CQgGTUlG+fWsAJj76PeeLPCJIvJxJqA9iRREKTpD3EVsGzmqEhh6Mu1RRVa/kM8xtelspjefi0Tg
ui5928V2XJzA3QsaAwQ9gXyDVZx5+/7/fOGdGH0cP9aBAoAoFQghBw6VgYUQEhGkdETC+qymCkxh
8H+YFi0S/JgyEDorSFMEevCOSPhjCkFZLym0+oZUJaAdPwjwRWwguk7lCkAU5dd9+3haUP1Jdt+N
cjCxmhytfUYh/ANkStV2aMF3Bh5NDvkdWH0EuXyOUqnI1JYLKJRmQEps26XXd7BdP74TcUQByJ8J
ae06+Nk/u5F1iHWgAGJvh1Q1ARJhRXRV+N8Ki3oGjoxkEUCYiIuZRl/gTGUQCp1IVwSRK6CxgYRL
IMyo/kAloNwA3ac3g4LqVnTBTwQENSlOje6L5LLUgGC84QYS/OHRASOBMMz+pqyPW/3y9CbKm89F
5CxcJfi2ix2kXcO8sQCEfB+IPz702T9rr/GlmRhMvgKIclragsihtSwliBbgRqnBkziRSZWjSLmh
EOLKIE0RJPz1GBvQGEAiLrCaEgCfWhtsQx1XXa+eFQiXRM2m3WdI8EVUrGMWQaW4ATEIbW6oxR/k
44+0LAmV18/nLIqlIlMbzqY4tQEPSd926fVs7L6DG2R1ojCPXAHxosOfffXHT+JFmShMvgIIBT4W
A0Bi4Vt9vMASIPASkad0dZBMYUX93PWtZEwhhAIIpvAb83GqrgQ7yQCMuEBMCTAgFhBcQqhkwnhA
eJlRViC4zDAToN+iSlGiri/RSsqlEuY6zV9KF1XNv09skEwSGuM5x0IDqccXAktYWJZFoZCjND3N
1MazsXI5HMejZ9v0ug627Qf6vKDmIsimfB2sZx3+n1eviyj/algHCgDiVt8v2FDUH6QlfHdgDS7A
4BCBPlqO0K2GFoIQ4RL1O00RyMA/EXEGoCs0PS4QKoHoPGmxADCF2qz9j+X5ibEAzAj/MBcgvjza
J54xSQvaRYHAtPhB7MkmryFyVgxYgauXzwmKxSKlDVsoTG0AKen3HD8d3HNwXQ83/M6CAKQN4o1W
cdNbD/7XH66rQN8wTL4CCPsAGIEb3/cVIITljw4sfGEVCYEepBBk+hIZZwIysTwcaz5kBUlFENH4
WDzAcAlirCD2V3k+eg84wIgHRLFRPbCXrNwLFYa2MC26nwwGJr35VIs/oE2NgVzCexhO8dPrfwJf
XwgKxTzlcpHi9FlYhQKu49Hr23R7Dv2+4xd4eZpqEXIviGcc+cJfXDfiW7duMPkKAPQ3H//F8cAT
UWhASb76ZNhIJEAYhw6XqIQ1aQpBuQQi9beqwzd8eDAE3XQJkkogygroKcLor09l0zv9hPchzci9
zgK0xWauXw4WbnOz1Y1nMqZnKgFSlcBgpRBZfYtioUBxeoZCeQMIgW27dLo2/b5N33bxXFXNF7bX
VSBeeuQLr22t8a1bF1gHCkDT5FqPQCGU1fcFxgp1gBjhFY2gU3xtqRly0FlAaESl9lsr5CHNFRAD
XIKkEiBF6GU4AEbgKw90BYJrGyXPr80Mi9EnxTI9faC8eEXc15TVG/x0sIRA5ASFQo5yqUh+aiO5
QhHPk/S6Np1Oj17fwXX8fhnaCaoS6yVHv/i6D6/hdVh3mHgFEEbgdSUQvOxCCYPw7ZTAQgg35Sgi
ccTUbYzAWbSdDFmADC9Bt/qKdZiuwKDIPpFApygBBgl/GBRMugJhGM3wtQexgGSrpLkBas1AOZWa
Ika5ISPK9QgQgeD7Vj9PcWqKXGkagcB2XDqdPt1en37ft/rRR0QBwbdBPPPoF1936E66nInFxCsA
1WsuLKZReVzpB/2U70+QBZCr8v/Yet2QqQh6eB5VVBMti0iIMZJsiisQ5fZ1R17F1JNuQIqCQNF7
XfhNVwAgtdov+LF6Lz6zLZIx+vje8TUxem8ceAjFH8IC/Ly+H+EvlgrkS9NY+QKulHR7Np1On163
79fyq6G9/QM6Qog3S0++6dhX/sojwzpQAACoVJk/H30S0K8D8ABhxV9oP1MwNAWIl2L1NCagKZ3I
6ioWoNP/iAEQugIyPZIPKZY/lvqDWHCQmGKIXAH/WjRP24jwG2oE8wu7QbwhHhdIbX9T3JPbjSrc
qwX/fMqfy1uUikVy5SL5QgmRs3D6Lu1OP6D8bjDOQmT1hZAHhbCecfTLb/zOqb1r6wvrQAFoL3Bg
psNv2hH0CRTK+gqEsFY9YiQjVuJUMlAKEduIsQC9jJfIIoeReI0BMKiTD5oSIEbxiWcCtKDgEFdA
tVSSBWjeudS9c91r18VysLWP+NEIRH9kPz94EkJgWRb5ou/rW8UiIlfAk9Bt23S6XbqdPn3bCwN9
6noF4hopxYuPfeWNEz2E912ByVcAYfIdIkUQdee1BP5oriogqOXARzp2OBtQZqUUQn3jmSxAr+sH
zU/HFHgtSJha1w9mj0Cl0GLpQAbGAZIBwbCFVsnzq+2M5SK5JrGNsXHaEdceARCAsCxyeYtiKU+x
VELk8wjLwnEk3XaPVrtLt+fgOS6uKuf1URfC+qNjX33TRI/ce1di8hVASFUh5ML68qCEVShbNqrw
ExOUWI48ijlYITPQRyAyq/n8HZNsIIUBKJsvNe854vyJgqAozYdWF6CEP84CZDIjEN2gdq8pcfp4
OjTN2hsHHUEJpCb0I1hCQODrl8tFrEIecjmQ0OvYtNtd2t0e/Z6Dp4buIoyBfB+sXce++qYDp/Z+
rW9MvAJQRN//oaJagd9q+UKlfG1LiLA78Cgwtgxr+dU6Rf81ZmC4CNFAHf7uIoUNpPT1V+Knl/aG
aUCd8ZsugZ4diIQ/zgIUrU8RfBm37TFlSorSGLR0lKTKKrAsC8sSFEt5SlNFJBZCWLiuS6fdp9Xy
Kb/j+AO8aOP1uRLrbcISbzj+1Tdngb5VMPEKAH3cO2X1g3dBCPwegIFAqGzAyCpAH5Y7Po6AEkqN
GfhWP8kIwhF7wgh9TCEMcgOU4A4MBsaFP6pNSGMBoOoC9HtcLcAX3ePI/r2251pzfxYCkbPIFXOU
iwXyhbzff0NAr2/TbnZpdXrYXRvXdeMVfYcR1rPmvv4331z7i3RmYvIVABAOpqnG1AscdLUMLIQl
8ML1AVLSXMZPjS3ogq/WpSqDAYrA6NiDqRCGjfaTEH7i8YDo0nWFkMYCtMs37sm87dWSfIN8+SFq
ZBT3X/htkMtZFEsFyqUiHhJPCKTn0Wn3aDY7dDp9v5zX9fSHAkJ8DKwXzH39rbVTfJvOKKwDBaDn
5X1BtPAFzAoyAH7cLnABrMgEJuQ/tkAveIm8DI0JGIqHgYrA/6gHDB7tZ7ASIG75w9hGVEgEsf4B
YXOkswB1/TL1ZkVMlFcR9iGCneJwpG8nQAiLfD5PeSrvW33pB/OcvkOr2aHV7NDt27i2FujztV5D
COvlc9/4uw/cue/VmYF1oAAUVDKcYMBPnzZaCP8LrxC5AUBaNDCe8NIdZX0wjQQLiP1Wn5dSeXYh
rMBF9YzYQLoSwPgbMgDtiqNBgqJUXST8g1kA6MHAZPON7OPra9X1mk9hyB7moYUlyFk5CqU85aki
iOBDKNKj2+7TanXoNDv0+w6O5yG9KHUJ4gdg7Zr7xt/tvQtfrHWNyVcAKvgTRNp9iNA6S0sgPcKu
wKtHAIxwuHbENBYQuBqxsfaMwF1oqSQEn/jWXYJhf9Gi/SozgOYKkMgGxFgApgU2g4GJux1W2Gts
r5XXIGMMI6pRXO1AghyCXMGiWC5QKuVxXAcPieu6tJptmo02nXYf13FwPZ1tSBdh/T14fzn/zXc4
d93Ltf4x+QoA0Kpxot+axRaBpVnLkGCK/kZ6RWisUys6EhErMD7CEXcLQvofuQSrC7+WFkQabCCM
ryUCgtrK6EZGcwOG2u5BHXn0XOQIDat8fWH53XanCr7V92w8JJ1Wj1ajTavZode1cR0vdAeCx3sU
cs+e/9bff+2ue5/OHEy8AtBG3TfYgBAq8i+wNCGIF8IMgirmUT9ChaAJPmAM9WV+1IOY/x53CQYr
AUP448HA4EZCFqD+11hAZMuDa4q5Aaot5PC7Rx+1F0aT76FtGlRi+kU9RUrlArbTQ3oejuPSanZo
1Ft0Wl3svhN+o4HwnqxPCUs8b/5bf1+5s9+jMxUTrwBUsA2il1/1CFQ+ZjTIRMwFWO3tDjN8UXVf
ggUYY/6ZH+VMpu8iKj9MCSDjtQBoJCcKDCqFZPQRUNcdVgcSaQe1PzobGODbB//JxCajmnoTVhCA
KZRylKeLCAv6/Q5SSnrdPo16i1ajTbfbw7XdaIBOACFbiNyfLVz7zn+7y9+nMwyTrwAMOi71pYQD
c1ggrGB4wEGFQHpKCe0VD60qgUDElcGALr6QiOCrAGEk2LoSMEUrCgKiBfRSynrj/xv9AogJf9IN
iEcLzFYIBVBfyFqVgCUs39cvFShPFbGdLrbt5/HbrQ6NWot2q4Pd7fuBPq3xBeKHkNu1cO0/3H4X
vUBnNNaBAlCQplBCaMbCgJUV+caDSwCEEURTQYBQMLWv7qjf0ee0Yp/iSuTw01J9Sgno/QMGswFV
ZZhgAVrRTUzuE2lBHXo4cNVCnzUafzUcd66Qo1wqkSsJur0W0vPodfs06y2a9SadTg/b9ofq0qKu
nhDWP0gpX3PiO/9g322v0RmGdaAAtMi/YgNhKlBzAYSi/yIp/URGLjyUIQ7R8NrJD27Evu+nj0+w
mhJQUXSC7EAgxEY8QI+ya3EEjLuOMgIqMq/WDovJnxyZHw3CEli5HIVSjqnpIrbTp9Pr4jku7WaH
ZrVJo9mm1+3juq6W3gOBOA7W7y98591fuosuL0OAyVcAmmDGo9iqFNcfMk4EnwZLlf/EQvM7f4SC
H40BmKIIDFcg9jEPFa7UlYBRwGOB8DQGQHgPoSIIswEaCwiu3WAB4XVGowGnxgEG1DzEFrAWVSFU
KW8hT6lcpFC26LQbuJ6D3bNp1Fo06w3ajS624/hFPepmfUb0GYT4/RPffffy3fMCndmYfAUQJedj
ZpwoNagMf9gleJWjhS5A5AvoX94Ncw9Bfj9UBGFMIIUBoHoCmoU95lh/up8eywoQ+f+GXdezAxpS
U3XE4wCxtKlkdVkftD4s6rHIlXKUp8t4sk+7XcX1PLrNLo1qg0a9SbfTx3Vss44f2sLKvfrE9/7p
PXfDS5MhwMQrACVK6tPa4JNgP/8fdLRR0XeMUsC0g4VpM8IjmcsTLCCYj1fipX3OSx/cIznWH1E8
QHMF4sW0RiDQEP4UNyAeB2AVOz5UCQzRDCII9OVyFMsFilMFOp06ttPHtR0atSa1SoN2s4Xds3Hd
WKBPWLdgWTtPfO+ffjqm1+iMxcQrACWhYR5eW4YqngmqgUTAsoc6xZovEKb3guWqoC8a/FMf7FMY
bGBgDGBYzz4kfsrCCyl8GLwL+xCoazXrAqJgoHYvikkQuQrINEE+yWiAKuqxcuQKBaami8icS7O1
jOd6dFpd6pU6zVqDTquLawcVfdH+nhDWe0C+cvF7/9Qfw9tzxmPyFYCCsqSG2fOtvvK51+IChFEA
bTgt44u/kpTBPSI2MKoSCD/vpSsRI5KfkuzT4p0KGskn0gQxCiCHCXps3aDBOjQFpAbnLJYLlKeL
tLt1ep02juvSqjWpV2q0ai36nT6268ZPvSDIPW/xun/9n7G9MxnWgwLQsgCKDag1ws//h7QWUhVA
PLeuMwH/kGnf+lNxgchKiwQDGK4E9OIds5rPQqaxgHiOTwU5Y25AgvbfKeF+UznkcoJ8IUdpuoTI
S+qNZTzXptfpUa/Uqa/U/Nx+39bSe0EAU1ifFyL37MXr/nXxbn5ZMsQw+QpAC8zpJaxRmE2E3YEH
Ud1hSsFgAWEsIPaBj5ANmJ/4GvRNP2P4LlJcgUQ+X7f8Q9J8cYOfPpOKkXSEEFgW/pDc5QJTG0p0
ek3a9Rqu49JqtKgvV2lUG3Q7PVxHpffCA3QF1muWrn/vu8byrmRIYPIVgFaSm3yFg5fPE+GQ0t4q
LgDo4/kHS7Sv7IAwFYE+Hj/Dv+W36mCepLEAwnPHR/Yx3ADtGP5djGb2RwoOQtB+kCsUKE0VyJdz
1OpLOE6PfrdHo1KntlKlXW/T7/XxPBkxK78g4yfCsnYuXf/eH91db0aG1THxCiDsDJT4PmDg71sC
6UVDgqXKv1HpKrRt0pWBstyR/67i7slv+aX+1TIXpvAnWUCUDvTn00v94v66vt3gtouXFpttEi23
hEDkLfLFAuWZIo7XoVJdxHUdWrUWtZUKzZU6nXYPp+8gpT5aD1KI3L8Cf7J0/Xt7435fMpiYeAUA
mhIAwo5ARH6xJQgGA1VTDML4gzKtUlMGxld29JhAwAb0D36yihKAWPoPUlkAWAjhGcKfcAP0cACk
ugOJqoCQyQy3+0IIhCXIFywK5SKF6TyNxjK9Xot+z6ZZqVFbqtKst+h3erieqxX1AIhFrNwfLN3w
/v8e9zuSIR2TrwC00lsIKuTCFGCwjbL+lkB4QyhAMKtGEwrr5TQWEA7VhckGonhAfCRfLQagXV9Y
ADSEBRCz/IM68ySKgwcMxDkq3YeglNcS5Mp5SlMlPGxWqsdxHYd2vUVtqUq9UqXT7OD2Hb/3ntSU
EtaXEdYzl294/8JY348MQzH5CgBAFQEFOXl0Y2+F4f8hLoAwjGUY/zdYQLoikHHBTQzmGSvTjdf0
r8oCoqSE4QZAajpwEIZ5AxKTLAhhkSsIiuUipZkijeYKrXYNx7ZprNSpLa3QqjTodrq4jkrvhYHJ
HlivW/7hB98x7rciw+pYBwpAK13TquCiGH4UwSdlSLCwlj76FWyvWMBgRTBMCRhdgdF69ulxgFVY
gA9VGBS77UF5/cSi4YEAU/D9z2/l8nlKMwXIS5arx3B6fbqtNrWlCvWlKu1WE7tj43le5EYIEFi3
Y1k7l2/84E3jfisyjIbJVwBReV60QOseEPYDsERqCMD4KSM1oIQ97OVnKALzy79G+lEb1dPoA6CP
8ReceBgL8DfR3QB1tUpxpFXrDijeSWs2KTGyG0Jg5YPBOTeUaXarNFaWcfo2rWqdyuIKzZUa3VYX
z7HxXCO9JwXW+4CXLd/4we64X4kMo2PyFUDYByAqjAmVgIw4v/+Op/gAuvsfCH0o+0QsQGcE4ee+
DAGH6Oxa7z+1LuYKmMKvD+ChH0dHvArw5Kp7JPGEgUBYFoWCRWGqSK4sWK4eo9/t0m13qC+tUFuq
0Ko26fe6SEer4/cV3ZIQ1guXb7r6k+N+EzKsHROvAFQKzv8RSJkmRVJEgu/3qIs5ASpugKonEtGh
MGv+CYU/YANxio9eF6AZ5LSRfIMTRi4AoSILmUDMwT/Vgr64QhFBUU++nKc8XaLrtlheWsCxbZqV
BtUTSzSWa3RaLdy+jTQ+vCkRwvo6wnr68k1Xz437Pchwcph4BRCNjKNougjdAjUoqBSBNFrpQUDj
w59CpRUJg4OhwBt0nkRPP18oBnzcwxD+GAsIrmKwXQ/SgZCuAcwoYXoz6ZsHbZEr5ClMFylM51ip
zNPpNOi3e9SXVqieWKFVrdPvdPG8oKIvuoA+lvXG5Zuveeu4H3+GU8PkKwBQNboh9Y6VyPn/KyER
MQZguACa761Kev0ViS/6GAxAJNOA0qQAhhKJswB1HSEJiAnzIHdgxMYx97QEIif8ir6NRWz6zJ84
gm33aVUb1E4sU19aodvwu+5KPb3n+0B3IKynr9x8zQ/G/dgznDrWgQIIzTYqmh71AgiE3/9Mn/+V
oHCp5iagZqMfUkhTERhsIL2TD6mWX4/NxVgAmsIxHBHNJTGqAk++jVRRjyhY5MtFCjMlao0FGo0K
dq9HfXmF6vwSzeU6vXYbz3Gikme/QUDwH1i5l67ctKcz7qee4c7BOlAAEI/Ehz61UIIZuALB6MCR
APpQQb9wP5Rvrgl/nA3ElABpvj96uW2K8OuZAHUhA4OA+tWuTRsI4Q/TZZXyFKfLeDmHhcWD2P0O
nUaT6sIytYUl2vUGdreP57lxRbiCZb145ZYPfWzcTzrDnYvJVwB6iB0ITboSTEvLs2tZgFD8lV8b
uhCEVh+0Sr44G9BLe0Ohjw/mKcxUW8wzSQ7gMUpefw1Ng2/1rYJFvlygsKFMo7NCdeUE/V6fxlKF
6vwijeUK3WYbaathuvSDiG9JK7ercsuHjo37UWe48zH5CgAIJSvMy8sUn9moDDZWmQOA6t/0S5lP
CL82jDfJYKB/YN2nT2cCRtWf+jlqXl/P7YWn8Yfktoo5itMlKFmcWDpCt9ek02hTm1+kurBIs9LA
6XWRrov0tAMI0UdYb0K6b6nc8tFTckAynL6YeAWQ+mmwYI0aEFQELoCnRgUy9if8vFfIArR4ggiO
6/v6SQZgDOON6QoARiwgEQw0hH/kz2oOaYyok5KV961+fkOZjt1gaf44jt2nsVylcvwE9cUVOo0m
Xt8OvsKjmkAC1j6E9fTKjz5y3bifb4a7FhOvAAy6rqfz1IwQyFzgByPClKFiDUpg1G7maD/+0sT3
/eIMwLD8JMfzV1dnVPVFMIOAjJTWS4MQAnICq5AjP13CmiqwXDlKs1mj225TX1imMn+C1nKVfruL
5zl+ek9vS8u62hLWS1Z+9JHWuB9thrsek68AYh2BhL4cSy8GBBEMDqR+CP0o+rj+cUWQrgSM1J0W
B4grAiChDJKf2zp5CPBjHZZFrpwnP1OmT5e5hYPYvR7NSo3K3Dz1hWU6tSZOrxf03kMvo65iWS+t
/vhjHxr3E81w92EdKACIomu+YEY9AmUk/SmDgkptX/UdQUMRaJ1zkkogOp/uCqQL/+C+92uP8cWi
GwJkzsLK58hNF8lPF1luLFCrL9Nvd6kvLFI5foLmUoVeq43n2AmrD1wrLGtX5ccfOzLuJ5nh7sU6
UABmJR2GYVW5ez/9p8YF0AL/EAo+RP3wSe3pp+f7o2CemadfXfijIKB/GScT5g/Op6x+qUBupoSb
czmyuJ9+t0O7UqN6fIHa/AnatQZOt4vr+lZffWMQhG0J8Rbpuf+n8uNPZIG+MxCTrwBC+Y/VAqg+
QgGll1IEOXcRutjqABETFpEiEGF3ntAlCCv+SEkDxnrupbvxsSrAk71lAeT9QJ9VLpHbWKLaXqay
uIDd7VI/sUTl2AKNE8t0Gy0/vSc9o72EFPsR4pmVWz/x3XE/wgzjw+QrgERHoNhy1aMvqITDMysB
w85BqfQ/PppPrJQ3DOSnjNSbltcf1I039bYGbBX03hPFPLnpEl5ZcHzpIJ12k26tQfX4AtXjC7Qq
NexOJ0jvRcfy+zOIPQjrxdVbP94c99PLMF5MvAKIxE5JJCYbENGscgFUTT+oEIH6GEdkxUVcCaB9
nluv/lOluhBlBAaw+pHJvt7dVuvciCUQuRy5cgFrQ4mW0+TEnN91t3limcqxOeoLS3TqDbyejed6
oVIMmqAmhPjD6k/+c8+4n1uG0wMTrwBU7W1AzINlBAFA8BDBZwGCvsExwfcPEe/uG48BqL776R/1
UDCNvrl26Ai8w24vUCjSymEVc1jTRSgXWKgco9Gs0K23qM3NUz06T2u5gt1p4zoO0tWDIQIp+K4Q
1q7qT/7z0LgfWYbTB5OvACCky2aOP2IAqqpOWBEDCHaIOvigl/JqDCClc09w2LDPvvFBzmhtOLfW
lL5u9EUQ6LPKeawNJbr0mD9xkF6nQ3NxhcrR49TmF+hUm3jdbpTei+AgeKuwim+s3vpRb/SryHAm
YB0oAL0PgNQEXk8Bqj9RJaAMWEK8338aA4h6+WhlwYaFT8/rj0b5pTGnVfLiWRYULKypItZMkcX6
AtXaIt1Wm/rcApUjczRPLGM3Wzi2HQ1XHl3BIYR4Ru2nn7p23E8pw+mJyVcAobuvdQuWvjWXAmNU
4CgPKI2v/ERf3tUZQNSzL+xqgNlzb/RansGqQJJyDGX1i3msmSL9vMeRxX10223aKyusHJmjdmyB
dqWG02n7vr7Rm1EgEB8GXlj76aca435EGU5fTL4CSHQEUos9tTak4erz4GEeQCr6r33fT+/ck9az
TwnYgA9yJoQ9pBuJq9aEX3VhlkGgz4JyAbGxzHJrhaXF4/TbXRrzC1QPH6O+sEiv3sKz+77wmweu
I8Qf1277rw+O+8lkOP0x8QogIgCqOEctDSBEGA5AuQAySPkFUTuT/seEX88AkDJ4R0pez+jRlyi6
M7sqIAGPML1HKYeYKmJPWRxfOkSrWadbrVI9Mkf1yHFaSxWcbhvXdf39tFJo4PtCiF212/7rwLif
S4bJwMQrgLCQJ1YJKIIYgCcFVsAQND2QGPZroOVHN+6xaF7C2EfKwahIUNV3EjVeiVm+kBeQs5Dl
AsyUqLlNFuaO0m+1qS8sUj10lMbcAt1qA7ffC9J7Rhu4IP5W5PKvr/3kk1mgL8PImHwFYHwaLOq+
q3oBqW8DSAEi538aLOriS2jdzQE99Oh9VN+PZKC/H41EYFp6c3tzCz9GYeEVc4jpInIqz9zKMWr1
Cr16ndrR41QPH6W1uIzd7OA6dtRnX6UaBYcR4ln12z/9zXE/igyTh8lXAEBEgxU1l1GnICtgyoEW
EGGlnsoG6Kk+ZeDDah/SOvcMyu2N3JtflSPkc1DKw3SRFj2Ozx+k22rRPLFE5dBh6sfmfKvf6eF5
TuAqGEf6GFgvqN/+37VxP4EMk4l1oACiIt2w6EWJorCizkB6/t+IA4hE0c+wnn3DriI+lwoh8CyB
zFnIqSJyY4H5+glWKifo15vUjs1ROXSU5vwJ7EYT17bTBudsIMTL67d/5gPjbv0Mk43JVwBmn3bS
egSGI/BYKggYp/9m2a/Zsy92vrQa/9SLMh0AGZQPS0tAMY+cKdApeBxbOEC73aCzuEz1wBGqR47T
WangdDpBek9zFwAh5PUgdtVv/8y+cTd9hsnH5CsA0JQARAl635cPhwEPRwf2txGk1/yHw3MNGL1n
TdcUBP8kEmkJZN7CnSrgbSiy1KlwYm6OfrNF/dgclQOHaQWBPs/uB1/hURAgcYG3S8nrG3d81hl3
k2dYH5h4BaB/xQfwE/0Kqi4otOgiqufHDPjpPftSP8gZO2vipzYZfXiCoh5ZzOFOFeiVLI4tH6HZ
rNJZrlA9cIRaEOhzOi1cxzVuIbi5I2A9q3HHZ78x7vbOsL4w8QogUgHR0N0Ghxf444AFXwdWbCBU
AsQ/zY0m3ynCHwq6jKbYKvDTi1II3JzAK+VxNpSoOS3m5o/RazZpHJuneuBQEOir4XX7weCc8bSm
+ARC/EHjjs9Wx93SGdYfJl8BKIEPB/CIdaEVqg9/jAGk9exbw+e19dPLMOyofoEn/PSeO1WgP5Pn
eGWeWm2JbqVG7dBhagcO01xYwm61gmG69CMKJLKJEH/avONz7x13E2dYv5h8BRD2AYg6AunpOE8N
xR0NADagW+/ahuZK5PiV3rH8QJ9XyuNMF6mLHsfnD9FptmjOzVPdf5D6kaP0Vmo4nV7wFR6t8MDH
DSB2Ne/43B3jbt0M6xvrQAGA0RFIL7JRI4SpJJoUUbdevTOPUbsbP256KU/kBqhAny/8bt7CmSrQ
nyky3zzBcmWRXq1G7eBRqgcO0ZpbwG7UcXs2nlRXh6pjcIH/C+Ivm3s/Z4+7VTOsf0y+AtC77OnL
FJUOYgBCxQKCYpq0T3MPOYkv5Jrfr0i/h8STAi8vcIs57A0FGnnJ0cUDdFp1WvOL1PYdpH7oCN3l
Fex20HvPi2IOwZUeQ4pnN/d94avjbtIMZw4mXwGA1hEo1vMmiOoLtL78ceEfJvvJOJ/GAHyF4FkC
ryBwygX6G4osdKqcWJyjV2tQP3yU6r79tI7N06/WcfX0nib9Aj6FEM9v7vvCyribMsOZhYlXAFHM
XMbYgCnVofAPSuvF03hS66YbYwCeDPL6QuAUctjTBTplwdGVo9TrFTonlqjuP0ht/2E6JxYDq++k
pfdaQog/a+774r+Nux0znJmYeAWgioCMbsGhydaT/PEyem1/NZiGHs2XMjqU0g9S+pRfgJezsEs5
+huKLDst5uaO0a03aBw5RnXfARqHj9OrVPB6aek9QPJDhHh6c98Xbxt3E2Y4czH5CkDrD6+pAXQr
H30MSKTtbebv9eo9zfJ7nsTD/86gk7ewpwv0ynmOVOeo1JboLFWoHzhIbf9B2vOLfh2/Y0d99oPz
SyE94B8EvKa570tZoC/DWLEOFAAY/XSFjPx7VRyU4uSH1l4F9YwpUAKe1Ep5QeYEdjFHb6ZITfY5
Mn+QdqNG8+g81b0H/PTe8gpeRw3OmXA15pDi2a0DX/7yuFssQwZYNwpAQYZ0X1cD0Vpd6CNvwUso
AKktA9cSODlBfzpPf7rA8cYJFldO0K5UaBw4RG3fQZpzC9i1Bq7TDz/EEaX3APg0iOe2Dnx5edyt
lCGDwjpTAGAU46slKt8fD+R5Ek96IcX313v+fND7xskJnJKgP12knvM4srCfVr1Ke26B6t4D1A4e
pru87PfeczSrH6X32sArWwe++s/jbpkMGeJYZwpAp/t6kU4g4J7/F88LLbwv+JESCIVfgFMQ2KU8
/ZkiC90V5ueO06nWqR8+RHXvAZpH5rDrddx+z/ziblSZeLMU1q72ga/8dNwtkyFDGtaZAtAgAemF
vrjrejieS851wRss+J4FnoB+IUd/Kk+nZHF4+RC16jKdhUWq+w5QO3CIzsISdruF57oILwryRakI
8S6kfHX74FeyQF+G0xbrUgHIoEzXEuC4Nnlh4UoHx3WQtmu4AKG/L/Ctft7CKeXpTRdZ7tWZO3aM
Tq1K49BRqnv30zx6jF6lhtPt4dfy6vWEEiTzCPH77YNf/cK42yFDhtWwrhSACPJ9+ZxFvmBRKBXo
tJuUp2foeS7CdbEcB8v1ok5DUuAJP9Bnl/0gX9NymFs8QL2+TGdxmdr+g9QOHKazsIjdauM6/UD4
0QbnlEj4jMB6bvvg15bG3RYZMoyCdacA8vkcpelpNm3ayMbpaTqNJvnpaboFgSckBTyE9Hz5tQRe
HryS5ZfylnLM1U9QWVmkW63SOHwk6MAzT79Sw+118VwJ0ov13pMdpHh15/DX/3HcbZAhw1ow8QpA
WX0rZ1EsFihPl9m0dQubt2xhqligXpmndNYWnGIee1OBfB6wPb9fUM7CK+Rwy3lq3TpLc8fp1Go0
j85RO3iI+pEjdJcr2M22323XSO+hvkD8IxC7Ooe+fuu42yJDhrViohWAlFJM3/MxWJagWCgwNT3F
prM2sWHLFqZmprGkh9toUK2cYPqsc8jPFOnPFP3qPOnR6/ZoNis0l5bp1uu0l5ZpHD5C49ARv5qv
1Qw+xAH6KENBek8ixbuRvKpz5Bv9cbdFhgwng4lWAAD5XA7LEhTKRWY2TDM1PUNpeopcqQiA1+3Q
rVaw8xaF6SksKweuS7/RpL5wguaJRVpLS3QWFmkvLNBZXMKpN6PBOoxPjYXpvQWJeG738Dc/N+77
z5DhVDDxCkAIyOfzlMslSqUpilMl8qUS+VIRkS/4Ef5eD7dSwVupIBwbr9elu7LCyv5DLB0+Tnul
gt1o4HTauD0HT7rgyoTsB7z/f5A8t3vkmyfGfe8ZMpwqJl4BIESlUCycVSqVKJSLFMpT5MslRKmM
VSoi8wXfdW92kN02tBo49Sbd5WVaBw7TOHyUXrON57pIz41G+9G+EhQMId5FiNd0j3zrXeO+5QwZ
7ixY476AU0Xeyu0vFAoUS2WKU2XypSK5colcuYQol5Clkm+97T6y3cZrNPFqDdxGE6vfB9vBdRxf
ARj9f6OKQgk/FoiHdY98OxP+DOsKE68ArHx+f6GQ961/yRd8q1RGFIvIYhHyeX/4LbsP/R5ur+en
8/p9CL6yG3USjncXlgDvQYiHdI5++0fjvtcMGe5srAMXQN7hSonI58gVi+RKZazA+nvFkj8CsN1H
9Hp43R6y28PpdrF7PVzHQaCPF2BgEXhu9+i1nx33LWbIcFdh4hnAlg3T7+91e/1+v4/MC0SpiCiW
kMUyFPJ+0U6/D71uYP37uL0edq+HY9tRRV8IAfAF4IHdo9/JhD/DusZEKwAhhLzjex/fb/edf61X
GnRaPVxAFvLIYgGEhbBd3/r3+tDr4XR94bc7Pfq9vp/q8w8GUAf+pHv0O0/qHv3OwrjvL0OGuxoT
rQDAVwLT2za/uV2rH1yeX6S2VKHd6eG4HtJxoN9FBvTf6fZwu1363T79Xo9+v+8P0S1E3xK8G9je
PXptFujLcMZAnPohTgNIKS5+4vPO6S6sfGxq29Zf23jPe7Dh4nswvWEDRc+Bdhuv3qBXr9Gt1mlV
6zRqNdqt9qLneR/dvHHDu/Zf/8m9Qgh56heTIcPkYH0oAAApxWXv/ECp9uH/eUFxeuaKwqaNj9y4
dXNxqlwi5zh4nQ5uu+14tr3f6dk3FS3xsde+7FmffdpvPsYmKA7OFECGMw3rRwEEkFKKN0Lh+//y
+W21g7fff7qQ35i3u+XpfKn5v5/x1J/e734XN7dBZzt0AQc1imAm/BnOQKw7BaDwV1JagHV/sDaA
mAru9bHgfQ28x4KbWfwMZzrWrQKIQ0oZfR0gE/wMGTJkyJAhQ4YMGTJkyJAhQ4YMGTJkyJAhQ4YM
GTJkyJAhQ4YMGTJkyJAhQ4YMGTJkyJAhQ4YMGTJkyJAhQ4YMGTJkyJAhQ4YMGTJkyJAhQ4YMpw3+
P7b90m9NA1NiAAAAX3RFWHRjb21tZW50AEFjdGlvbnMgbmV4dCBnbyB2aWV3IHN0YXJ0IHJlc3Vt
ZSBwYXVzZSBiYWNrIHBsYXkgZnJvbSBJY29uIEdhbGxlcnkgaHR0cDovL2ljb25nYWwuY29tL+UM
BrcAAAAldEVYdGRhdGU6Y3JlYXRlADIwMTEtMDgtMjFUMTQ6NDA6MDQtMDY6MDD0tkdsAAAAJXRF
WHRkYXRlOm1vZGlmeQAyMDExLTA4LTIxVDE0OjQwOjA0LTA2OjAwhev/0AAAAABJRU5ErkJggg==
</content>
  </attachment>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>cdf06514-3fae-4c41-be07-76d191fc97c5</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>require(['jquery'],function($){
/*
 * jQuery timepicker addon
 * By: Trent Richardson [http://trentrichardson.com]
 * Version 1.3.1
 * Last Modified: 07/07/2013
 *
 * Copyright 2013 Trent Richardson
 * You may use this project under MIT or GPL licenses.
 * http://trentrichardson.com/Impromptu/GPL-LICENSE.txt
 * http://trentrichardson.com/Impromptu/MIT-LICENSE.txt
 */

/*jslint evil: true, white: false, undef: false, nomen: false */

(function($) {

	/*
	* Lets not redefine timepicker, Prevent "Uncaught RangeError: Maximum call stack size exceeded"
	*/
	$.ui.timepicker = $.ui.timepicker || {};
	if ($.ui.timepicker.version) {
		return;
	}

	/*
	* Extend jQueryUI, get it started with our version number
	*/
	$.extend($.ui, {
		timepicker: {
			version: "1.3.1"
		}
	});

	/* 
	* Timepicker manager.
	* Use the singleton instance of this class, $.timepicker, to interact with the time picker.
	* Settings for (groups of) time pickers are maintained in an instance object,
	* allowing multiple different settings on the same page.
	*/
	var Timepicker = function() {
		this.regional = []; // Available regional settings, indexed by language code
		this.regional[''] = { // Default regional settings
			currentText: 'Now',
			closeText: 'Done',
			amNames: ['AM', 'A'],
			pmNames: ['PM', 'P'],
			timeFormat: 'HH:mm',
			timeSuffix: '',
			timeOnlyTitle: 'Choose Time',
			timeText: 'Time',
			hourText: 'Hour',
			minuteText: 'Minute',
			secondText: 'Second',
			millisecText: 'Millisecond',
			microsecText: 'Microsecond',
			timezoneText: 'Time Zone',
			isRTL: false
		};
		this._defaults = { // Global defaults for all the datetime picker instances
			showButtonPanel: true,
			timeOnly: false,
			showHour: null,
			showMinute: null,
			showSecond: null,
			showMillisec: null,
			showMicrosec: null,
			showTimezone: null,
			showTime: true,
			stepHour: 1,
			stepMinute: 1,
			stepSecond: 1,
			stepMillisec: 1,
			stepMicrosec: 1,
			hour: 0,
			minute: 0,
			second: 0,
			millisec: 0,
			microsec: 0,
			timezone: null,
			hourMin: 0,
			minuteMin: 0,
			secondMin: 0,
			millisecMin: 0,
			microsecMin: 0,
			hourMax: 23,
			minuteMax: 59,
			secondMax: 59,
			millisecMax: 999,
			microsecMax: 999,
			minDateTime: null,
			maxDateTime: null,
			onSelect: null,
			hourGrid: 0,
			minuteGrid: 0,
			secondGrid: 0,
			millisecGrid: 0,
			microsecGrid: 0,
			alwaysSetTime: true,
			separator: ' ',
			altFieldTimeOnly: true,
			altTimeFormat: null,
			altSeparator: null,
			altTimeSuffix: null,
			pickerTimeFormat: null,
			pickerTimeSuffix: null,
			showTimepicker: true,
			timezoneList: null,
			addSliderAccess: false,
			sliderAccessArgs: null,
			controlType: 'slider',
			defaultValue: null,
			parse: 'strict'
		};
		$.extend(this._defaults, this.regional['']);
	};

	$.extend(Timepicker.prototype, {
		$input: null,
		$altInput: null,
		$timeObj: null,
		inst: null,
		hour_slider: null,
		minute_slider: null,
		second_slider: null,
		millisec_slider: null,
		microsec_slider: null,
		timezone_select: null,
		hour: 0,
		minute: 0,
		second: 0,
		millisec: 0,
		microsec: 0,
		timezone: null,
		hourMinOriginal: null,
		minuteMinOriginal: null,
		secondMinOriginal: null,
		millisecMinOriginal: null,
		microsecMinOriginal: null,
		hourMaxOriginal: null,
		minuteMaxOriginal: null,
		secondMaxOriginal: null,
		millisecMaxOriginal: null,
		microsecMaxOriginal: null,
		ampm: '',
		formattedDate: '',
		formattedTime: '',
		formattedDateTime: '',
		timezoneList: null,
		units: ['hour','minute','second','millisec', 'microsec'],
		support: {},
		control: null,

		/* 
		* Override the default settings for all instances of the time picker.
		* @param  settings  object - the new settings to use as defaults (anonymous object)
		* @return the manager object
		*/
		setDefaults: function(settings) {
			extendRemove(this._defaults, settings || {});
			return this;
		},

		/*
		* Create a new Timepicker instance
		*/
		_newInst: function($input, opts) {
			var tp_inst = new Timepicker(),
				inlineSettings = {},
            	fns = {},
		    	overrides, i;

			for (var attrName in this._defaults) {
				if(this._defaults.hasOwnProperty(attrName)){
					var attrValue = $input.attr('time:' + attrName);
					if (attrValue) {
						try {
							inlineSettings[attrName] = eval(attrValue);
						} catch (err) {
							inlineSettings[attrName] = attrValue;
						}
					}
				}
			}

		    overrides = {
		        beforeShow: function (input, dp_inst) {
		            if ($.isFunction(tp_inst._defaults.evnts.beforeShow)) {
		                return tp_inst._defaults.evnts.beforeShow.call($input[0], input, dp_inst, tp_inst);
		            }
		        },
		        onChangeMonthYear: function (year, month, dp_inst) {
		            // Update the time as well : this prevents the time from disappearing from the $input field.
		            tp_inst._updateDateTime(dp_inst);
		            if ($.isFunction(tp_inst._defaults.evnts.onChangeMonthYear)) {
		                tp_inst._defaults.evnts.onChangeMonthYear.call($input[0], year, month, dp_inst, tp_inst);
		            }
		        },
		        onClose: function (dateText, dp_inst) {
		            if (tp_inst.timeDefined === true &amp;&amp; $input.val() !== '') {
		                tp_inst._updateDateTime(dp_inst);
		            }
		            if ($.isFunction(tp_inst._defaults.evnts.onClose)) {
		                tp_inst._defaults.evnts.onClose.call($input[0], dateText, dp_inst, tp_inst);
		            }
		        }
		    };
		    for (i in overrides) {
		        if (overrides.hasOwnProperty(i)) {
		            fns[i] = opts[i] || null;
		        }
		    }

		    tp_inst._defaults = $.extend({}, this._defaults, inlineSettings, opts, overrides, {
		        evnts:fns,
		        timepicker: tp_inst // add timepicker as a property of datepicker: $.datepicker._get(dp_inst, 'timepicker');
		    });
			tp_inst.amNames = $.map(tp_inst._defaults.amNames, function(val) {
				return val.toUpperCase();
			});
			tp_inst.pmNames = $.map(tp_inst._defaults.pmNames, function(val) {
				return val.toUpperCase();
			});

			// detect which units are supported
			tp_inst.support = detectSupport(
					tp_inst._defaults.timeFormat + 
					(tp_inst._defaults.pickerTimeFormat? tp_inst._defaults.pickerTimeFormat:'') + 
					(tp_inst._defaults.altTimeFormat? tp_inst._defaults.altTimeFormat:''));

			// controlType is string - key to our this._controls
			if(typeof(tp_inst._defaults.controlType) === 'string'){
				if(tp_inst._defaults.controlType == 'slider' &amp;&amp; typeof(jQuery.ui.slider) === 'undefined'){
					tp_inst._defaults.controlType = 'select';
				}
				tp_inst.control = tp_inst._controls[tp_inst._defaults.controlType];
			}
			// controlType is an object and must implement create, options, value methods
			else{ 
				tp_inst.control = tp_inst._defaults.controlType;
			}

			// prep the timezone options
			var timezoneList = [-720,-660,-600,-570,-540,-480,-420,-360,-300,-270,-240,-210,-180,-120,-60,
					0,60,120,180,210,240,270,300,330,345,360,390,420,480,525,540,570,600,630,660,690,720,765,780,840];
			if (tp_inst._defaults.timezoneList !== null) {
				timezoneList = tp_inst._defaults.timezoneList;
			}
			var tzl=timezoneList.length,tzi=0,tzv=null;
			if (tzl &gt; 0 &amp;&amp; typeof timezoneList[0] !== 'object') {
				for(; tzi&lt;tzl; tzi++){
					tzv = timezoneList[tzi];
					timezoneList[tzi] = { value: tzv, label: $.timepicker.timezoneOffsetString(tzv, tp_inst.support.iso8601) };
				}
			}
			tp_inst._defaults.timezoneList = timezoneList;

			// set the default units
			tp_inst.timezone = tp_inst._defaults.timezone !== null? $.timepicker.timezoneOffsetNumber(tp_inst._defaults.timezone) : 
							((new Date()).getTimezoneOffset()*-1);
			tp_inst.hour = tp_inst._defaults.hour &lt; tp_inst._defaults.hourMin? tp_inst._defaults.hourMin : 
							tp_inst._defaults.hour &gt; tp_inst._defaults.hourMax? tp_inst._defaults.hourMax : tp_inst._defaults.hour;
			tp_inst.minute = tp_inst._defaults.minute &lt; tp_inst._defaults.minuteMin? tp_inst._defaults.minuteMin : 
							tp_inst._defaults.minute &gt; tp_inst._defaults.minuteMax? tp_inst._defaults.minuteMax : tp_inst._defaults.minute;
			tp_inst.second = tp_inst._defaults.second &lt; tp_inst._defaults.secondMin? tp_inst._defaults.secondMin : 
							tp_inst._defaults.second &gt; tp_inst._defaults.secondMax? tp_inst._defaults.secondMax : tp_inst._defaults.second;
			tp_inst.millisec = tp_inst._defaults.millisec &lt; tp_inst._defaults.millisecMin? tp_inst._defaults.millisecMin : 
							tp_inst._defaults.millisec &gt; tp_inst._defaults.millisecMax? tp_inst._defaults.millisecMax : tp_inst._defaults.millisec;
			tp_inst.microsec = tp_inst._defaults.microsec &lt; tp_inst._defaults.microsecMin? tp_inst._defaults.microsecMin : 
							tp_inst._defaults.microsec &gt; tp_inst._defaults.microsecMax? tp_inst._defaults.microsecMax : tp_inst._defaults.microsec;
			tp_inst.ampm = '';
			tp_inst.$input = $input;

			if (tp_inst._defaults.altField) {
				tp_inst.$altInput = $(tp_inst._defaults.altField).css({
					cursor: 'pointer'
				}).focus(function() {
					$input.trigger("focus");
				});
			}

			if (tp_inst._defaults.minDate === 0 || tp_inst._defaults.minDateTime === 0) {
				tp_inst._defaults.minDate = new Date();
			}
			if (tp_inst._defaults.maxDate === 0 || tp_inst._defaults.maxDateTime === 0) {
				tp_inst._defaults.maxDate = new Date();
			}

			// datepicker needs minDate/maxDate, timepicker needs minDateTime/maxDateTime..
			if (tp_inst._defaults.minDate !== undefined &amp;&amp; tp_inst._defaults.minDate instanceof Date) {
				tp_inst._defaults.minDateTime = new Date(tp_inst._defaults.minDate.getTime());
			}
			if (tp_inst._defaults.minDateTime !== undefined &amp;&amp; tp_inst._defaults.minDateTime instanceof Date) {
				tp_inst._defaults.minDate = new Date(tp_inst._defaults.minDateTime.getTime());
			}
			if (tp_inst._defaults.maxDate !== undefined &amp;&amp; tp_inst._defaults.maxDate instanceof Date) {
				tp_inst._defaults.maxDateTime = new Date(tp_inst._defaults.maxDate.getTime());
			}
			if (tp_inst._defaults.maxDateTime !== undefined &amp;&amp; tp_inst._defaults.maxDateTime instanceof Date) {
				tp_inst._defaults.maxDate = new Date(tp_inst._defaults.maxDateTime.getTime());
			}
			tp_inst.$input.bind('focus', function() {
				tp_inst._onFocus();
			});

			return tp_inst;
		},

		/*
		* add our sliders to the calendar
		*/
		_addTimePicker: function(dp_inst) {
			var currDT = (this.$altInput &amp;&amp; this._defaults.altFieldTimeOnly) ? this.$input.val() + ' ' + this.$altInput.val() : this.$input.val();

			this.timeDefined = this._parseTime(currDT);
			this._limitMinMaxDateTime(dp_inst, false);
			this._injectTimePicker();
		},

		/*
		* parse the time string from input value or _setTime
		*/
		_parseTime: function(timeString, withDate) {
			if (!this.inst) {
				this.inst = $.datepicker._getInst(this.$input[0]);
			}

			if (withDate || !this._defaults.timeOnly) {
				var dp_dateFormat = $.datepicker._get(this.inst, 'dateFormat');
				try {
					var parseRes = parseDateTimeInternal(dp_dateFormat, this._defaults.timeFormat, timeString, $.datepicker._getFormatConfig(this.inst), this._defaults);
					if (!parseRes.timeObj) {
						return false;
					}
					$.extend(this, parseRes.timeObj);
				} catch (err) {
					$.timepicker.log("Error parsing the date/time string: " + err +
									"\ndate/time string = " + timeString +
									"\ntimeFormat = " + this._defaults.timeFormat +
									"\ndateFormat = " + dp_dateFormat);
					return false;
				}
				return true;
			} else {
				var timeObj = $.datepicker.parseTime(this._defaults.timeFormat, timeString, this._defaults);
				if (!timeObj) {
					return false;
				}
				$.extend(this, timeObj);
				return true;
			}
		},

		/*
		* generate and inject html for timepicker into ui datepicker
		*/
		_injectTimePicker: function() {
			var $dp = this.inst.dpDiv,
				o = this.inst.settings,
				tp_inst = this,
				litem = '',
				uitem = '',
				show = null,
				max = {},
				gridSize = {},
				size = null,
				i=0,
				l=0;

			// Prevent displaying twice
			if ($dp.find("div.ui-timepicker-div").length === 0 &amp;&amp; o.showTimepicker) {
				var noDisplay = ' style="display:none;"',
					html = '&lt;div class="ui-timepicker-div'+ (o.isRTL? ' ui-timepicker-rtl' : '') +'"&gt;&lt;dl&gt;' + '&lt;dt class="ui_tpicker_time_label"' + ((o.showTime) ? '' : noDisplay) + '&gt;' + o.timeText + '&lt;/dt&gt;' + 
								'&lt;dd class="ui_tpicker_time"' + ((o.showTime) ? '' : noDisplay) + '&gt;&lt;/dd&gt;';

				// Create the markup
				for(i=0,l=this.units.length; i&lt;l; i++){
					litem = this.units[i];
					uitem = litem.substr(0,1).toUpperCase() + litem.substr(1);
					show = o['show'+uitem] !== null? o['show'+uitem] : this.support[litem];

					// Added by Peter Medeiros:
					// - Figure out what the hour/minute/second max should be based on the step values.
					// - Example: if stepMinute is 15, then minMax is 45.
					max[litem] = parseInt((o[litem+'Max'] - ((o[litem+'Max'] - o[litem+'Min']) % o['step'+uitem])), 10);
					gridSize[litem] = 0;

					html += '&lt;dt class="ui_tpicker_'+ litem +'_label"' + (show ? '' : noDisplay) + '&gt;' + o[litem +'Text'] + '&lt;/dt&gt;' + 
								'&lt;dd class="ui_tpicker_'+ litem +'"&gt;&lt;div class="ui_tpicker_'+ litem +'_slider"' + (show ? '' : noDisplay) + '&gt;&lt;/div&gt;';

					if (show &amp;&amp; o[litem+'Grid'] &gt; 0) {
						html += '&lt;div style="padding-left: 1px"&gt;&lt;table class="ui-tpicker-grid-label"&gt;&lt;tr&gt;';

						if(litem == 'hour'){
							for (var h = o[litem+'Min']; h &lt;= max[litem]; h += parseInt(o[litem+'Grid'], 10)) {
								gridSize[litem]++;
								var tmph = $.datepicker.formatTime(this.support.ampm? 'hht':'HH', {hour:h}, o);									
								html += '&lt;td data-for="'+litem+'"&gt;' + tmph + '&lt;/td&gt;';
							}
						}
						else{
							for (var m = o[litem+'Min']; m &lt;= max[litem]; m += parseInt(o[litem+'Grid'], 10)) {
								gridSize[litem]++;
								html += '&lt;td data-for="'+litem+'"&gt;' + ((m &lt; 10) ? '0' : '') + m + '&lt;/td&gt;';
							}
						}

						html += '&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;';
					}
					html += '&lt;/dd&gt;';
				}
				
				// Timezone
				var showTz = o.showTimezone !== null? o.showTimezone : this.support.timezone;
				html += '&lt;dt class="ui_tpicker_timezone_label"' + (showTz ? '' : noDisplay) + '&gt;' + o.timezoneText + '&lt;/dt&gt;';
				html += '&lt;dd class="ui_tpicker_timezone" ' + (showTz ? '' : noDisplay) + '&gt;&lt;/dd&gt;';

				// Create the elements from string
				html += '&lt;/dl&gt;&lt;/div&gt;';
				var $tp = $(html);

				// if we only want time picker...
				if (o.timeOnly === true) {
					$tp.prepend('&lt;div class="ui-widget-header ui-helper-clearfix ui-corner-all"&gt;' + '&lt;div class="ui-datepicker-title"&gt;' + o.timeOnlyTitle + '&lt;/div&gt;' + '&lt;/div&gt;');
					$dp.find('.ui-datepicker-header, .ui-datepicker-calendar').hide();
				}
				
				// add sliders, adjust grids, add events
				for(i=0,l=tp_inst.units.length; i&lt;l; i++){
					litem = tp_inst.units[i];
					uitem = litem.substr(0,1).toUpperCase() + litem.substr(1);
					show = o['show'+uitem] !== null? o['show'+uitem] : this.support[litem];

					// add the slider
					tp_inst[litem+'_slider'] = tp_inst.control.create(tp_inst, $tp.find('.ui_tpicker_'+litem+'_slider'), litem, tp_inst[litem], o[litem+'Min'], max[litem], o['step'+uitem]);

					// adjust the grid and add click event
					if (show &amp;&amp; o[litem+'Grid'] &gt; 0) {
						size = 100 * gridSize[litem] * o[litem+'Grid'] / (max[litem] - o[litem+'Min']);
						$tp.find('.ui_tpicker_'+litem+' table').css({
							width: size + "%",
							marginLeft: o.isRTL? '0' : ((size / (-2 * gridSize[litem])) + "%"),
							marginRight: o.isRTL? ((size / (-2 * gridSize[litem])) + "%") : '0',
							borderCollapse: 'collapse'
						}).find("td").click(function(e){
								var $t = $(this),
									h = $t.html(),
									n = parseInt(h.replace(/[^0-9]/g),10),
									ap = h.replace(/[^apm]/ig),
									f = $t.data('for'); // loses scope, so we use data-for

								if(f == 'hour'){
									if(ap.indexOf('p') !== -1 &amp;&amp; n &lt; 12){
										n += 12;
									}
									else{
										if(ap.indexOf('a') !== -1 &amp;&amp; n === 12){
											n = 0;
										}
									}
								}
								
								tp_inst.control.value(tp_inst, tp_inst[f+'_slider'], litem, n);

								tp_inst._onTimeChange();
								tp_inst._onSelectHandler();
							}).css({
								cursor: 'pointer',
								width: (100 / gridSize[litem]) + '%',
								textAlign: 'center',
								overflow: 'hidden'
							});
					} // end if grid &gt; 0
				} // end for loop

				// Add timezone options
				this.timezone_select = $tp.find('.ui_tpicker_timezone').append('&lt;select&gt;&lt;/select&gt;').find("select");
				$.fn.append.apply(this.timezone_select,
				$.map(o.timezoneList, function(val, idx) {
					return $("&lt;option /&gt;").val(typeof val == "object" ? val.value : val).text(typeof val == "object" ? val.label : val);
				}));
				if (typeof(this.timezone) != "undefined" &amp;&amp; this.timezone !== null &amp;&amp; this.timezone !== "") {
					var local_timezone = (new Date(this.inst.selectedYear, this.inst.selectedMonth, this.inst.selectedDay, 12)).getTimezoneOffset()*-1;
					if (local_timezone == this.timezone) {
						selectLocalTimezone(tp_inst);
					} else {
						this.timezone_select.val(this.timezone);
					}
				} else {
					if (typeof(this.hour) != "undefined" &amp;&amp; this.hour !== null &amp;&amp; this.hour !== "") {
						this.timezone_select.val(o.timezone);
					} else {
						selectLocalTimezone(tp_inst);
					}
				}
				this.timezone_select.change(function() {
					tp_inst._onTimeChange();
					tp_inst._onSelectHandler();
				});
				// End timezone options
				
				// inject timepicker into datepicker
				var $buttonPanel = $dp.find('.ui-datepicker-buttonpane');
				if ($buttonPanel.length) {
					$buttonPanel.before($tp);
				} else {
					$dp.append($tp);
				}

				this.$timeObj = $tp.find('.ui_tpicker_time');

				if (this.inst !== null) {
					var timeDefined = this.timeDefined;
					this._onTimeChange();
					this.timeDefined = timeDefined;
				}

				// slideAccess integration: http://trentrichardson.com/2011/11/11/jquery-ui-sliders-and-touch-accessibility/
				if (this._defaults.addSliderAccess) {
					var sliderAccessArgs = this._defaults.sliderAccessArgs,
						rtl = this._defaults.isRTL;
					sliderAccessArgs.isRTL = rtl;
						
					setTimeout(function() { // fix for inline mode
						if ($tp.find('.ui-slider-access').length === 0) {
							$tp.find('.ui-slider:visible').sliderAccess(sliderAccessArgs);

							// fix any grids since sliders are shorter
							var sliderAccessWidth = $tp.find('.ui-slider-access:eq(0)').outerWidth(true);
							if (sliderAccessWidth) {
								$tp.find('table:visible').each(function() {
									var $g = $(this),
										oldWidth = $g.outerWidth(),
										oldMarginLeft = $g.css(rtl? 'marginRight':'marginLeft').toString().replace('%', ''),
										newWidth = oldWidth - sliderAccessWidth,
										newMarginLeft = ((oldMarginLeft * newWidth) / oldWidth) + '%',
										css = { width: newWidth, marginRight: 0, marginLeft: 0 };
									css[rtl? 'marginRight':'marginLeft'] = newMarginLeft;
									$g.css(css);
								});
							}
						}
					}, 10);
				}
				// end slideAccess integration

				tp_inst._limitMinMaxDateTime(this.inst, true);
			}
		},

		/*
		* This function tries to limit the ability to go outside the
		* min/max date range
		*/
		_limitMinMaxDateTime: function(dp_inst, adjustSliders) {
			var o = this._defaults,
				dp_date = new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay);

			if (!this._defaults.showTimepicker) {
				return;
			} // No time so nothing to check here

			if ($.datepicker._get(dp_inst, 'minDateTime') !== null &amp;&amp; $.datepicker._get(dp_inst, 'minDateTime') !== undefined &amp;&amp; dp_date) {
				var minDateTime = $.datepicker._get(dp_inst, 'minDateTime'),
					minDateTimeDate = new Date(minDateTime.getFullYear(), minDateTime.getMonth(), minDateTime.getDate(), 0, 0, 0, 0);

				if (this.hourMinOriginal === null || this.minuteMinOriginal === null || this.secondMinOriginal === null || this.millisecMinOriginal === null || this.microsecMinOriginal === null) {
					this.hourMinOriginal = o.hourMin;
					this.minuteMinOriginal = o.minuteMin;
					this.secondMinOriginal = o.secondMin;
					this.millisecMinOriginal = o.millisecMin;
					this.microsecMinOriginal = o.microsecMin;
				}

				if (dp_inst.settings.timeOnly || minDateTimeDate.getTime() == dp_date.getTime()) {
					this._defaults.hourMin = minDateTime.getHours();
					if (this.hour &lt;= this._defaults.hourMin) {
						this.hour = this._defaults.hourMin;
						this._defaults.minuteMin = minDateTime.getMinutes();
						if (this.minute &lt;= this._defaults.minuteMin) {
							this.minute = this._defaults.minuteMin;
							this._defaults.secondMin = minDateTime.getSeconds();
							if (this.second &lt;= this._defaults.secondMin) {
								this.second = this._defaults.secondMin;
								this._defaults.millisecMin = minDateTime.getMilliseconds();
								if(this.millisec &lt;= this._defaults.millisecMin) {
									this.millisec = this._defaults.millisecMin;
									this._defaults.microsecMin = minDateTime.getMicroseconds();
								} else {
									if (this.microsec &lt; this._defaults.microsecMin) {
										this.microsec = this._defaults.microsecMin;
									}
									this._defaults.microsecMin = this.microsecMinOriginal;
								}
							} else {
								this._defaults.millisecMin = this.millisecMinOriginal;
								this._defaults.microsecMin = this.microsecMinOriginal;
							}
						} else {
							this._defaults.secondMin = this.secondMinOriginal;
							this._defaults.millisecMin = this.millisecMinOriginal;
							this._defaults.microsecMin = this.microsecMinOriginal;
						}
					} else {
						this._defaults.minuteMin = this.minuteMinOriginal;
						this._defaults.secondMin = this.secondMinOriginal;
						this._defaults.millisecMin = this.millisecMinOriginal;
						this._defaults.microsecMin = this.microsecMinOriginal;
					}
				} else {
					this._defaults.hourMin = this.hourMinOriginal;
					this._defaults.minuteMin = this.minuteMinOriginal;
					this._defaults.secondMin = this.secondMinOriginal;
					this._defaults.millisecMin = this.millisecMinOriginal;
					this._defaults.microsecMin = this.microsecMinOriginal;
				}
			}

			if ($.datepicker._get(dp_inst, 'maxDateTime') !== null &amp;&amp; $.datepicker._get(dp_inst, 'maxDateTime') !== undefined &amp;&amp; dp_date) {
				var maxDateTime = $.datepicker._get(dp_inst, 'maxDateTime'),
					maxDateTimeDate = new Date(maxDateTime.getFullYear(), maxDateTime.getMonth(), maxDateTime.getDate(), 0, 0, 0, 0);

				if (this.hourMaxOriginal === null || this.minuteMaxOriginal === null || this.secondMaxOriginal === null || this.millisecMaxOriginal === null) {
					this.hourMaxOriginal = o.hourMax;
					this.minuteMaxOriginal = o.minuteMax;
					this.secondMaxOriginal = o.secondMax;
					this.millisecMaxOriginal = o.millisecMax;
					this.microsecMaxOriginal = o.microsecMax;
				}

				if (dp_inst.settings.timeOnly || maxDateTimeDate.getTime() == dp_date.getTime()) {
					this._defaults.hourMax = maxDateTime.getHours();
					if (this.hour &gt;= this._defaults.hourMax) {
						this.hour = this._defaults.hourMax;
						this._defaults.minuteMax = maxDateTime.getMinutes();
						if (this.minute &gt;= this._defaults.minuteMax) {
							this.minute = this._defaults.minuteMax;
							this._defaults.secondMax = maxDateTime.getSeconds();
							if (this.second &gt;= this._defaults.secondMax) {
								this.second = this._defaults.secondMax;
								this._defaults.millisecMax = maxDateTime.getMilliseconds();
								if (this.millisec &gt;= this._defaults.millisecMax) {
									this.millisec = this._defaults.millisecMax;
									this._defaults.microsecMax = maxDateTime.getMicroseconds();
								} else {
									if (this.microsec &gt; this._defaults.microsecMax) {
										this.microsec = this._defaults.microsecMax;
									}
									this._defaults.microsecMax = this.microsecMaxOriginal;
								}
							} else {
								this._defaults.millisecMax = this.millisecMaxOriginal;
								this._defaults.microsecMax = this.microsecMaxOriginal;
							}
						} else {
							this._defaults.secondMax = this.secondMaxOriginal;
							this._defaults.millisecMax = this.millisecMaxOriginal;
							this._defaults.microsecMax = this.microsecMaxOriginal;
						}
					} else {
						this._defaults.minuteMax = this.minuteMaxOriginal;
						this._defaults.secondMax = this.secondMaxOriginal;
						this._defaults.millisecMax = this.millisecMaxOriginal;
						this._defaults.microsecMax = this.microsecMaxOriginal;
					}
				} else {
					this._defaults.hourMax = this.hourMaxOriginal;
					this._defaults.minuteMax = this.minuteMaxOriginal;
					this._defaults.secondMax = this.secondMaxOriginal;
					this._defaults.millisecMax = this.millisecMaxOriginal;
					this._defaults.microsecMax = this.microsecMaxOriginal;
				}
			}

			if (adjustSliders !== undefined &amp;&amp; adjustSliders === true) {
				var hourMax = parseInt((this._defaults.hourMax - ((this._defaults.hourMax - this._defaults.hourMin) % this._defaults.stepHour)), 10),
					minMax = parseInt((this._defaults.minuteMax - ((this._defaults.minuteMax - this._defaults.minuteMin) % this._defaults.stepMinute)), 10),
					secMax = parseInt((this._defaults.secondMax - ((this._defaults.secondMax - this._defaults.secondMin) % this._defaults.stepSecond)), 10),
					millisecMax = parseInt((this._defaults.millisecMax - ((this._defaults.millisecMax - this._defaults.millisecMin) % this._defaults.stepMillisec)), 10);
					microsecMax = parseInt((this._defaults.microsecMax - ((this._defaults.microsecMax - this._defaults.microsecMin) % this._defaults.stepMicrosec)), 10);

				if (this.hour_slider) {
					this.control.options(this, this.hour_slider, 'hour', { min: this._defaults.hourMin, max: hourMax });
					this.control.value(this, this.hour_slider, 'hour', this.hour - (this.hour % this._defaults.stepHour));
				}
				if (this.minute_slider) {
					this.control.options(this, this.minute_slider, 'minute', { min: this._defaults.minuteMin, max: minMax });
					this.control.value(this, this.minute_slider, 'minute', this.minute - (this.minute % this._defaults.stepMinute));
				}
				if (this.second_slider) {
					this.control.options(this, this.second_slider, 'second', { min: this._defaults.secondMin, max: secMax });
					this.control.value(this, this.second_slider, 'second', this.second - (this.second % this._defaults.stepSecond));
				}
				if (this.millisec_slider) {
					this.control.options(this, this.millisec_slider, 'millisec', { min: this._defaults.millisecMin, max: millisecMax });
					this.control.value(this, this.millisec_slider, 'millisec', this.millisec - (this.millisec % this._defaults.stepMillisec));
				}
				if (this.microsec_slider) {
					this.control.options(this, this.microsec_slider, 'microsec', { min: this._defaults.microsecMin, max: microsecMax });
					this.control.value(this, this.microsec_slider, 'microsec', this.microsec - (this.microsec % this._defaults.stepMicrosec));
				}
			}

		},

		/*
		* when a slider moves, set the internal time...
		* on time change is also called when the time is updated in the text field
		*/
		_onTimeChange: function() {
			var hour = (this.hour_slider) ? this.control.value(this, this.hour_slider, 'hour') : false,
				minute = (this.minute_slider) ? this.control.value(this, this.minute_slider, 'minute') : false,
				second = (this.second_slider) ? this.control.value(this, this.second_slider, 'second') : false,
				millisec = (this.millisec_slider) ? this.control.value(this, this.millisec_slider, 'millisec') : false,
				microsec = (this.microsec_slider) ? this.control.value(this, this.microsec_slider, 'microsec') : false,
				timezone = (this.timezone_select) ? this.timezone_select.val() : false,
				o = this._defaults,
				pickerTimeFormat = o.pickerTimeFormat || o.timeFormat,
				pickerTimeSuffix = o.pickerTimeSuffix || o.timeSuffix;

			if (typeof(hour) == 'object') {
				hour = false;
			}
			if (typeof(minute) == 'object') {
				minute = false;
			}
			if (typeof(second) == 'object') {
				second = false;
			}
			if (typeof(millisec) == 'object') {
				millisec = false;
			}
			if (typeof(microsec) == 'object') {
				microsec = false;
			}
			if (typeof(timezone) == 'object') {
				timezone = false;
			}

			if (hour !== false) {
				hour = parseInt(hour, 10);
			}
			if (minute !== false) {
				minute = parseInt(minute, 10);
			}
			if (second !== false) {
				second = parseInt(second, 10);
			}
			if (millisec !== false) {
				millisec = parseInt(millisec, 10);
			}
			if (microsec !== false) {
				microsec = parseInt(microsec, 10);
			}

			var ampm = o[hour &lt; 12 ? 'amNames' : 'pmNames'][0];

			// If the update was done in the input field, the input field should not be updated.
			// If the update was done using the sliders, update the input field.
			var hasChanged = (hour != this.hour || minute != this.minute || second != this.second || millisec != this.millisec || microsec != this.microsec 
								|| (this.ampm.length &gt; 0 &amp;&amp; (hour &lt; 12) != ($.inArray(this.ampm.toUpperCase(), this.amNames) !== -1)) 
								|| (this.timezone !== null &amp;&amp; timezone != this.timezone));

			if (hasChanged) {

				if (hour !== false) {
					this.hour = hour;
				}
				if (minute !== false) {
					this.minute = minute;
				}
				if (second !== false) {
					this.second = second;
				}
				if (millisec !== false) {
					this.millisec = millisec;
				}
				if (microsec !== false) {
					this.microsec = microsec;
				}
				if (timezone !== false) {
					this.timezone = timezone;
				}

				if (!this.inst) {
					this.inst = $.datepicker._getInst(this.$input[0]);
				}

				this._limitMinMaxDateTime(this.inst, true);
			}
			if (this.support.ampm) {
				this.ampm = ampm;
			}

			// Updates the time within the timepicker
			this.formattedTime = $.datepicker.formatTime(o.timeFormat, this, o);
			if (this.$timeObj) {
				if(pickerTimeFormat === o.timeFormat){
					this.$timeObj.text(this.formattedTime + pickerTimeSuffix);
				}
				else{
					this.$timeObj.text($.datepicker.formatTime(pickerTimeFormat, this, o) + pickerTimeSuffix);
				}
			}

			this.timeDefined = true;
			if (hasChanged) {
				this._updateDateTime();
			}
		},

		/*
		* call custom onSelect.
		* bind to sliders slidestop, and grid click.
		*/
		_onSelectHandler: function() {
			var onSelect = this._defaults.onSelect || this.inst.settings.onSelect;
			var inputEl = this.$input ? this.$input[0] : null;
			if (onSelect &amp;&amp; inputEl) {
				onSelect.apply(inputEl, [this.formattedDateTime, this]);
			}
		},

		/*
		* update our input with the new date time..
		*/
		_updateDateTime: function(dp_inst) {
			dp_inst = this.inst || dp_inst;
			//var dt = $.datepicker._daylightSavingAdjust(new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay)),
			var dt = $.datepicker._daylightSavingAdjust(new Date(dp_inst.currentYear, dp_inst.currentMonth, dp_inst.currentDay)),
				dateFmt = $.datepicker._get(dp_inst, 'dateFormat'),
				formatCfg = $.datepicker._getFormatConfig(dp_inst),
				timeAvailable = dt !== null &amp;&amp; this.timeDefined;
			this.formattedDate = $.datepicker.formatDate(dateFmt, (dt === null ? new Date() : dt), formatCfg);
			var formattedDateTime = this.formattedDate;
			
			// if a slider was changed but datepicker doesn't have a value yet, set it
			if(dp_inst.lastVal===""){
                dp_inst.currentYear=dp_inst.selectedYear;
                dp_inst.currentMonth=dp_inst.selectedMonth;
                dp_inst.currentDay=dp_inst.selectedDay;
            }

			/*
			* remove following lines to force every changes in date picker to change the input value
			* Bug descriptions: when an input field has a default value, and click on the field to pop up the date picker. 
			* If the user manually empty the value in the input field, the date picker will never change selected value.
			*/
			//if (dp_inst.lastVal !== undefined &amp;&amp; (dp_inst.lastVal.length &gt; 0 &amp;&amp; this.$input.val().length === 0)) {
			//	return;
			//}

			if (this._defaults.timeOnly === true) {
				formattedDateTime = this.formattedTime;
			} else if (this._defaults.timeOnly !== true &amp;&amp; (this._defaults.alwaysSetTime || timeAvailable)) {
				formattedDateTime += this._defaults.separator + this.formattedTime + this._defaults.timeSuffix;
			}

			this.formattedDateTime = formattedDateTime;

			if (!this._defaults.showTimepicker) {
				this.$input.val(this.formattedDate);
			} else if (this.$altInput &amp;&amp; this._defaults.timeOnly === false &amp;&amp; this._defaults.altFieldTimeOnly === true) {
				this.$altInput.val(this.formattedTime);
				this.$input.val(this.formattedDate);
			} else if (this.$altInput) {
				this.$input.val(formattedDateTime);
				var altFormattedDateTime = '',
					altSeparator = this._defaults.altSeparator ? this._defaults.altSeparator : this._defaults.separator,
					altTimeSuffix = this._defaults.altTimeSuffix ? this._defaults.altTimeSuffix : this._defaults.timeSuffix;
				
				if(!this._defaults.timeOnly){
					if (this._defaults.altFormat){
						altFormattedDateTime = $.datepicker.formatDate(this._defaults.altFormat, (dt === null ? new Date() : dt), formatCfg);
					}
					else{
						altFormattedDateTime = this.formattedDate;
					}

					if (altFormattedDateTime){
						altFormattedDateTime += altSeparator;
					}
				}

				if(this._defaults.altTimeFormat){
					altFormattedDateTime += $.datepicker.formatTime(this._defaults.altTimeFormat, this, this._defaults) + altTimeSuffix;
				}
				else{
					altFormattedDateTime += this.formattedTime + altTimeSuffix;
				}
				this.$altInput.val(altFormattedDateTime);
			} else {
				this.$input.val(formattedDateTime);
			}

			this.$input.trigger("change");
		},

		_onFocus: function() {
			if (!this.$input.val() &amp;&amp; this._defaults.defaultValue) {
				this.$input.val(this._defaults.defaultValue);
				var inst = $.datepicker._getInst(this.$input.get(0)),
					tp_inst = $.datepicker._get(inst, 'timepicker');
				if (tp_inst) {
					if (tp_inst._defaults.timeOnly &amp;&amp; (inst.input.val() != inst.lastVal)) {
						try {
							$.datepicker._updateDatepicker(inst);
						} catch (err) {
							$.timepicker.log(err);
						}
					}
				}
			}
		},

		/*
		* Small abstraction to control types
		* We can add more, just be sure to follow the pattern: create, options, value
		*/
		_controls: {
			// slider methods
			slider: {
				create: function(tp_inst, obj, unit, val, min, max, step){
					var rtl = tp_inst._defaults.isRTL; // if rtl go -60-&gt;0 instead of 0-&gt;60
					return obj.prop('slide', null).slider({
						orientation: "horizontal",
						value: rtl? val*-1 : val,
						min: rtl? max*-1 : min,
						max: rtl? min*-1 : max,
						step: step,
						slide: function(event, ui) {
							tp_inst.control.value(tp_inst, $(this), unit, rtl? ui.value*-1:ui.value);
							tp_inst._onTimeChange();
						},
						stop: function(event, ui) {
							tp_inst._onSelectHandler();
						}
					});	
				},
				options: function(tp_inst, obj, unit, opts, val){
					if(tp_inst._defaults.isRTL){
						if(typeof(opts) == 'string'){
							if(opts == 'min' || opts == 'max'){
								if(val !== undefined){
									return obj.slider(opts, val*-1);
								}
								return Math.abs(obj.slider(opts));
							}
							return obj.slider(opts);
						}
						var min = opts.min, 
							max = opts.max;
						opts.min = opts.max = null;
						if(min !== undefined){
							opts.max = min * -1;
						}
						if(max !== undefined){
							opts.min = max * -1;
						}
						return obj.slider(opts);
					}
					if(typeof(opts) == 'string' &amp;&amp; val !== undefined){
							return obj.slider(opts, val);
					}
					return obj.slider(opts);
				},
				value: function(tp_inst, obj, unit, val){
					if(tp_inst._defaults.isRTL){
						if(val !== undefined){
							return obj.slider('value', val*-1);
						}
						return Math.abs(obj.slider('value'));
					}
					if(val !== undefined){
						return obj.slider('value', val);
					}
					return obj.slider('value');
				}
			},
			// select methods
			select: {
				create: function(tp_inst, obj, unit, val, min, max, step){
					var sel = '&lt;select class="ui-timepicker-select" data-unit="'+ unit +'" data-min="'+ min +'" data-max="'+ max +'" data-step="'+ step +'"&gt;',
						format = tp_inst._defaults.pickerTimeFormat || tp_inst._defaults.timeFormat;

					for(var i=min; i&lt;=max; i+=step){						
						sel += '&lt;option value="'+ i +'"'+ (i==val? ' selected':'') +'&gt;';
						if(unit == 'hour'){
							sel += $.datepicker.formatTime($.trim(format.replace(/[^ht ]/ig,'')), {hour:i}, tp_inst._defaults);
						}
						else if(unit == 'millisec' || unit == 'microsec' || i &gt;= 10){ sel += i; }
						else {sel += '0'+ i.toString(); }
						sel += '&lt;/option&gt;';
					}
					sel += '&lt;/select&gt;';

					obj.children('select').remove();

					$(sel).appendTo(obj).change(function(e){
						tp_inst._onTimeChange();
						tp_inst._onSelectHandler();
					});

					return obj;
				},
				options: function(tp_inst, obj, unit, opts, val){
					var o = {},
						$t = obj.children('select');
					if(typeof(opts) == 'string'){
						if(val === undefined){
							return $t.data(opts);
						}
						o[opts] = val;	
					}
					else{ o = opts; }
					return tp_inst.control.create(tp_inst, obj, $t.data('unit'), $t.val(), o.min || $t.data('min'), o.max || $t.data('max'), o.step || $t.data('step'));
				},
				value: function(tp_inst, obj, unit, val){
					var $t = obj.children('select');
					if(val !== undefined){
						return $t.val(val);
					}
					return $t.val();
				}
			}
		} // end _controls

	});

	$.fn.extend({
		/*
		* shorthand just to use timepicker..
		*/
		timepicker: function(o) {
			o = o || {};
			var tmp_args = Array.prototype.slice.call(arguments);

			if (typeof o == 'object') {
				tmp_args[0] = $.extend(o, {
					timeOnly: true
				});
			}

			return $(this).each(function() {
				$.fn.datetimepicker.apply($(this), tmp_args);
			});
		},

		/*
		* extend timepicker to datepicker
		*/
		datetimepicker: function(o) {
			o = o || {};
			var tmp_args = arguments;

			if (typeof(o) == 'string') {
				if (o == 'getDate') {
					return $.fn.datepicker.apply($(this[0]), tmp_args);
				} else {
					return this.each(function() {
						var $t = $(this);
						$t.datepicker.apply($t, tmp_args);
					});
				}
			} else {
				return this.each(function() {
					var $t = $(this);
					$t.datepicker($.timepicker._newInst($t, o)._defaults);
				});
			}
		}
	});

	/*
	* Public Utility to parse date and time
	*/
	$.datepicker.parseDateTime = function(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {
		var parseRes = parseDateTimeInternal(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings);
		if (parseRes.timeObj) {
			var t = parseRes.timeObj;
			parseRes.date.setHours(t.hour, t.minute, t.second, t.millisec);
			parseRes.date.setMicroseconds(t.microsec);
		}

		return parseRes.date;
	};

	/*
	* Public utility to parse time
	*/
	$.datepicker.parseTime = function(timeFormat, timeString, options) {		
		var o = extendRemove(extendRemove({}, $.timepicker._defaults), options || {}),
			iso8601 = (timeFormat.replace(/\'.*?\'/g,'').indexOf('Z') !== -1);

		// Strict parse requires the timeString to match the timeFormat exactly
		var strictParse = function(f, s, o){

			// pattern for standard and localized AM/PM markers
			var getPatternAmpm = function(amNames, pmNames) {
				var markers = [];
				if (amNames) {
					$.merge(markers, amNames);
				}
				if (pmNames) {
					$.merge(markers, pmNames);
				}
				markers = $.map(markers, function(val) {
					return val.replace(/[.*+?|()\[\]{}\\]/g, '\\$&amp;');
				});
				return '(' + markers.join('|') + ')?';
			};

			// figure out position of time elements.. cause js cant do named captures
			var getFormatPositions = function(timeFormat) {
				var finds = timeFormat.toLowerCase().match(/(h{1,2}|m{1,2}|s{1,2}|l{1}|c{1}|t{1,2}|z|'.*?')/g),
					orders = {
						h: -1,
						m: -1,
						s: -1,
						l: -1,
						c: -1,
						t: -1,
						z: -1
					};

				if (finds) {
					for (var i = 0; i &lt; finds.length; i++) {
						if (orders[finds[i].toString().charAt(0)] == -1) {
							orders[finds[i].toString().charAt(0)] = i + 1;
						}
					}
				}
				return orders;
			};

			var regstr = '^' + f.toString()
					.replace(/([hH]{1,2}|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g, function (match) {
							var ml = match.length;
							switch (match.charAt(0).toLowerCase()) {
								case 'h': return ml === 1? '(\\d?\\d)':'(\\d{'+ml+'})';
								case 'm': return ml === 1? '(\\d?\\d)':'(\\d{'+ml+'})';
								case 's': return ml === 1? '(\\d?\\d)':'(\\d{'+ml+'})';
								case 'l': return '(\\d?\\d?\\d)';
								case 'c': return '(\\d?\\d?\\d)';
								case 'z': return '(z|[-+]\\d\\d:?\\d\\d|\\S+)?';
								case 't': return getPatternAmpm(o.amNames, o.pmNames);
								default:    // literal escaped in quotes
									return '(' + match.replace(/\'/g, "").replace(/(\.|\$|\^|\\|\/|\(|\)|\[|\]|\?|\+|\*)/g, function (m) { return "\\" + m; }) + ')?';
							}
						})
					.replace(/\s/g, '\\s?') +
					o.timeSuffix + '$',
				order = getFormatPositions(f),
				ampm = '',
				treg;

			treg = s.match(new RegExp(regstr, 'i'));

			var resTime = {
				hour: 0,
				minute: 0,
				second: 0,
				millisec: 0,
				microsec: 0
			};

			if (treg) {
				if (order.t !== -1) {
					if (treg[order.t] === undefined || treg[order.t].length === 0) {
						ampm = '';
						resTime.ampm = '';
					} else {
						ampm = $.inArray(treg[order.t].toUpperCase(), o.amNames) !== -1 ? 'AM' : 'PM';
						resTime.ampm = o[ampm == 'AM' ? 'amNames' : 'pmNames'][0];
					}
				}

				if (order.h !== -1) {
					if (ampm == 'AM' &amp;&amp; treg[order.h] == '12') {
						resTime.hour = 0; // 12am = 0 hour
					} else {
						if (ampm == 'PM' &amp;&amp; treg[order.h] != '12') {
							resTime.hour = parseInt(treg[order.h], 10) + 12; // 12pm = 12 hour, any other pm = hour + 12
						} else {
							resTime.hour = Number(treg[order.h]);
						}
					}
				}

				if (order.m !== -1) {
					resTime.minute = Number(treg[order.m]);
				}
				if (order.s !== -1) {
					resTime.second = Number(treg[order.s]);
				}
				if (order.l !== -1) {
					resTime.millisec = Number(treg[order.l]);
				}
				if (order.c !== -1) {
					resTime.microsec = Number(treg[order.c]);
				}
				if (order.z !== -1 &amp;&amp; treg[order.z] !== undefined) {
					resTime.timezone = $.timepicker.timezoneOffsetNumber(treg[order.z]);
				}


				return resTime;
			}
			return false;
		};// end strictParse

		// First try JS Date, if that fails, use strictParse
		var looseParse = function(f,s,o){
			try{
				var d = new Date('2012-01-01 '+ s);
				if(isNaN(d.getTime())){
					d = new Date('2012-01-01T'+ s);
					if(isNaN(d.getTime())){
						d = new Date('01/01/2012 '+ s);
						if(isNaN(d.getTime())){
							throw "Unable to parse time with native Date: "+ s;
						}
					}
				}

				return {
					hour: d.getHours(),
					minute: d.getMinutes(),
					second: d.getSeconds(),
					millisec: d.getMilliseconds(),
					microsec: d.getMicroseconds(),
					timezone: d.getTimezoneOffset()*-1
				};
			}
			catch(err){
				try{
					return strictParse(f,s,o);
				}
				catch(err2){
					$.timepicker.log("Unable to parse \ntimeString: "+ s +"\ntimeFormat: "+ f);
				}				
			}
			return false;
		}; // end looseParse
		
		if(typeof o.parse === "function"){
			return o.parse(timeFormat, timeString, o);
		}
		if(o.parse === 'loose'){
			return looseParse(timeFormat, timeString, o);
		}
		return strictParse(timeFormat, timeString, o);
	};

	/*
	* Public utility to format the time
	* format = string format of the time
	* time = a {}, not a Date() for timezones
	* options = essentially the regional[].. amNames, pmNames, ampm
	*/
	$.datepicker.formatTime = function(format, time, options) {
		options = options || {};
		options = $.extend({}, $.timepicker._defaults, options);
		time = $.extend({
			hour: 0,
			minute: 0,
			second: 0,
			millisec: 0,
			timezone: 0
		}, time);

		var tmptime = format,
			ampmName = options.amNames[0],
			hour = parseInt(time.hour, 10);

		if (hour &gt; 11) {
			ampmName = options.pmNames[0];
		}

		tmptime = tmptime.replace(/(?:HH?|hh?|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|('.*?'|".*?"))/g, function(match) {
		switch (match) {
			case 'HH':
				return ('0' + hour).slice(-2);
			case 'H':
				return hour;
			case 'hh':
				return ('0' + convert24to12(hour)).slice(-2);
			case 'h':
				return convert24to12(hour);
			case 'mm':
				return ('0' + time.minute).slice(-2);
			case 'm':
				return time.minute;
			case 'ss':
				return ('0' + time.second).slice(-2);
			case 's':
				return time.second;
			case 'l':
				return ('00' + time.millisec).slice(-3);
			case 'c':
				return ('00' + time.microsec).slice(-3);
			case 'z':
				return $.timepicker.timezoneOffsetString(time.timezone === null? options.timezone : time.timezone, false);
			case 'Z':
				return $.timepicker.timezoneOffsetString(time.timezone === null? options.timezone : time.timezone, true);
			case 'T': 
				return ampmName.charAt(0).toUpperCase();
			case 'TT': 
				return ampmName.toUpperCase();
			case 't':
				return ampmName.charAt(0).toLowerCase();
			case 'tt':
				return ampmName.toLowerCase();
			default:
				return match.replace(/\'/g, "") || "'";
			}
		});

		tmptime = $.trim(tmptime);
		return tmptime;
	};

	/*
	* the bad hack :/ override datepicker so it doesnt close on select
	// inspired: http://stackoverflow.com/questions/1252512/jquery-datepicker-prevent-closing-picker-when-clicking-a-date/1762378#1762378
	*/
	$.datepicker._base_selectDate = $.datepicker._selectDate;
	$.datepicker._selectDate = function(id, dateStr) {
		var inst = this._getInst($(id)[0]),
			tp_inst = this._get(inst, 'timepicker');

		if (tp_inst) {
			tp_inst._limitMinMaxDateTime(inst, true);
			inst.inline = inst.stay_open = true;
			//This way the onSelect handler called from calendarpicker get the full dateTime
			this._base_selectDate(id, dateStr);
			inst.inline = inst.stay_open = false;
			this._notifyChange(inst);
			this._updateDatepicker(inst);
		} else {
			this._base_selectDate(id, dateStr);
		}
	};

	/*
	* second bad hack :/ override datepicker so it triggers an event when changing the input field
	* and does not redraw the datepicker on every selectDate event
	*/
	$.datepicker._base_updateDatepicker = $.datepicker._updateDatepicker;
	$.datepicker._updateDatepicker = function(inst) {

		// don't popup the datepicker if there is another instance already opened
		var input = inst.input[0];
		if ($.datepicker._curInst &amp;&amp; $.datepicker._curInst != inst &amp;&amp; $.datepicker._datepickerShowing &amp;&amp; $.datepicker._lastInput != input) {
			return;
		}

		if (typeof(inst.stay_open) !== 'boolean' || inst.stay_open === false) {

			this._base_updateDatepicker(inst);

			// Reload the time control when changing something in the input text field.
			var tp_inst = this._get(inst, 'timepicker');
			if (tp_inst) {
				tp_inst._addTimePicker(inst);
			}
		}
	};

	/*
	* third bad hack :/ override datepicker so it allows spaces and colon in the input field
	*/
	$.datepicker._base_doKeyPress = $.datepicker._doKeyPress;
	$.datepicker._doKeyPress = function(event) {
		var inst = $.datepicker._getInst(event.target),
			tp_inst = $.datepicker._get(inst, 'timepicker');

		if (tp_inst) {
			if ($.datepicker._get(inst, 'constrainInput')) {
				var ampm = tp_inst.support.ampm,
					tz = tp_inst._defaults.showTimezone !== null? tp_inst._defaults.showTimezone : tp_inst.support.timezone,					
					dateChars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat')),
					datetimeChars = tp_inst._defaults.timeFormat.toString()
											.replace(/[hms]/g, '')
											.replace(/TT/g, ampm ? 'APM' : '')
											.replace(/Tt/g, ampm ? 'AaPpMm' : '')
											.replace(/tT/g, ampm ? 'AaPpMm' : '')
											.replace(/T/g, ampm ? 'AP' : '')
											.replace(/tt/g, ampm ? 'apm' : '')
											.replace(/t/g, ampm ? 'ap' : '') + 
											" " + tp_inst._defaults.separator + 
											tp_inst._defaults.timeSuffix + 
											(tz ? tp_inst._defaults.timezoneList.join('') : '') + 
											(tp_inst._defaults.amNames.join('')) + (tp_inst._defaults.pmNames.join('')) + 
											dateChars,
					chr = String.fromCharCode(event.charCode === undefined ? event.keyCode : event.charCode);
				return event.ctrlKey || (chr &lt; ' ' || !dateChars || datetimeChars.indexOf(chr) &gt; -1);
			}
		}

		return $.datepicker._base_doKeyPress(event);
	};

	/*
	* Fourth bad hack :/ override _updateAlternate function used in inline mode to init altField
	*/
	$.datepicker._base_updateAlternate = $.datepicker._updateAlternate;
	/* Update any alternate field to synchronise with the main field. */
	$.datepicker._updateAlternate = function(inst) {
		var tp_inst = this._get(inst, 'timepicker');
		if(tp_inst){
			var altField = tp_inst._defaults.altField;
			if (altField) { // update alternate field too
				var altFormat = tp_inst._defaults.altFormat || tp_inst._defaults.dateFormat,
					date = this._getDate(inst),
					formatCfg = $.datepicker._getFormatConfig(inst),
					altFormattedDateTime = '', 
					altSeparator = tp_inst._defaults.altSeparator ? tp_inst._defaults.altSeparator : tp_inst._defaults.separator, 
					altTimeSuffix = tp_inst._defaults.altTimeSuffix ? tp_inst._defaults.altTimeSuffix : tp_inst._defaults.timeSuffix,
					altTimeFormat = tp_inst._defaults.altTimeFormat !== null ? tp_inst._defaults.altTimeFormat : tp_inst._defaults.timeFormat;
				
				altFormattedDateTime += $.datepicker.formatTime(altTimeFormat, tp_inst, tp_inst._defaults) + altTimeSuffix;
				if(!tp_inst._defaults.timeOnly &amp;&amp; !tp_inst._defaults.altFieldTimeOnly &amp;&amp; date !== null){
					if(tp_inst._defaults.altFormat){
						altFormattedDateTime = $.datepicker.formatDate(tp_inst._defaults.altFormat, date, formatCfg) + altSeparator + altFormattedDateTime;
					}
					else{
						altFormattedDateTime = tp_inst.formattedDate + altSeparator + altFormattedDateTime;
					}
				}
				$(altField).val(altFormattedDateTime);
			}
		}
		else{
			$.datepicker._base_updateAlternate(inst);
		}
	};

	/*
	* Override key up event to sync manual input changes.
	*/
	$.datepicker._base_doKeyUp = $.datepicker._doKeyUp;
	$.datepicker._doKeyUp = function(event) {
		var inst = $.datepicker._getInst(event.target),
			tp_inst = $.datepicker._get(inst, 'timepicker');

		if (tp_inst) {
			if (tp_inst._defaults.timeOnly &amp;&amp; (inst.input.val() != inst.lastVal)) {
				try {
					$.datepicker._updateDatepicker(inst);
				} catch (err) {
					$.timepicker.log(err);
				}
			}
		}

		return $.datepicker._base_doKeyUp(event);
	};

	/*
	* override "Today" button to also grab the time.
	*/
	$.datepicker._base_gotoToday = $.datepicker._gotoToday;
	$.datepicker._gotoToday = function(id) {
		var inst = this._getInst($(id)[0]),
			$dp = inst.dpDiv;
		this._base_gotoToday(id);
		var tp_inst = this._get(inst, 'timepicker');
		selectLocalTimezone(tp_inst);
		var now = new Date();
		this._setTime(inst, now);
		$('.ui-datepicker-today', $dp).click();
	};

	/*
	* Disable &amp; enable the Time in the datetimepicker
	*/
	$.datepicker._disableTimepickerDatepicker = function(target) {
		var inst = this._getInst(target);
		if (!inst) {
			return;
		}

		var tp_inst = this._get(inst, 'timepicker');
		$(target).datepicker('getDate'); // Init selected[Year|Month|Day]
		if (tp_inst) {
			tp_inst._defaults.showTimepicker = false;
			tp_inst._updateDateTime(inst);
		}
	};

	$.datepicker._enableTimepickerDatepicker = function(target) {
		var inst = this._getInst(target);
		if (!inst) {
			return;
		}

		var tp_inst = this._get(inst, 'timepicker');
		$(target).datepicker('getDate'); // Init selected[Year|Month|Day]
		if (tp_inst) {
			tp_inst._defaults.showTimepicker = true;
			tp_inst._addTimePicker(inst); // Could be disabled on page load
			tp_inst._updateDateTime(inst);
		}
	};

	/*
	* Create our own set time function
	*/
	$.datepicker._setTime = function(inst, date) {
		var tp_inst = this._get(inst, 'timepicker');
		if (tp_inst) {
			var defaults = tp_inst._defaults;

			// calling _setTime with no date sets time to defaults
			tp_inst.hour = date ? date.getHours() : defaults.hour;
			tp_inst.minute = date ? date.getMinutes() : defaults.minute;
			tp_inst.second = date ? date.getSeconds() : defaults.second;
			tp_inst.millisec = date ? date.getMilliseconds() : defaults.millisec;
			tp_inst.microsec = date ? date.getMicroseconds() : defaults.microsec;

			//check if within min/max times.. 
			tp_inst._limitMinMaxDateTime(inst, true);

			tp_inst._onTimeChange();
			tp_inst._updateDateTime(inst);
		}
	};

	/*
	* Create new public method to set only time, callable as $().datepicker('setTime', date)
	*/
	$.datepicker._setTimeDatepicker = function(target, date, withDate) {
		var inst = this._getInst(target);
		if (!inst) {
			return;
		}

		var tp_inst = this._get(inst, 'timepicker');

		if (tp_inst) {
			this._setDateFromField(inst);
			var tp_date;
			if (date) {
				if (typeof date == "string") {
					tp_inst._parseTime(date, withDate);
					tp_date = new Date();
					tp_date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);
					tp_date.setMicroseconds(tp_inst.microsec);
				} else {
					tp_date = new Date(date.getTime());
					tp_date.setMicroseconds(date.getMicroseconds());
				}
				if (tp_date.toString() == 'Invalid Date') {
					tp_date = undefined;
				}
				this._setTime(inst, tp_date);
			}
		}

	};

	/*
	* override setDate() to allow setting time too within Date object
	*/
	$.datepicker._base_setDateDatepicker = $.datepicker._setDateDatepicker;
	$.datepicker._setDateDatepicker = function(target, date) {
		var inst = this._getInst(target);
		if (!inst) {
			return;
		}

		if(typeof(date) === 'string'){
			date = new Date(date);
			if(!date.getTime()){
				$.timepicker.log("Error creating Date object from string.");
			}
		}

		var tp_inst = this._get(inst, 'timepicker');
		var tp_date;
		if (date instanceof Date) {
			tp_date = new Date(date.getTime());
			tp_date.setMicroseconds(date.getMicroseconds());
		} else {
			tp_date = date;
		}
		
		// This is important if you are using the timezone option, javascript's Date 
		// object will only return the timezone offset for the current locale, so we 
		// adjust it accordingly.  If not using timezone option this won't matter..
		// If a timezone is different in tp, keep the timezone as is
		if(tp_inst){
			// look out for DST if tz wasn't specified
			if(!tp_inst.support.timezone &amp;&amp; tp_inst._defaults.timezone === null){
				tp_inst.timezone = tp_date.getTimezoneOffset()*-1;
			}
			date = $.timepicker.timezoneAdjust(date, tp_inst.timezone);
			tp_date = $.timepicker.timezoneAdjust(tp_date, tp_inst.timezone);
		}

		this._updateDatepicker(inst);
		this._base_setDateDatepicker.apply(this, arguments);
		this._setTimeDatepicker(target, tp_date, true);
	};

	/*
	* override getDate() to allow getting time too within Date object
	*/
	$.datepicker._base_getDateDatepicker = $.datepicker._getDateDatepicker;
	$.datepicker._getDateDatepicker = function(target, noDefault) {
		var inst = this._getInst(target);
		if (!inst) {
			return;
		}

		var tp_inst = this._get(inst, 'timepicker');

		if (tp_inst) {
			// if it hasn't yet been defined, grab from field
			if(inst.lastVal === undefined){
				this._setDateFromField(inst, noDefault);
			}

			var date = this._getDate(inst);
			if (date &amp;&amp; tp_inst._parseTime($(target).val(), tp_inst.timeOnly)) {
				date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);
				date.setMicroseconds(tp_inst.microsec);

				// This is important if you are using the timezone option, javascript's Date 
				// object will only return the timezone offset for the current locale, so we 
				// adjust it accordingly.  If not using timezone option this won't matter..
				if(tp_inst.timezone != null){
					// look out for DST if tz wasn't specified
					if(!tp_inst.support.timezone &amp;&amp; tp_inst._defaults.timezone === null){
						tp_inst.timezone = date.getTimezoneOffset()*-1;
					}
					date = $.timepicker.timezoneAdjust(date, tp_inst.timezone);
				}
			}
			return date;
		}
		return this._base_getDateDatepicker(target, noDefault);
	};

	/*
	* override parseDate() because UI 1.8.14 throws an error about "Extra characters"
	* An option in datapicker to ignore extra format characters would be nicer.
	*/
	$.datepicker._base_parseDate = $.datepicker.parseDate;
	$.datepicker.parseDate = function(format, value, settings) {
		var date;
		try {
			date = this._base_parseDate(format, value, settings);
		} catch (err) {
			// Hack!  The error message ends with a colon, a space, and
			// the "extra" characters.  We rely on that instead of
			// attempting to perfectly reproduce the parsing algorithm.
			if (err.indexOf(":") &gt;= 0) {
				date = this._base_parseDate(format, value.substring(0,value.length-(err.length-err.indexOf(':')-2)), settings);
				$.timepicker.log("Error parsing the date string: " + err + "\ndate string = " + value + "\ndate format = " + format);
			} else {
				throw err;
			}
		}
		return date;
	};

	/*
	* override formatDate to set date with time to the input
	*/
	$.datepicker._base_formatDate = $.datepicker._formatDate;
	$.datepicker._formatDate = function(inst, day, month, year) {
		var tp_inst = this._get(inst, 'timepicker');
		if (tp_inst) {
			tp_inst._updateDateTime(inst);
			return tp_inst.$input.val();
		}
		return this._base_formatDate(inst);
	};

	/*
	* override options setter to add time to maxDate(Time) and minDate(Time). MaxDate
	*/
	$.datepicker._base_optionDatepicker = $.datepicker._optionDatepicker;
	$.datepicker._optionDatepicker = function(target, name, value) {
		var inst = this._getInst(target),
	        name_clone;
		if (!inst) {
			return null;
		}

		var tp_inst = this._get(inst, 'timepicker');
		if (tp_inst) {
			var min = null,
				max = null,
				onselect = null,
				overrides = tp_inst._defaults.evnts,
				fns = {},
				prop;
		    if (typeof name == 'string') { // if min/max was set with the string
		        if (name === 'minDate' || name === 'minDateTime') {
		            min = value;
		        } else if (name === 'maxDate' || name === 'maxDateTime') {
		            max = value;
		        } else if (name === 'onSelect') {
		            onselect = value;
		        } else if (overrides.hasOwnProperty(name)) {
		            if (typeof (value) === 'undefined') {
		                return overrides[name];
		            }
		            fns[name] = value;
		            name_clone = {}; //empty results in exiting function after overrides updated
		        }
		    } else if (typeof name == 'object') { //if min/max was set with the JSON
		        if (name.minDate) {
		            min = name.minDate;
		        } else if (name.minDateTime) {
		            min = name.minDateTime;
		        } else if (name.maxDate) {
		            max = name.maxDate;
		        } else if (name.maxDateTime) {
		            max = name.maxDateTime;
		        }
		        for (prop in overrides) {
		            if (overrides.hasOwnProperty(prop) &amp;&amp; name[prop]) {
		                fns[prop] = name[prop];
		            }
		        }
		    }
		    for (prop in fns) {
		        if (fns.hasOwnProperty(prop)) {
		            overrides[prop] = fns[prop];
		            if (!name_clone) { name_clone = $.extend({}, name);}
		            delete name_clone[prop];
		        }
		    }
		    if (name_clone &amp;&amp; isEmptyObject(name_clone)) { return; }
		    if (min) { //if min was set
		        if (min === 0) {
		            min = new Date();
		        } else {
		            min = new Date(min);
		        }
		        tp_inst._defaults.minDate = min;
		        tp_inst._defaults.minDateTime = min;
		    } else if (max) { //if max was set
		        if (max === 0) {
		            max = new Date();
		        } else {
		            max = new Date(max);
		        }
		        tp_inst._defaults.maxDate = max;
		        tp_inst._defaults.maxDateTime = max;
		    } else if (onselect) {
		        tp_inst._defaults.onSelect = onselect;
		    }
		}
		if (value === undefined) {
			return this._base_optionDatepicker.call($.datepicker, target, name);
		}
		return this._base_optionDatepicker.call($.datepicker, target, name_clone || name, value);
	};
	
	/*
	* jQuery isEmptyObject does not check hasOwnProperty - if someone has added to the object prototype,
	* it will return false for all objects
	*/
	var isEmptyObject = function(obj) {
		var prop;
		for (prop in obj) {
			if (obj.hasOwnProperty(obj)) {
				return false;
			}
		}
		return true;
	};

	/*
	* jQuery extend now ignores nulls!
	*/
	var extendRemove = function(target, props) {
		$.extend(target, props);
		for (var name in props) {
			if (props[name] === null || props[name] === undefined) {
				target[name] = props[name];
			}
		}
		return target;
	};

	/*
	* Determine by the time format which units are supported
	* Returns an object of booleans for each unit
	*/
	var detectSupport = function(timeFormat){
		var tf = timeFormat.replace(/\'.*?\'/g,'').toLowerCase(), // removes literals
			isIn = function(f, t){ // does the format contain the token?
					return f.indexOf(t) !== -1? true:false; 
				};
		return {
				hour: isIn(tf,'h'),
				minute: isIn(tf,'m'),
				second: isIn(tf,'s'),
				millisec: isIn(tf,'l'),
				microsec: isIn(tf,'c'),
				timezone: isIn(tf,'z'),
				ampm: isIn(tf,'t') &amp;&amp; isIn(timeFormat,'h'),
				iso8601: isIn(timeFormat, 'Z')
			};
	};

	/*
	* Converts 24 hour format into 12 hour
	* Returns 12 hour without leading 0
	*/
	var convert24to12 = function(hour) {
		if (hour &gt; 12) {
			hour = hour - 12;
		}

		if (hour === 0) {
			hour = 12;
		}

		return String(hour);
	};

	/*
	* Splits datetime string into date ans time substrings.
	* Throws exception when date can't be parsed
	* Returns [dateString, timeString]
	*/
	var splitDateTime = function(dateFormat, dateTimeString, dateSettings, timeSettings) {
		try {
			// The idea is to get the number separator occurances in datetime and the time format requested (since time has 
			// fewer unknowns, mostly numbers and am/pm). We will use the time pattern to split.
			var separator = timeSettings &amp;&amp; timeSettings.separator ? timeSettings.separator : $.timepicker._defaults.separator,
				format = timeSettings &amp;&amp; timeSettings.timeFormat ? timeSettings.timeFormat : $.timepicker._defaults.timeFormat,
				timeParts = format.split(separator), // how many occurances of separator may be in our format?
				timePartsLen = timeParts.length,
				allParts = dateTimeString.split(separator),
				allPartsLen = allParts.length;

			if (allPartsLen &gt; 1) {
				return [
						allParts.splice(0,allPartsLen-timePartsLen).join(separator),
						allParts.splice(0,timePartsLen).join(separator)
					];
			}

		} catch (err) {
			$.timepicker.log('Could not split the date from the time. Please check the following datetimepicker options' +
					"\nthrown error: " + err +
					"\ndateTimeString" + dateTimeString +
					"\ndateFormat = " + dateFormat +
					"\nseparator = " + timeSettings.separator +
					"\ntimeFormat = " + timeSettings.timeFormat);

			if (err.indexOf(":") &gt;= 0) {
				// Hack!  The error message ends with a colon, a space, and
				// the "extra" characters.  We rely on that instead of
				// attempting to perfectly reproduce the parsing algorithm.
				var dateStringLength = dateTimeString.length - (err.length - err.indexOf(':') - 2),
					timeString = dateTimeString.substring(dateStringLength);

				return [$.trim(dateTimeString.substring(0, dateStringLength)), $.trim(dateTimeString.substring(dateStringLength))];

			} else {
				throw err;
			}
		}
		return [dateTimeString, ''];
	};

	/*
	* Internal function to parse datetime interval
	* Returns: {date: Date, timeObj: Object}, where
	*   date - parsed date without time (type Date)
	*   timeObj = {hour: , minute: , second: , millisec: , microsec: } - parsed time. Optional
	*/
	var parseDateTimeInternal = function(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {
		var date;
		var splitRes = splitDateTime(dateFormat, dateTimeString, dateSettings, timeSettings);
		date = $.datepicker._base_parseDate(dateFormat, splitRes[0], dateSettings);
		if (splitRes[1] !== '') {
			var timeString = splitRes[1],
				parsedTime = $.datepicker.parseTime(timeFormat, timeString, timeSettings);

			if (parsedTime === null) {
				throw 'Wrong time format';
			}
			return {
				date: date,
				timeObj: parsedTime
			};
		} else {
			return {
				date: date
			};
		}
	};

	/*
	* Internal function to set timezone_select to the local timezone
	*/
	var selectLocalTimezone = function(tp_inst, date) {
		if (tp_inst &amp;&amp; tp_inst.timezone_select) {
			var now = typeof date !== 'undefined' ? date : new Date();
			tp_inst.timezone_select.val(now.getTimezoneOffset()*-1);
		}
	};

	/*
	* Create a Singleton Insance
	*/
	$.timepicker = new Timepicker();

	/**
	 * Get the timezone offset as string from a date object (eg '+0530' for UTC+5.5)
	 * @param  number if not a number this value is returned
	 * @param boolean if true formats in accordance to iso8601 "+12:45"
	 * @return string
	 */
	$.timepicker.timezoneOffsetString = function(tzMinutes, iso8601) {
		if(isNaN(tzMinutes) || tzMinutes &gt; 840){
			return tzMinutes;
		}

		var off = tzMinutes,
			minutes = off % 60,
			hours = (off - minutes) / 60,
			iso = iso8601? ':':'',
			tz = (off &gt;= 0 ? '+' : '-') + ('0' + (hours * 101).toString()).slice(-2) + iso + ('0' + (minutes * 101).toString()).slice(-2);
		
		if(tz == '+00:00'){
			return 'Z';
		}
		return tz;
	};

	/**
	 * Get the number in minutes that represents a timezone string
	 * @param  string formated like "+0500", "-1245"
	 * @return number
	 */
	$.timepicker.timezoneOffsetNumber = function(tzString) {
		tzString = tzString.toString().replace(':',''); // excuse any iso8601, end up with "+1245"

		if(tzString.toUpperCase() === 'Z'){ // if iso8601 with Z, its 0 minute offset
			return 0;
		}

		if(!/^(\-|\+)\d{4}$/.test(tzString)){ // possibly a user defined tz, so just give it back
			return tzString;
		}

		return ((tzString.substr(0,1) =='-'? -1 : 1) * // plus or minus
					((parseInt(tzString.substr(1,2),10)*60) + // hours (converted to minutes)
					parseInt(tzString.substr(3,2),10))); // minutes
	};

	/**
	 * No way to set timezone in js Date, so we must adjust the minutes to compensate. (think setDate, getDate)
	 * @param  date
	 * @param  string formated like "+0500", "-1245"
	 * @return date
	 */
	$.timepicker.timezoneAdjust = function(date, toTimezone) {
		var toTz = $.timepicker.timezoneOffsetNumber(toTimezone);
		if(!isNaN(toTz)){
			date.setMinutes(date.getMinutes()*1 + (date.getTimezoneOffset()*-1 - toTz*1) );
		}
		return date;
	};

	/**
	 * Calls `timepicker()` on the `startTime` and `endTime` elements, and configures them to
	 * enforce date range limits.
	 * n.b. The input value must be correctly formatted (reformatting is not supported)
	 * @param  Element startTime
	 * @param  Element endTime
	 * @param  obj options Options for the timepicker() call
	 * @return jQuery
	 */
	$.timepicker.timeRange = function(startTime, endTime, options) {
		return $.timepicker.handleRange('timepicker', startTime, endTime, options);
	};

	/**
	 * Calls `datetimepicker` on the `startTime` and `endTime` elements, and configures them to
	 * enforce date range limits.
	 * @param  Element startTime
	 * @param  Element endTime
	 * @param  obj options Options for the `timepicker()` call. Also supports `reformat`,
	 *   a boolean value that can be used to reformat the input values to the `dateFormat`.
	 * @param  string method Can be used to specify the type of picker to be added
	 * @return jQuery
	 */
	$.timepicker.datetimeRange = function(startTime, endTime, options) {
		$.timepicker.handleRange('datetimepicker', startTime, endTime, options);
	};

	/**
	 * Calls `method` on the `startTime` and `endTime` elements, and configures them to
	 * enforce date range limits.
	 * @param  Element startTime
	 * @param  Element endTime
	 * @param  obj options Options for the `timepicker()` call. Also supports `reformat`,
	 *   a boolean value that can be used to reformat the input values to the `dateFormat`.
	 * @return jQuery
	 */
	$.timepicker.dateRange = function(startTime, endTime, options) {
		$.timepicker.handleRange('datepicker', startTime, endTime, options);
	};

	/**
	 * Calls `method` on the `startTime` and `endTime` elements, and configures them to
	 * enforce date range limits.
	 * @param  string method Can be used to specify the type of picker to be added
	 * @param  Element startTime
	 * @param  Element endTime
	 * @param  obj options Options for the `timepicker()` call. Also supports `reformat`,
	 *   a boolean value that can be used to reformat the input values to the `dateFormat`.
	 * @return jQuery
	 */
	$.timepicker.handleRange = function(method, startTime, endTime, options) {
		options = $.extend({}, {
			minInterval: 0, // min allowed interval in milliseconds
			maxInterval: 0, // max allowed interval in milliseconds
			start: {},      // options for start picker
			end: {}         // options for end picker
		}, options);

		$.fn[method].call(startTime, $.extend({
			onClose: function(dateText, inst) {
				checkDates($(this), endTime);
			},
			onSelect: function(selectedDateTime) {
				selected($(this), endTime, 'minDate');
			}
		}, options, options.start));
		$.fn[method].call(endTime, $.extend({
			onClose: function(dateText, inst) {
				checkDates($(this), startTime);
			},
			onSelect: function(selectedDateTime) {
				selected($(this), startTime, 'maxDate');
			}
		}, options, options.end));

		checkDates(startTime, endTime);
		selected(startTime, endTime, 'minDate');
		selected(endTime, startTime, 'maxDate');

		function checkDates(changed, other) {
			var startdt = startTime[method]('getDate'),
				enddt = endTime[method]('getDate'),
				changeddt = changed[method]('getDate');

			if(startdt !== null){
				var minDate = new Date(startdt.getTime()),
					maxDate = new Date(startdt.getTime());

				minDate.setMilliseconds(minDate.getMilliseconds() + options.minInterval);
				maxDate.setMilliseconds(maxDate.getMilliseconds() + options.maxInterval);

				if(options.minInterval &gt; 0 &amp;&amp; minDate &gt; enddt){ // minInterval check
					endTime[method]('setDate',minDate);
				}
				else if(options.maxInterval &gt; 0 &amp;&amp; maxDate &lt; enddt){ // max interval check
					endTime[method]('setDate',maxDate);
				}
				else if (startdt &gt; enddt) {
					other[method]('setDate',changeddt);
				}
			}
		}

		function selected(changed, other, option) {
			if (!changed.val()) {
				return;
			}
			var date = changed[method].call(changed, 'getDate');
			if(date !== null &amp;&amp; options.minInterval &gt; 0){
				if(option == 'minDate'){
					date.setMilliseconds(date.getMilliseconds() + options.minInterval); 
				}
				if(option == 'maxDate'){
					date.setMilliseconds(date.getMilliseconds() - options.minInterval);
				}
			}
			if (date.getTime) {
				other[method].call(other, 'option', option, date);
			}
		}
		return $([startTime.get(0), endTime.get(0)]);
	};

	/**
	 * Log error or data to the console during error or debugging
	 * @param  Object err pass any type object to log to the console during error or debugging
	 * @return void
	 */
	$.timepicker.log = function(err){
		if(window.console){
			console.log(err);
		}
	};

	/*
	* Microsecond support
	*/
	if(!Date.prototype.getMicroseconds){
		Date.prototype.microseconds = 0;
		Date.prototype.getMicroseconds = function(){ return this.microseconds; };
		Date.prototype.setMicroseconds = function(m){ 
			this.setMilliseconds(this.getMilliseconds() + Math.floor(m/1000));
			this.microseconds = m%1000;
			return this;
		};
	}

	/*
	* Keep up with the version
	*/
	$.timepicker.version = "1.3.1";

})(jQuery);
jQuery.noConflict();
});</code>
    </property>
    <property>
      <name>datatimepicker-js</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>68510ad4-bc08-4ad4-be8e-97777510bf2b</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>var timer;
var jobName;
var istIidName;
var timeInterval = 10000
var istIidSelector
var exportType

require(['jquery'], function($) {
    $(document).ready(function(){

        $("#pauseImg").click(function() {
             $("#resumeImg").show()
             $("#pauseImg").hide()
             timer = clearInterval(timer)
             $("#loadingImg").hide()
             $("#messages").text("Paused")
        });

        $("#resumeImg").click(function() {
            $("#pauseImg").show()
            $("#resumeImg").hide()
            timer = setInterval(function(){getData(false)}, timeInterval);
            $("#loadingImg").show()
            $("#messages").text("Getting data...")
        });

        // DATE PICKER
        $("#monitoringDate").datetimepicker({
            timeFormat: 'HH:mm:ss',
            dateFormat: 'yy-mm-dd',
        });

        // CREATE SELECT BOX
        var initScreen = {'action': 'INITSCREEN'}
        $.ajax({
            type: "POST",
            crossDomain: true,
            url: "/xwiki/bin/get/WiperDogLib/MsgPolicyFromMongo?outputSyntax=plain",
            dataType: 'text',
            data: initScreen,
            success: function(result) {
                result = JSON.parse(result)
                if(result.status == "success") {
                    generateIstIidAndJobList(result)
                    $("#messages").text("Getting data...");
                } else if(result.status == "fail") {
                    $("#messages").text(result.message);
                }
            },
            error: function(xhr, status, error) {
                alert("There is an error! Wiperdog agent is on yet?")
                console.log(error)
                console.log(status)
                console.log(xhr)
            }
        });

        // GET DATA WHEN MONITORING FROM, JOB AND ISTIID ARE EMPTY
        $("#loadingImg").css("display","block")
        $("#messages").text("Getting data...");
        getData(false);
        if(timer != null){
            timer = clearInterval(timer)
        }
        timer = setInterval(function(){getData(false)}, timeInterval);

        // CHANGE DATE MONITORING
        $("#monitoringDate").change(function() {
            getData(false);
            if(timer != null){
                timer = clearInterval(timer)
            }
            timer = setInterval(function(){getData(false)}, timeInterval);
            $("#loadingImg").css("display","block")
            $("#pauseImg").show()
            $("#resumeImg").hide()
            $("#messages").text("Getting data...");
        });

        // CHANGE JOB
        $("#listJob").change(function(){
            jobName = $("#listJob").val();
            istIidName = $("#listIstIid").val();
            getData(false);
            if(timer != null){
                timer = clearInterval(timer)
            }
            timer = setInterval(function(){getData(false)}, timeInterval);
            $("#loadingImg").css("display","block")
            $("#pauseImg").show()
            $("#resumeImg").hide()
            $("#messages").text("Getting data...");
        });

        // CHANGE ISTIID
        $("#listIstIid").change(function(){
            jobName = $("#listJob").val();
            istIidName = $("#listIstIid").val();
            getData(false);
            if(timer != null){
                timer = clearInterval(timer)
            }
            timer = setInterval(function(){getData(false)}, timeInterval);
            $("#loadingImg").css("display","block")
            $("#pauseImg").show()
            $("#resumeImg").hide()
            $("#messages").text("Getting data...");
        });
    });
jQuery.noConflict()
});

// GENERATE JOB AND INSTANCES INTO SELECT BOX
function generateIstIidAndJobList(result){
    var lstJobName = result.lstJobName
    var lstIntIid = result.lstIntIid
    require(['jquery'], function($) {
        // Fill list job
        for(var i = 0; i &lt; lstJobName.length; i++){
            $("#listJob").append("&lt;option id=" + lstJobName[i] + " value=" + lstJobName[i] + "&gt;" + lstJobName[i] + "&lt;/option&gt;")
        }
        // Fill list istiid
        for(var i = 0; i &lt; lstIntIid.length; i++){
            $("#listIstIid").append("&lt;option id=" + lstIntIid[i] + " value=" + lstIntIid[i] + "&gt;" + lstIntIid[i] + "&lt;/option&gt;")
        }
    });
    jQuery.noConflict()
}

function getData(isExport){
    require(['jquery'], function($) {
        var now = new Date();
        var timeStr = now.getUTCDate() + "-" + (now.getUTCMonth() + 1) + "-" + now.getUTCFullYear() + " " + now.getHours() + ":" + now.getMinutes() + ":" + now.getSeconds();
        var timeFromStr = $("#monitoringDate").val()
        var epochFromEval
        var data2send = {'action': 'GETDATA'}
        if(!isExport){
        $.ajax({
            type: "POST",
            crossDomain: true,
            url: "/xwiki/bin/get/WiperDogLib/MsgPolicyFromMongo?outputSyntax=plain",
            dataType: 'text',
            data: data2send,
            success: function(result) {
                result = JSON.parse(result)
                var lstCollections
                var listFinalData = new Array()
                if(result.status == "fail") {
                    $("#messages").text(result.message);
                    return
                } else if(result.status == "success") {
                    lstCollections = result.lstCollections
                    $("#messages").text("Getting data...");
                }
                var checkData = false

                for(var i = 0; i &lt; lstCollections.length; i++) {
                    // Time evaluate
                    var fetchAtBin = lstCollections[i].fetchedAt_bin;
                    var epochEvaluate = new Date(fetchAtBin).getTime()

                    if(lstCollections[i].level == 1) {
                        lstCollections[i].level = "Low"
                    }
                    if(lstCollections[i].level == 2) {
                        lstCollections[i].level = "Medium"
                    }
                    if(lstCollections[i].level == 3) {
                        lstCollections[i].level = "High"
                    }

                    if(timeFromStr == "" || timeFromStr == null) {
                        if(jobName == "noChoice" || jobName == null) {
                            if(istIidName == "noChoice" || istIidName == null) {
                                // time empty, job empty, istiid empty
                                listFinalData.push(lstCollections[i])
                                $("#messages").text("Getting data...");
                                checkData = true
                            } else {
                                if(lstCollections[i].istIid == istIidName) {
                                    // time empty, job empty, istiid valid
                                    listFinalData.push(lstCollections[i])
                                    $("#messages").text("Getting data...");
                                    checkData = true
                                }
                            }
                        } else {
                            if(istIidName == "noChoice" || istIidName == null) {
                                if(lstCollections[i].jobName == jobName) {
                                    // time empty, job valid, istiid empty
                                    listFinalData.push(lstCollections[i])
                                    $("#messages").text("Getting data...");
                                    checkData = true
                                }
                            } else {
                                if(lstCollections[i].istIid == istIidName &amp;&amp; lstCollections[i].jobName == jobName) {
                                    // time empty, job valid, istiid valid
                                    listFinalData.push(lstCollections[i])
                                    $("#messages").text("Getting data...");
                                    checkData = true
                                }
                            }
                        }
                    } else {
                        epochFromEval = new Date(timeFromStr).getTime()
                        if(jobName == "noChoice" || jobName == null) {
                            if(istIidName == "noChoice" || istIidName == null) {
                                if(epochEvaluate &gt; epochFromEval) {
                                    // time valid, job empty, istiid empty
                                    listFinalData.push(lstCollections[i])
                                    $("#messages").text("Getting data...");
                                    checkData = true
                                }
                            } else {
                                if(epochEvaluate &gt; epochFromEval &amp;&amp; lstCollections[i].istIid == istIidName) {
                                    // time valid, job empty, istiid valid
                                    listFinalData.push(lstCollections[i])
                                    $("#messages").text("Getting data...");
                                    checkData = true
                                }
                            }
                        } else {
                            if(istIidName == "noChoice" || istIidName == null) {
                                if(epochEvaluate &gt; epochFromEval &amp;&amp; lstCollections[i].jobName == jobName) {
                                    // time valid, job valid, istiid empty
                                    listFinalData.push(lstCollections[i])
                                    $("#messages").text("Getting data...");
                                    checkData = true
                                }
                            } else {
                                if(lstCollections[i].istIid == istIidName &amp;&amp; lstCollections[i].jobName == jobName) {
                                    if(epochEvaluate &gt; epochFromEval &amp;&amp; lstCollections[i].jobName == jobName  &amp;&amp; lstCollections[i].istIid == istIidName) {
                                        // time valid, job valid, istiid valid
                                        listFinalData.push(lstCollections[i])
                                        $("#messages").text("Getting data...");
                                        checkData = true
                                    }
                                }
                            }
                        }
                    }
                }

                // CREATE DATA LIVE
                var pnResizeWidth = $('#xwikicontent').width() - 50;
	        var poGridOption = {
		    height : 'auto',
		    width : pnResizeWidth,
		    rowNum : 10,
                    rowList:[10,20,30,100],
		    datatype: 'local',
		    colNames:['FetchedAt', 'Level', 'Job Name', 'Instance Name', 'Message'],
		    colModel:[ 
                        {name:'fetchedAt_bin', resizable:true, width:80}, 
                        {name:'level', resizable:true, width:50}, 
                        {name:'jobName', resizable:true}, 
                        {name:'istIid', resizable:true}, 
                        {name:'message', resizable:true}
                    ],
                    multiselect: false,
                    viewrecords: true,
                    refresh: true,
                    caption: 'MESSAGE EVALUATE POLICY',
                    pager : '#pager',
                    afterInsertRow : function(rowid, rowdata){
                        $("[id=" + rowid + "] &gt; [aria-describedby='gridList_level']").addClass(rowdata.level)
                        $("[id=" + rowid + "] &gt; [aria-describedby='gridList_fetchedAt_bin']").text(rowdata.fetchedAt_bin)
                    }
                }

                // DRAW LIVE TABLE
                $("#gridList").jqGrid(poGridOption);
              	$("#gridList").jqGrid('filterToolbar',{searchOperators : true});

                if(!checkData) { // no data
                    //$("#gridList").html("")
                    $("#gridList").jqGrid('clearGridData');
                } else {
                    //$("#gridList").html("")
                    $("#gridList").jqGrid('clearGridData');
                    for(var i = 0; i &lt; listFinalData.length; i++) {
                          $("#gridList").jqGrid('addRowData', i, listFinalData[i]);
                    }
                }

                $('#gridList').jqGrid('sortGrid', 'fetchedAt_bin', true, 'desc');
                $("#gridList").jqGrid('setGridParam',{ rowNum: 10 }).trigger("reloadGrid");
            },
            error: function(xhr, status, error) {
                console.log(error)
                console.log(status)
                console.log(xhr)
            }
        });
        } else{
		$("#ExportBtn").attr("disabled", "disabled");
		$.ajax({
			type: "POST",
			crossDomain: true,
			url: "/xwiki/bin/get/WiperDogLib/MsgPolicyFromMongo?outputSyntax=plain",
			dataType: 'text',
			data: data2send,
			success: function(result) {
				var doc = new jsPDF('l');
				doc.text('Message evaluated policy', 5 , 8)
				doc.setFontSize(10)
				doc.text('From date: ' + timeFromStr, 10 , 15)
				var resultData = JSON.parse(result)
				var lstCollections = resultData.lstCollections
				var listFinalData = []
				var doc = new jsPDF('l');
				doc.text('Message evaluated policy', 5 , 8)
				doc.setFontSize(10)
				doc.text('From date: ' + timeFromStr, 10 , 15)
				var resultData = JSON.parse(result)
				var lstCollections = resultData.lstCollections
				var listFinalData = []
				for(var i = lstCollections.length - 1; i &gt; 0; i--){
					var fetchAtBin = lstCollections[i].fetchedAt_bin;
					var epochEvaluate = new Date(fetchAtBin).getTime()

					if(timeFromStr == "" || timeFromStr == null) {
						if(jobName == "noChoice" || jobName == null) {
							if(istIidName == "noChoice" || istIidName == null) {
									// time empty, job empty, istiid empty
									listFinalData.push(lstCollections[i])
							} else {
								if(lstCollections[i].istIid == istIidName) {
									// time empty, job empty, istiid valid
									listFinalData.push(lstCollections[i])
								}
							}
						} else {
							if(istIidName == "noChoice" || istIidName == null) {
								if(lstCollections[i].jobName == jobName) {
									// time empty, job valid, istiid empty
									listFinalData.push(lstCollections[i])
								}
							} else {
								if(lstCollections[i].istIid == istIidName &amp;&amp; lstCollections[i].jobName == jobName) {
									// time empty, job valid, istiid valid
									listFinalData.push(lstCollections[i])
								}
							}
						}
					} else {
						epochFromEval = new Date(timeFromStr).getTime()
						if(jobName == "noChoice" || jobName == null) {
							if(istIidName == "noChoice" || istIidName == null) {
								if(epochEvaluate &gt; epochFromEval) {
									// time valid, job empty, istiid empty
									listFinalData.push(lstCollections[i])
								}
							} else {
								if(epochEvaluate &gt; epochFromEval &amp;&amp; lstCollections[i].istIid == istIidName) {
									// time valid, job empty, istiid valid
									listFinalData.push(lstCollections[i])
								}
							}
						} else {
						    if(istIidName == "noChoice" || istIidName == null) {
						        if(epochEvaluate &gt; epochFromEval &amp;&amp; lstCollections[i].jobName == jobName) {
						            // time valid, job valid, istiid empty
						            listFinalData.push(lstCollections[i])
						        }
						    } else {
						        if(lstCollections[i].istIid == istIidName &amp;&amp; lstCollections[i].jobName == jobName) {
						            if(epochEvaluate &gt; epochFromEval &amp;&amp; lstCollections[i].jobName == jobName  &amp;&amp; lstCollections[i].istIid == istIidName) {
						                // time valid, job valid, istiid valid
						                listFinalData.push(lstCollections[i])
						            }
						        }
						    }
						}
					}
				}
				listFinalData.sort(function(a,b){
					var aTimeInMs = new Date(a.fetchedAt_bin).getTime()
					var bTimeInMs = new Date(b.fetchedAt_bin).getTime()
					return bTimeInMs - aTimeInMs || b.level - a.level
				})
				for(var i = 0; i &lt; listFinalData.length; i++){
					if(listFinalData[i].level == 1){
						listFinalData[i].level = 'Low'
					}
					if(listFinalData[i].level == 2){
						listFinalData[i].level = 'Medium'
					}
					if(listFinalData[i].level == 3){
						listFinalData[i].level = 'High'
					}
				}
				var headersAlias = {'fetchedAt_bin' : 'FetchedAt', 'level' : 'Level', 'jobName' : 'Job Name', 'istIid' : 'Instance Name', 'message' : 'Message'}
				var headers = genTableHeaders(doc, ['fetchedAt_bin','level','jobName','istIid','message'], listFinalData, headersAlias)
				genTablePDF(doc, listFinalData, headers, headersAlias, true, 5, 25, 4)
				var fileName
				if(exportType &gt; 0){
					if(exportType == 1){
						fileName = 'Evaluated messages in 1 day from ' + timeFromStr + '.pdf'
					}
					if(exportType == 3){
						fileName = 'Evaluated messages in 3 days from ' + timeFromStr + '.pdf'
					}
					if(exportType == 7){
						fileName = 'Evaluated messages in 7 days from ' + timeFromStr + '.pdf'
					}
				}else{
					if(timeFromStr != null &amp;&amp; timeFromStr != ''){
						fileName = 'Evaluated messages from ' + timeFromStr + '.pdf'
					}else{
						fileName = 'Evaluated messages.pdf'
					}
				}
				savePDF(doc, 'file', fileName)
				$("#ExportBtn").removeAttr("disabled");
			},
			error : function(xhr, status, error) {
				console.log(error)
				console.log(status)
				console.log(xhr)
				$("#ExportBtn").removeAttr("disabled");
			}
		});
        }
    jQuery.noConflict()
    });
}</code>
    </property>
    <property>
      <name>DisplayPolicy</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>4</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>dea441a9-7d82-4fad-a414-29586738484d</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>require(['jquery'],function($){
var listMonitoring = [$("#Monitor1day"), $("#Monitor3day"), $("#Monitor7day"), $("#MonitorOtherDay")]

$("#Monitor1day").click(function(){
	$("#pauseImg").show()
	$("#resumeImg").hide()
	setCheckedRadio(this, true)
	exportType = 1
	var today = new Date()
	$("#monitoringDate").val(today.addDays(-1).toString('yyyy-MM-dd HH:mm:ss'))
	if(timer != null){
		timer = clearInterval(timer)
	}
	timer = setInterval(function(){getData(false)}, timeInterval);
	$("#btnArea").show('clip')
})

$("#Monitor3day").click(function(){
	$("#pauseImg").show()
	$("#resumeImg").hide()
	setCheckedRadio(this, true)
	exportType = 3
	var today = new Date()
	$("#monitoringDate").val(today.addDays(-3).toString('yyyy-MM-dd HH:mm:ss'))

	if(timer != null){
		timer = clearInterval(timer)
	}
	timer = setInterval(function(){getData(false)}, timeInterval);
	$("#btnArea").show('blind')
})

$("#Monitor7day").click(function(){
	$("#pauseImg").show()
	$("#resumeImg").hide()
	setCheckedRadio(this, true)
	exportType = 7
	var today = new Date()
	$("#monitoringDate").val(today.addDays(-7).toString('yyyy-MM-dd HH:mm:ss'))
	
	if(timer != null){
		timer = clearInterval(timer)
	}
	timer = setInterval(function(){getData(false)}, timeInterval);
	$("#btnArea").show('blind')
})

$("#MonitorOtherDay").click(function(){
	$("#pauseImg").show()
	$("#resumeImg").hide()
	setCheckedRadio(this, true)
	exportType = -1
	$("#monitoringDate").val('')

	if(timer != null){
		timer = clearInterval(timer)
	}
	timer = setInterval(function(){getData(false)}, timeInterval);

	$("#btnArea").show('blind')
})

function setCheckedRadio(selector, state){
	for(var i = 0; i &lt; listMonitoring.length; i++){
		if(listMonitoring[i][0] != selector){
			listMonitoring[i].prop('checked', !state) 
		}
	}
}

$("#ExportBtn").click(function(){
	getData(true)
})

jQuery.noConflict()
});</code>
    </property>
    <property>
      <name>exportPDF</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>5</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>1ba64591-8442-4a3c-a9f1-ff5f440ce1a8</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>/**
 * Version: 1.0 Alpha-1 
 * Build Date: 13-Nov-2007
 * Copyright (c) 2006-2007, Coolite Inc. (http://www.coolite.com/). All rights reserved.
 * License: Licensed under The MIT License. See license.txt and http://www.datejs.com/license/. 
 * Website: http://www.datejs.com/ or http://www.coolite.com/datejs/
 */
Date.CultureInfo={name:"en-US",englishName:"English (United States)",nativeName:"English (United States)",dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],abbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],shortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],firstLetterDayNames:["S","M","T","W","T","F","S"],monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],abbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],amDesignator:"AM",pmDesignator:"PM",firstDayOfWeek:0,twoDigitYearMax:2029,dateElementOrder:"mdy",formatPatterns:{shortDate:"M/d/yyyy",longDate:"dddd, MMMM dd, yyyy",shortTime:"h:mm tt",longTime:"h:mm:ss tt",fullDateTime:"dddd, MMMM dd, yyyy h:mm:ss tt",sortableDateTime:"yyyy-MM-ddTHH:mm:ss",universalSortableDateTime:"yyyy-MM-dd HH:mm:ssZ",rfc1123:"ddd, dd MMM yyyy HH:mm:ss GMT",monthDay:"MMMM dd",yearMonth:"MMMM, yyyy"},regexPatterns:{jan:/^jan(uary)?/i,feb:/^feb(ruary)?/i,mar:/^mar(ch)?/i,apr:/^apr(il)?/i,may:/^may/i,jun:/^jun(e)?/i,jul:/^jul(y)?/i,aug:/^aug(ust)?/i,sep:/^sep(t(ember)?)?/i,oct:/^oct(ober)?/i,nov:/^nov(ember)?/i,dec:/^dec(ember)?/i,sun:/^su(n(day)?)?/i,mon:/^mo(n(day)?)?/i,tue:/^tu(e(s(day)?)?)?/i,wed:/^we(d(nesday)?)?/i,thu:/^th(u(r(s(day)?)?)?)?/i,fri:/^fr(i(day)?)?/i,sat:/^sa(t(urday)?)?/i,future:/^next/i,past:/^last|past|prev(ious)?/i,add:/^(\+|after|from)/i,subtract:/^(\-|before|ago)/i,yesterday:/^yesterday/i,today:/^t(oday)?/i,tomorrow:/^tomorrow/i,now:/^n(ow)?/i,millisecond:/^ms|milli(second)?s?/i,second:/^sec(ond)?s?/i,minute:/^min(ute)?s?/i,hour:/^h(ou)?rs?/i,week:/^w(ee)?k/i,month:/^m(o(nth)?s?)?/i,day:/^d(ays?)?/i,year:/^y((ea)?rs?)?/i,shortMeridian:/^(a|p)/i,longMeridian:/^(a\.?m?\.?|p\.?m?\.?)/i,timezone:/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt)/i,ordinalSuffix:/^\s*(st|nd|rd|th)/i,timeContext:/^\s*(\:|a|p)/i},abbreviatedTimeZoneStandard:{GMT:"-000",EST:"-0400",CST:"-0500",MST:"-0600",PST:"-0700"},abbreviatedTimeZoneDST:{GMT:"-000",EDT:"-0500",CDT:"-0600",MDT:"-0700",PDT:"-0800"}};
Date.getMonthNumberFromName=function(name){var n=Date.CultureInfo.monthNames,m=Date.CultureInfo.abbreviatedMonthNames,s=name.toLowerCase();for(var i=0;i&lt;n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};Date.getDayNumberFromName=function(name){var n=Date.CultureInfo.dayNames,m=Date.CultureInfo.abbreviatedDayNames,o=Date.CultureInfo.shortestDayNames,s=name.toLowerCase();for(var i=0;i&lt;n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};Date.isLeapYear=function(year){return(((year%4===0)&amp;&amp;(year%100!==0))||(year%400===0));};Date.getDaysInMonth=function(year,month){return[31,(Date.isLeapYear(year)?29:28),31,30,31,30,31,31,30,31,30,31][month];};Date.getTimezoneOffset=function(s,dst){return(dst||false)?Date.CultureInfo.abbreviatedTimeZoneDST[s.toUpperCase()]:Date.CultureInfo.abbreviatedTimeZoneStandard[s.toUpperCase()];};Date.getTimezoneAbbreviation=function(offset,dst){var n=(dst||false)?Date.CultureInfo.abbreviatedTimeZoneDST:Date.CultureInfo.abbreviatedTimeZoneStandard,p;for(p in n){if(n[p]===offset){return p;}}
return null;};Date.prototype.clone=function(){return new Date(this.getTime());};Date.prototype.compareTo=function(date){if(isNaN(this)){throw new Error(this);}
if(date instanceof Date&amp;&amp;!isNaN(date)){return(this&gt;date)?1:(this&lt;date)?-1:0;}else{throw new TypeError(date);}};Date.prototype.equals=function(date){return(this.compareTo(date)===0);};Date.prototype.between=function(start,end){var t=this.getTime();return t&gt;=start.getTime()&amp;&amp;t&lt;=end.getTime();};Date.prototype.addMilliseconds=function(value){this.setMilliseconds(this.getMilliseconds()+value);return this;};Date.prototype.addSeconds=function(value){return this.addMilliseconds(value*1000);};Date.prototype.addMinutes=function(value){return this.addMilliseconds(value*60000);};Date.prototype.addHours=function(value){return this.addMilliseconds(value*3600000);};Date.prototype.addDays=function(value){return this.addMilliseconds(value*86400000);};Date.prototype.addWeeks=function(value){return this.addMilliseconds(value*604800000);};Date.prototype.addMonths=function(value){var n=this.getDate();this.setDate(1);this.setMonth(this.getMonth()+value);this.setDate(Math.min(n,this.getDaysInMonth()));return this;};Date.prototype.addYears=function(value){return this.addMonths(value*12);};Date.prototype.add=function(config){if(typeof config=="number"){this._orient=config;return this;}
var x=config;if(x.millisecond||x.milliseconds){this.addMilliseconds(x.millisecond||x.milliseconds);}
if(x.second||x.seconds){this.addSeconds(x.second||x.seconds);}
if(x.minute||x.minutes){this.addMinutes(x.minute||x.minutes);}
if(x.hour||x.hours){this.addHours(x.hour||x.hours);}
if(x.month||x.months){this.addMonths(x.month||x.months);}
if(x.year||x.years){this.addYears(x.year||x.years);}
if(x.day||x.days){this.addDays(x.day||x.days);}
return this;};Date._validate=function(value,min,max,name){if(typeof value!="number"){throw new TypeError(value+" is not a Number.");}else if(value&lt;min||value&gt;max){throw new RangeError(value+" is not a valid value for "+name+".");}
return true;};Date.validateMillisecond=function(n){return Date._validate(n,0,999,"milliseconds");};Date.validateSecond=function(n){return Date._validate(n,0,59,"seconds");};Date.validateMinute=function(n){return Date._validate(n,0,59,"minutes");};Date.validateHour=function(n){return Date._validate(n,0,23,"hours");};Date.validateDay=function(n,year,month){return Date._validate(n,1,Date.getDaysInMonth(year,month),"days");};Date.validateMonth=function(n){return Date._validate(n,0,11,"months");};Date.validateYear=function(n){return Date._validate(n,1,9999,"seconds");};Date.prototype.set=function(config){var x=config;if(!x.millisecond&amp;&amp;x.millisecond!==0){x.millisecond=-1;}
if(!x.second&amp;&amp;x.second!==0){x.second=-1;}
if(!x.minute&amp;&amp;x.minute!==0){x.minute=-1;}
if(!x.hour&amp;&amp;x.hour!==0){x.hour=-1;}
if(!x.day&amp;&amp;x.day!==0){x.day=-1;}
if(!x.month&amp;&amp;x.month!==0){x.month=-1;}
if(!x.year&amp;&amp;x.year!==0){x.year=-1;}
if(x.millisecond!=-1&amp;&amp;Date.validateMillisecond(x.millisecond)){this.addMilliseconds(x.millisecond-this.getMilliseconds());}
if(x.second!=-1&amp;&amp;Date.validateSecond(x.second)){this.addSeconds(x.second-this.getSeconds());}
if(x.minute!=-1&amp;&amp;Date.validateMinute(x.minute)){this.addMinutes(x.minute-this.getMinutes());}
if(x.hour!=-1&amp;&amp;Date.validateHour(x.hour)){this.addHours(x.hour-this.getHours());}
if(x.month!==-1&amp;&amp;Date.validateMonth(x.month)){this.addMonths(x.month-this.getMonth());}
if(x.year!=-1&amp;&amp;Date.validateYear(x.year)){this.addYears(x.year-this.getFullYear());}
if(x.day!=-1&amp;&amp;Date.validateDay(x.day,this.getFullYear(),this.getMonth())){this.addDays(x.day-this.getDate());}
if(x.timezone){this.setTimezone(x.timezone);}
if(x.timezoneOffset){this.setTimezoneOffset(x.timezoneOffset);}
return this;};Date.prototype.clearTime=function(){this.setHours(0);this.setMinutes(0);this.setSeconds(0);this.setMilliseconds(0);return this;};Date.prototype.isLeapYear=function(){var y=this.getFullYear();return(((y%4===0)&amp;&amp;(y%100!==0))||(y%400===0));};Date.prototype.isWeekday=function(){return!(this.is().sat()||this.is().sun());};Date.prototype.getDaysInMonth=function(){return Date.getDaysInMonth(this.getFullYear(),this.getMonth());};Date.prototype.moveToFirstDayOfMonth=function(){return this.set({day:1});};Date.prototype.moveToLastDayOfMonth=function(){return this.set({day:this.getDaysInMonth()});};Date.prototype.moveToDayOfWeek=function(day,orient){var diff=(day-this.getDay()+7*(orient||+1))%7;return this.addDays((diff===0)?diff+=7*(orient||+1):diff);};Date.prototype.moveToMonth=function(month,orient){var diff=(month-this.getMonth()+12*(orient||+1))%12;return this.addMonths((diff===0)?diff+=12*(orient||+1):diff);};Date.prototype.getDayOfYear=function(){return Math.floor((this-new Date(this.getFullYear(),0,1))/86400000);};Date.prototype.getWeekOfYear=function(firstDayOfWeek){var y=this.getFullYear(),m=this.getMonth(),d=this.getDate();var dow=firstDayOfWeek||Date.CultureInfo.firstDayOfWeek;var offset=7+1-new Date(y,0,1).getDay();if(offset==8){offset=1;}
var daynum=((Date.UTC(y,m,d,0,0,0)-Date.UTC(y,0,1,0,0,0))/86400000)+1;var w=Math.floor((daynum-offset+7)/7);if(w===dow){y--;var prevOffset=7+1-new Date(y,0,1).getDay();if(prevOffset==2||prevOffset==8){w=53;}else{w=52;}}
return w;};Date.prototype.isDST=function(){console.log('isDST');return this.toString().match(/(E|C|M|P)(S|D)T/)[2]=="D";};Date.prototype.getTimezone=function(){return Date.getTimezoneAbbreviation(this.getUTCOffset,this.isDST());};Date.prototype.setTimezoneOffset=function(s){var here=this.getTimezoneOffset(),there=Number(s)*-6/10;this.addMinutes(there-here);return this;};Date.prototype.setTimezone=function(s){return this.setTimezoneOffset(Date.getTimezoneOffset(s));};Date.prototype.getUTCOffset=function(){var n=this.getTimezoneOffset()*-10/6,r;if(n&lt;0){r=(n-10000).toString();return r[0]+r.substr(2);}else{r=(n+10000).toString();return"+"+r.substr(1);}};Date.prototype.getDayName=function(abbrev){return abbrev?Date.CultureInfo.abbreviatedDayNames[this.getDay()]:Date.CultureInfo.dayNames[this.getDay()];};Date.prototype.getMonthName=function(abbrev){return abbrev?Date.CultureInfo.abbreviatedMonthNames[this.getMonth()]:Date.CultureInfo.monthNames[this.getMonth()];};Date.prototype._toString=Date.prototype.toString;Date.prototype.toString=function(format){var self=this;var p=function p(s){return(s.toString().length==1)?"0"+s:s;};return format?format.replace(/dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?/g,function(format){switch(format){case"hh":return p(self.getHours()&lt;13?self.getHours():(self.getHours()-12));case"h":return self.getHours()&lt;13?self.getHours():(self.getHours()-12);case"HH":return p(self.getHours());case"H":return self.getHours();case"mm":return p(self.getMinutes());case"m":return self.getMinutes();case"ss":return p(self.getSeconds());case"s":return self.getSeconds();case"yyyy":return self.getFullYear();case"yy":return self.getFullYear().toString().substring(2,4);case"dddd":return self.getDayName();case"ddd":return self.getDayName(true);case"dd":return p(self.getDate());case"d":return self.getDate().toString();case"MMMM":return self.getMonthName();case"MMM":return self.getMonthName(true);case"MM":return p((self.getMonth()+1));case"M":return self.getMonth()+1;case"t":return self.getHours()&lt;12?Date.CultureInfo.amDesignator.substring(0,1):Date.CultureInfo.pmDesignator.substring(0,1);case"tt":return self.getHours()&lt;12?Date.CultureInfo.amDesignator:Date.CultureInfo.pmDesignator;case"zzz":case"zz":case"z":return"";}}):this._toString();};
Date.now=function(){return new Date();};Date.today=function(){return Date.now().clearTime();};Date.prototype._orient=+1;Date.prototype.next=function(){this._orient=+1;return this;};Date.prototype.last=Date.prototype.prev=Date.prototype.previous=function(){this._orient=-1;return this;};Date.prototype._is=false;Date.prototype.is=function(){this._is=true;return this;};Number.prototype._dateElement="day";Number.prototype.fromNow=function(){var c={};c[this._dateElement]=this;return Date.now().add(c);};Number.prototype.ago=function(){var c={};c[this._dateElement]=this*-1;return Date.now().add(c);};(function(){var $D=Date.prototype,$N=Number.prototype;var dx=("sunday monday tuesday wednesday thursday friday saturday").split(/\s/),mx=("january february march april may june july august september october november december").split(/\s/),px=("Millisecond Second Minute Hour Day Week Month Year").split(/\s/),de;var df=function(n){return function(){if(this._is){this._is=false;return this.getDay()==n;}
return this.moveToDayOfWeek(n,this._orient);};};for(var i=0;i&lt;dx.length;i++){$D[dx[i]]=$D[dx[i].substring(0,3)]=df(i);}
var mf=function(n){return function(){if(this._is){this._is=false;return this.getMonth()===n;}
return this.moveToMonth(n,this._orient);};};for(var j=0;j&lt;mx.length;j++){$D[mx[j]]=$D[mx[j].substring(0,3)]=mf(j);}
var ef=function(j){return function(){if(j.substring(j.length-1)!="s"){j+="s";}
return this["add"+j](this._orient);};};var nf=function(n){return function(){this._dateElement=n;return this;};};for(var k=0;k&lt;px.length;k++){de=px[k].toLowerCase();$D[de]=$D[de+"s"]=ef(px[k]);$N[de]=$N[de+"s"]=nf(de);}}());Date.prototype.toJSONString=function(){return this.toString("yyyy-MM-ddThh:mm:ssZ");};Date.prototype.toShortDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortDatePattern);};Date.prototype.toLongDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.longDatePattern);};Date.prototype.toShortTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortTimePattern);};Date.prototype.toLongTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.longTimePattern);};Date.prototype.getOrdinal=function(){switch(this.getDate()){case 1:case 21:case 31:return"st";case 2:case 22:return"nd";case 3:case 23:return"rd";default:return"th";}};
(function(){Date.Parsing={Exception:function(s){this.message="Parse error at '"+s.substring(0,10)+" ...'";}};var $P=Date.Parsing;var _=$P.Operators={rtoken:function(r){return function(s){var mx=s.match(r);if(mx){return([mx[0],s.substring(mx[0].length)]);}else{throw new $P.Exception(s);}};},token:function(s){return function(s){return _.rtoken(new RegExp("^\s*"+s+"\s*"))(s);};},stoken:function(s){return _.rtoken(new RegExp("^"+s));},until:function(p){return function(s){var qx=[],rx=null;while(s.length){try{rx=p.call(this,s);}catch(e){qx.push(rx[0]);s=rx[1];continue;}
break;}
return[qx,s];};},many:function(p){return function(s){var rx=[],r=null;while(s.length){try{r=p.call(this,s);}catch(e){return[rx,s];}
rx.push(r[0]);s=r[1];}
return[rx,s];};},optional:function(p){return function(s){var r=null;try{r=p.call(this,s);}catch(e){return[null,s];}
return[r[0],r[1]];};},not:function(p){return function(s){try{p.call(this,s);}catch(e){return[null,s];}
throw new $P.Exception(s);};},ignore:function(p){return p?function(s){var r=null;r=p.call(this,s);return[null,r[1]];}:null;},product:function(){var px=arguments[0],qx=Array.prototype.slice.call(arguments,1),rx=[];for(var i=0;i&lt;px.length;i++){rx.push(_.each(px[i],qx));}
return rx;},cache:function(rule){var cache={},r=null;return function(s){try{r=cache[s]=(cache[s]||rule.call(this,s));}catch(e){r=cache[s]=e;}
if(r instanceof $P.Exception){throw r;}else{return r;}};},any:function(){var px=arguments;return function(s){var r=null;for(var i=0;i&lt;px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){r=null;}
if(r){return r;}}
throw new $P.Exception(s);};},each:function(){var px=arguments;return function(s){var rx=[],r=null;for(var i=0;i&lt;px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){throw new $P.Exception(s);}
rx.push(r[0]);s=r[1];}
return[rx,s];};},all:function(){var px=arguments,_=_;return _.each(_.optional(px));},sequence:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;if(px.length==1){return px[0];}
return function(s){var r=null,q=null;var rx=[];for(var i=0;i&lt;px.length;i++){try{r=px[i].call(this,s);}catch(e){break;}
rx.push(r[0]);try{q=d.call(this,r[1]);}catch(ex){q=null;break;}
s=q[1];}
if(!r){throw new $P.Exception(s);}
if(q){throw new $P.Exception(q[1]);}
if(c){try{r=c.call(this,r[1]);}catch(ey){throw new $P.Exception(r[1]);}}
return[rx,(r?r[1]:s)];};},between:function(d1,p,d2){d2=d2||d1;var _fn=_.each(_.ignore(d1),p,_.ignore(d2));return function(s){var rx=_fn.call(this,s);return[[rx[0][0],r[0][2]],rx[1]];};},list:function(p,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return(p instanceof Array?_.each(_.product(p.slice(0,-1),_.ignore(d)),p.slice(-1),_.ignore(c)):_.each(_.many(_.each(p,_.ignore(d))),px,_.ignore(c)));},set:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return function(s){var r=null,p=null,q=null,rx=null,best=[[],s],last=false;for(var i=0;i&lt;px.length;i++){q=null;p=null;r=null;last=(px.length==1);try{r=px[i].call(this,s);}catch(e){continue;}
rx=[[r[0]],r[1]];if(r[1].length&gt;0&amp;&amp;!last){try{q=d.call(this,r[1]);}catch(ex){last=true;}}else{last=true;}
if(!last&amp;&amp;q[1].length===0){last=true;}
if(!last){var qx=[];for(var j=0;j&lt;px.length;j++){if(i!=j){qx.push(px[j]);}}
p=_.set(qx,d).call(this,q[1]);if(p[0].length&gt;0){rx[0]=rx[0].concat(p[0]);rx[1]=p[1];}}
if(rx[1].length&lt;best[1].length){best=rx;}
if(best[1].length===0){break;}}
if(best[0].length===0){return best;}
if(c){try{q=c.call(this,best[1]);}catch(ey){throw new $P.Exception(best[1]);}
best[1]=q[1];}
return best;};},forward:function(gr,fname){return function(s){return gr[fname].call(this,s);};},replace:function(rule,repl){return function(s){var r=rule.call(this,s);return[repl,r[1]];};},process:function(rule,fn){return function(s){var r=rule.call(this,s);return[fn.call(this,r[0]),r[1]];};},min:function(min,rule){return function(s){var rx=rule.call(this,s);if(rx[0].length&lt;min){throw new $P.Exception(s);}
return rx;};}};var _generator=function(op){return function(){var args=null,rx=[];if(arguments.length&gt;1){args=Array.prototype.slice.call(arguments);}else if(arguments[0]instanceof Array){args=arguments[0];}
if(args){for(var i=0,px=args.shift();i&lt;px.length;i++){args.unshift(px[i]);rx.push(op.apply(null,args));args.shift();return rx;}}else{return op.apply(null,arguments);}};};var gx="optional not ignore cache".split(/\s/);for(var i=0;i&lt;gx.length;i++){_[gx[i]]=_generator(_[gx[i]]);}
var _vector=function(op){return function(){if(arguments[0]instanceof Array){return op.apply(null,arguments[0]);}else{return op.apply(null,arguments);}};};var vx="each any all".split(/\s/);for(var j=0;j&lt;vx.length;j++){_[vx[j]]=_vector(_[vx[j]]);}}());(function(){var flattenAndCompact=function(ax){var rx=[];for(var i=0;i&lt;ax.length;i++){if(ax[i]instanceof Array){rx=rx.concat(flattenAndCompact(ax[i]));}else{if(ax[i]){rx.push(ax[i]);}}}
return rx;};Date.Grammar={};Date.Translator={hour:function(s){return function(){this.hour=Number(s);};},minute:function(s){return function(){this.minute=Number(s);};},second:function(s){return function(){this.second=Number(s);};},meridian:function(s){return function(){this.meridian=s.slice(0,1).toLowerCase();};},timezone:function(s){return function(){var n=s.replace(/[^\d\+\-]/g,"");if(n.length){this.timezoneOffset=Number(n);}else{this.timezone=s.toLowerCase();}};},day:function(x){var s=x[0];return function(){this.day=Number(s.match(/\d+/)[0]);};},month:function(s){return function(){this.month=((s.length==3)?Date.getMonthNumberFromName(s):(Number(s)-1));};},year:function(s){return function(){var n=Number(s);this.year=((s.length&gt;2)?n:(n+(((n+2000)&lt;Date.CultureInfo.twoDigitYearMax)?2000:1900)));};},rday:function(s){return function(){switch(s){case"yesterday":this.days=-1;break;case"tomorrow":this.days=1;break;case"today":this.days=0;break;case"now":this.days=0;this.now=true;break;}};},finishExact:function(x){x=(x instanceof Array)?x:[x];var now=new Date();this.year=now.getFullYear();this.month=now.getMonth();this.day=1;this.hour=0;this.minute=0;this.second=0;for(var i=0;i&lt;x.length;i++){if(x[i]){x[i].call(this);}}
this.hour=(this.meridian=="p"&amp;&amp;this.hour&lt;13)?this.hour+12:this.hour;if(this.day&gt;Date.getDaysInMonth(this.year,this.month)){throw new RangeError(this.day+" is not a valid value for days.");}
var r=new Date(this.year,this.month,this.day,this.hour,this.minute,this.second);if(this.timezone){r.set({timezone:this.timezone});}else if(this.timezoneOffset){r.set({timezoneOffset:this.timezoneOffset});}
return r;},finish:function(x){x=(x instanceof Array)?flattenAndCompact(x):[x];if(x.length===0){return null;}
for(var i=0;i&lt;x.length;i++){if(typeof x[i]=="function"){x[i].call(this);}}
if(this.now){return new Date();}
var today=Date.today();var method=null;var expression=!!(this.days!=null||this.orient||this.operator);if(expression){var gap,mod,orient;orient=((this.orient=="past"||this.operator=="subtract")?-1:1);if(this.weekday){this.unit="day";gap=(Date.getDayNumberFromName(this.weekday)-today.getDay());mod=7;this.days=gap?((gap+(orient*mod))%mod):(orient*mod);}
if(this.month){this.unit="month";gap=(this.month-today.getMonth());mod=12;this.months=gap?((gap+(orient*mod))%mod):(orient*mod);this.month=null;}
if(!this.unit){this.unit="day";}
if(this[this.unit+"s"]==null||this.operator!=null){if(!this.value){this.value=1;}
if(this.unit=="week"){this.unit="day";this.value=this.value*7;}
this[this.unit+"s"]=this.value*orient;}
return today.add(this);}else{if(this.meridian&amp;&amp;this.hour){this.hour=(this.hour&lt;13&amp;&amp;this.meridian=="p")?this.hour+12:this.hour;}
if(this.weekday&amp;&amp;!this.day){this.day=(today.addDays((Date.getDayNumberFromName(this.weekday)-today.getDay()))).getDate();}
if(this.month&amp;&amp;!this.day){this.day=1;}
return today.set(this);}}};var _=Date.Parsing.Operators,g=Date.Grammar,t=Date.Translator,_fn;g.datePartDelimiter=_.rtoken(/^([\s\-\.\,\/\x27]+)/);g.timePartDelimiter=_.stoken(":");g.whiteSpace=_.rtoken(/^\s*/);g.generalDelimiter=_.rtoken(/^(([\s\,]|at|on)+)/);var _C={};g.ctoken=function(keys){var fn=_C[keys];if(!fn){var c=Date.CultureInfo.regexPatterns;var kx=keys.split(/\s+/),px=[];for(var i=0;i&lt;kx.length;i++){px.push(_.replace(_.rtoken(c[kx[i]]),kx[i]));}
fn=_C[keys]=_.any.apply(null,px);}
return fn;};g.ctoken2=function(key){return _.rtoken(Date.CultureInfo.regexPatterns[key]);};g.h=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2]|[1-9])/),t.hour));g.hh=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2])/),t.hour));g.H=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/),t.hour));g.HH=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3])/),t.hour));g.m=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.minute));g.mm=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.minute));g.s=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.second));g.ss=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.second));g.hms=_.cache(_.sequence([g.H,g.mm,g.ss],g.timePartDelimiter));g.t=_.cache(_.process(g.ctoken2("shortMeridian"),t.meridian));g.tt=_.cache(_.process(g.ctoken2("longMeridian"),t.meridian));g.z=_.cache(_.process(_.rtoken(/^(\+|\-)?\s*\d\d\d\d?/),t.timezone));g.zz=_.cache(_.process(_.rtoken(/^(\+|\-)\s*\d\d\d\d/),t.timezone));g.zzz=_.cache(_.process(g.ctoken2("timezone"),t.timezone));g.timeSuffix=_.each(_.ignore(g.whiteSpace),_.set([g.tt,g.zzz]));g.time=_.each(_.optional(_.ignore(_.stoken("T"))),g.hms,g.timeSuffix);g.d=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1]|\d)/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.dd=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1])/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.ddd=g.dddd=_.cache(_.process(g.ctoken("sun mon tue wed thu fri sat"),function(s){return function(){this.weekday=s;};}));g.M=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d|\d)/),t.month));g.MM=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d)/),t.month));g.MMM=g.MMMM=_.cache(_.process(g.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"),t.month));g.y=_.cache(_.process(_.rtoken(/^(\d\d?)/),t.year));g.yy=_.cache(_.process(_.rtoken(/^(\d\d)/),t.year));g.yyy=_.cache(_.process(_.rtoken(/^(\d\d?\d?\d?)/),t.year));g.yyyy=_.cache(_.process(_.rtoken(/^(\d\d\d\d)/),t.year));_fn=function(){return _.each(_.any.apply(null,arguments),_.not(g.ctoken2("timeContext")));};g.day=_fn(g.d,g.dd);g.month=_fn(g.M,g.MMM);g.year=_fn(g.yyyy,g.yy);g.orientation=_.process(g.ctoken("past future"),function(s){return function(){this.orient=s;};});g.operator=_.process(g.ctoken("add subtract"),function(s){return function(){this.operator=s;};});g.rday=_.process(g.ctoken("yesterday tomorrow today now"),t.rday);g.unit=_.process(g.ctoken("minute hour day week month year"),function(s){return function(){this.unit=s;};});g.value=_.process(_.rtoken(/^\d\d?(st|nd|rd|th)?/),function(s){return function(){this.value=s.replace(/\D/g,"");};});g.expression=_.set([g.rday,g.operator,g.value,g.unit,g.orientation,g.ddd,g.MMM]);_fn=function(){return _.set(arguments,g.datePartDelimiter);};g.mdy=_fn(g.ddd,g.month,g.day,g.year);g.ymd=_fn(g.ddd,g.year,g.month,g.day);g.dmy=_fn(g.ddd,g.day,g.month,g.year);g.date=function(s){return((g[Date.CultureInfo.dateElementOrder]||g.mdy).call(this,s));};g.format=_.process(_.many(_.any(_.process(_.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/),function(fmt){if(g[fmt]){return g[fmt];}else{throw Date.Parsing.Exception(fmt);}}),_.process(_.rtoken(/^[^dMyhHmstz]+/),function(s){return _.ignore(_.stoken(s));}))),function(rules){return _.process(_.each.apply(null,rules),t.finishExact);});var _F={};var _get=function(f){return _F[f]=(_F[f]||g.format(f)[0]);};g.formats=function(fx){if(fx instanceof Array){var rx=[];for(var i=0;i&lt;fx.length;i++){rx.push(_get(fx[i]));}
return _.any.apply(null,rx);}else{return _get(fx);}};g._formats=g.formats(["yyyy-MM-ddTHH:mm:ss","ddd, MMM dd, yyyy H:mm:ss tt","ddd MMM d yyyy HH:mm:ss zzz","d"]);g._start=_.process(_.set([g.date,g.time,g.expression],g.generalDelimiter,g.whiteSpace),t.finish);g.start=function(s){try{var r=g._formats.call({},s);if(r[1].length===0){return r;}}catch(e){}
return g._start.call({},s);};}());Date._parse=Date.parse;Date.parse=function(s){var r=null;if(!s){return null;}
try{r=Date.Grammar.start.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};Date.getParseFunction=function(fx){var fn=Date.Grammar.formats(fx);return function(s){var r=null;try{r=fn.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};};Date.parseExact=function(s,fx){return Date.getParseFunction(fx)(s);};
</code>
    </property>
    <property>
      <name>date.js</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>00f2d848-5654-4cb1-888c-106222e1c5b3</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>/* css for timepicker */
.ui-timepicker-div .ui-widget-header { 
margin-bottom: 8px;
 }

.ui-timepicker-div dl { text-align: left; }
.ui-timepicker-div dl dt { height: 25px; margin-bottom: -25px; }
.ui-timepicker-div dl dd { margin: 0 10px 10px 65px; }
.ui-timepicker-div td { font-size: 90%; }
.ui-tpicker-grid-label { background: none; border: none; margin: 0; padding: 0; }

.ui-timepicker-rtl{ direction: rtl; }
.ui-timepicker-rtl dl { text-align: right; }
.ui-timepicker-rtl dl dd { margin: 0 65px 10px 10px; }
#ui-datepicker-div{
 position:relative;
 width:auto;
 height:auto
}
</code>
    </property>
    <property>
      <name>datetimepicker-css</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>1</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>122a519a-316a-4b67-8877-a1a3ee4a6825</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>#contentData textarea {
    min-width: 400px;
    min-height: 100px;
}

#messages {
    color: blue;
    font-size: 1.3em;
}

#noData {
    color: red;
    font-size: 1.3em;
}
.Low{
  color: rgb(55, 179, 55);
  font-weight: bold;
}

.Medium{
  color: rgb(248, 145, 105);
  font-weight: bold;
}

.High{
  color: red;
  font-weight: bold;
}</code>
    </property>
    <property>
      <name>DisplayPolicy-css</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>2</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>5f8368ef-32e2-47a8-b0cf-beea68737b5c</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>require(['jquery'],function($){
var listMonitoring = [$("#Monitor1day"), $("#Monitor3day"), $("#Monitor7day"), $("#MonitorOtherDay")]

$("#Monitor1day").click(function(){
	setCheckedRadio(this, true)
		
	var today = new Date()
	$("#monitoringDate").val(today.addDays(-1).toString('yyyy-MM-dd HH:mm:ss'))

	//$("#FromToArea").hide('blind')
	$("#btnArea").show('clip')
})

$("#Monitor3day").click(function(){
	setCheckedRadio(this, true)
		
	var today = new Date()
	$("#monitoringDate").val(today.addDays(-3).toString('yyyy-MM-dd HH:mm:ss'))

	//$("#FromToArea").hide('blind')
	$("#btnArea").show('blind')
})

$("#Monitor7day").click(function(){
	setCheckedRadio(this, true)

	var today = new Date()
	$("#monitoringDate").val(today.addDays(-7).toString('yyyy-MM-dd HH:mm:ss'))
	

	//$("#FromToArea").hide('blind')
	$("#btnArea").show('blind')
})

$("#MonitorOtherDay").click(function(){
	setCheckedRadio(this, true)

	$("#monitoringDate").val('')

	$("#FromToArea").show('blind')
	$("#btnArea").show('blind')
})

function setCheckedRadio(selector, state){
	for(var i = 0; i &lt; listMonitoring.length; i++){
		if(listMonitoring[i][0] != selector){
			listMonitoring[i].prop('checked', !state) 
		}
	}
}

$("#ExportBtn").click(function(){
	getData(true)
})

jQuery.noConflict()
});</code>
    </property>
    <property>
      <name>exportPDF</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>3</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>ce750e05-3db6-4332-9800-f9c4c0661230</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>/**
 * Version: 1.0 Alpha-1 
 * Build Date: 13-Nov-2007
 * Copyright (c) 2006-2007, Coolite Inc. (http://www.coolite.com/). All rights reserved.
 * License: Licensed under The MIT License. See license.txt and http://www.datejs.com/license/. 
 * Website: http://www.datejs.com/ or http://www.coolite.com/datejs/
 */
Date.CultureInfo={name:"en-US",englishName:"English (United States)",nativeName:"English (United States)",dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],abbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],shortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],firstLetterDayNames:["S","M","T","W","T","F","S"],monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],abbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],amDesignator:"AM",pmDesignator:"PM",firstDayOfWeek:0,twoDigitYearMax:2029,dateElementOrder:"mdy",formatPatterns:{shortDate:"M/d/yyyy",longDate:"dddd, MMMM dd, yyyy",shortTime:"h:mm tt",longTime:"h:mm:ss tt",fullDateTime:"dddd, MMMM dd, yyyy h:mm:ss tt",sortableDateTime:"yyyy-MM-ddTHH:mm:ss",universalSortableDateTime:"yyyy-MM-dd HH:mm:ssZ",rfc1123:"ddd, dd MMM yyyy HH:mm:ss GMT",monthDay:"MMMM dd",yearMonth:"MMMM, yyyy"},regexPatterns:{jan:/^jan(uary)?/i,feb:/^feb(ruary)?/i,mar:/^mar(ch)?/i,apr:/^apr(il)?/i,may:/^may/i,jun:/^jun(e)?/i,jul:/^jul(y)?/i,aug:/^aug(ust)?/i,sep:/^sep(t(ember)?)?/i,oct:/^oct(ober)?/i,nov:/^nov(ember)?/i,dec:/^dec(ember)?/i,sun:/^su(n(day)?)?/i,mon:/^mo(n(day)?)?/i,tue:/^tu(e(s(day)?)?)?/i,wed:/^we(d(nesday)?)?/i,thu:/^th(u(r(s(day)?)?)?)?/i,fri:/^fr(i(day)?)?/i,sat:/^sa(t(urday)?)?/i,future:/^next/i,past:/^last|past|prev(ious)?/i,add:/^(\+|after|from)/i,subtract:/^(\-|before|ago)/i,yesterday:/^yesterday/i,today:/^t(oday)?/i,tomorrow:/^tomorrow/i,now:/^n(ow)?/i,millisecond:/^ms|milli(second)?s?/i,second:/^sec(ond)?s?/i,minute:/^min(ute)?s?/i,hour:/^h(ou)?rs?/i,week:/^w(ee)?k/i,month:/^m(o(nth)?s?)?/i,day:/^d(ays?)?/i,year:/^y((ea)?rs?)?/i,shortMeridian:/^(a|p)/i,longMeridian:/^(a\.?m?\.?|p\.?m?\.?)/i,timezone:/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt)/i,ordinalSuffix:/^\s*(st|nd|rd|th)/i,timeContext:/^\s*(\:|a|p)/i},abbreviatedTimeZoneStandard:{GMT:"-000",EST:"-0400",CST:"-0500",MST:"-0600",PST:"-0700"},abbreviatedTimeZoneDST:{GMT:"-000",EDT:"-0500",CDT:"-0600",MDT:"-0700",PDT:"-0800"}};
Date.getMonthNumberFromName=function(name){var n=Date.CultureInfo.monthNames,m=Date.CultureInfo.abbreviatedMonthNames,s=name.toLowerCase();for(var i=0;i&lt;n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};Date.getDayNumberFromName=function(name){var n=Date.CultureInfo.dayNames,m=Date.CultureInfo.abbreviatedDayNames,o=Date.CultureInfo.shortestDayNames,s=name.toLowerCase();for(var i=0;i&lt;n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};Date.isLeapYear=function(year){return(((year%4===0)&amp;&amp;(year%100!==0))||(year%400===0));};Date.getDaysInMonth=function(year,month){return[31,(Date.isLeapYear(year)?29:28),31,30,31,30,31,31,30,31,30,31][month];};Date.getTimezoneOffset=function(s,dst){return(dst||false)?Date.CultureInfo.abbreviatedTimeZoneDST[s.toUpperCase()]:Date.CultureInfo.abbreviatedTimeZoneStandard[s.toUpperCase()];};Date.getTimezoneAbbreviation=function(offset,dst){var n=(dst||false)?Date.CultureInfo.abbreviatedTimeZoneDST:Date.CultureInfo.abbreviatedTimeZoneStandard,p;for(p in n){if(n[p]===offset){return p;}}
return null;};Date.prototype.clone=function(){return new Date(this.getTime());};Date.prototype.compareTo=function(date){if(isNaN(this)){throw new Error(this);}
if(date instanceof Date&amp;&amp;!isNaN(date)){return(this&gt;date)?1:(this&lt;date)?-1:0;}else{throw new TypeError(date);}};Date.prototype.equals=function(date){return(this.compareTo(date)===0);};Date.prototype.between=function(start,end){var t=this.getTime();return t&gt;=start.getTime()&amp;&amp;t&lt;=end.getTime();};Date.prototype.addMilliseconds=function(value){this.setMilliseconds(this.getMilliseconds()+value);return this;};Date.prototype.addSeconds=function(value){return this.addMilliseconds(value*1000);};Date.prototype.addMinutes=function(value){return this.addMilliseconds(value*60000);};Date.prototype.addHours=function(value){return this.addMilliseconds(value*3600000);};Date.prototype.addDays=function(value){return this.addMilliseconds(value*86400000);};Date.prototype.addWeeks=function(value){return this.addMilliseconds(value*604800000);};Date.prototype.addMonths=function(value){var n=this.getDate();this.setDate(1);this.setMonth(this.getMonth()+value);this.setDate(Math.min(n,this.getDaysInMonth()));return this;};Date.prototype.addYears=function(value){return this.addMonths(value*12);};Date.prototype.add=function(config){if(typeof config=="number"){this._orient=config;return this;}
var x=config;if(x.millisecond||x.milliseconds){this.addMilliseconds(x.millisecond||x.milliseconds);}
if(x.second||x.seconds){this.addSeconds(x.second||x.seconds);}
if(x.minute||x.minutes){this.addMinutes(x.minute||x.minutes);}
if(x.hour||x.hours){this.addHours(x.hour||x.hours);}
if(x.month||x.months){this.addMonths(x.month||x.months);}
if(x.year||x.years){this.addYears(x.year||x.years);}
if(x.day||x.days){this.addDays(x.day||x.days);}
return this;};Date._validate=function(value,min,max,name){if(typeof value!="number"){throw new TypeError(value+" is not a Number.");}else if(value&lt;min||value&gt;max){throw new RangeError(value+" is not a valid value for "+name+".");}
return true;};Date.validateMillisecond=function(n){return Date._validate(n,0,999,"milliseconds");};Date.validateSecond=function(n){return Date._validate(n,0,59,"seconds");};Date.validateMinute=function(n){return Date._validate(n,0,59,"minutes");};Date.validateHour=function(n){return Date._validate(n,0,23,"hours");};Date.validateDay=function(n,year,month){return Date._validate(n,1,Date.getDaysInMonth(year,month),"days");};Date.validateMonth=function(n){return Date._validate(n,0,11,"months");};Date.validateYear=function(n){return Date._validate(n,1,9999,"seconds");};Date.prototype.set=function(config){var x=config;if(!x.millisecond&amp;&amp;x.millisecond!==0){x.millisecond=-1;}
if(!x.second&amp;&amp;x.second!==0){x.second=-1;}
if(!x.minute&amp;&amp;x.minute!==0){x.minute=-1;}
if(!x.hour&amp;&amp;x.hour!==0){x.hour=-1;}
if(!x.day&amp;&amp;x.day!==0){x.day=-1;}
if(!x.month&amp;&amp;x.month!==0){x.month=-1;}
if(!x.year&amp;&amp;x.year!==0){x.year=-1;}
if(x.millisecond!=-1&amp;&amp;Date.validateMillisecond(x.millisecond)){this.addMilliseconds(x.millisecond-this.getMilliseconds());}
if(x.second!=-1&amp;&amp;Date.validateSecond(x.second)){this.addSeconds(x.second-this.getSeconds());}
if(x.minute!=-1&amp;&amp;Date.validateMinute(x.minute)){this.addMinutes(x.minute-this.getMinutes());}
if(x.hour!=-1&amp;&amp;Date.validateHour(x.hour)){this.addHours(x.hour-this.getHours());}
if(x.month!==-1&amp;&amp;Date.validateMonth(x.month)){this.addMonths(x.month-this.getMonth());}
if(x.year!=-1&amp;&amp;Date.validateYear(x.year)){this.addYears(x.year-this.getFullYear());}
if(x.day!=-1&amp;&amp;Date.validateDay(x.day,this.getFullYear(),this.getMonth())){this.addDays(x.day-this.getDate());}
if(x.timezone){this.setTimezone(x.timezone);}
if(x.timezoneOffset){this.setTimezoneOffset(x.timezoneOffset);}
return this;};Date.prototype.clearTime=function(){this.setHours(0);this.setMinutes(0);this.setSeconds(0);this.setMilliseconds(0);return this;};Date.prototype.isLeapYear=function(){var y=this.getFullYear();return(((y%4===0)&amp;&amp;(y%100!==0))||(y%400===0));};Date.prototype.isWeekday=function(){return!(this.is().sat()||this.is().sun());};Date.prototype.getDaysInMonth=function(){return Date.getDaysInMonth(this.getFullYear(),this.getMonth());};Date.prototype.moveToFirstDayOfMonth=function(){return this.set({day:1});};Date.prototype.moveToLastDayOfMonth=function(){return this.set({day:this.getDaysInMonth()});};Date.prototype.moveToDayOfWeek=function(day,orient){var diff=(day-this.getDay()+7*(orient||+1))%7;return this.addDays((diff===0)?diff+=7*(orient||+1):diff);};Date.prototype.moveToMonth=function(month,orient){var diff=(month-this.getMonth()+12*(orient||+1))%12;return this.addMonths((diff===0)?diff+=12*(orient||+1):diff);};Date.prototype.getDayOfYear=function(){return Math.floor((this-new Date(this.getFullYear(),0,1))/86400000);};Date.prototype.getWeekOfYear=function(firstDayOfWeek){var y=this.getFullYear(),m=this.getMonth(),d=this.getDate();var dow=firstDayOfWeek||Date.CultureInfo.firstDayOfWeek;var offset=7+1-new Date(y,0,1).getDay();if(offset==8){offset=1;}
var daynum=((Date.UTC(y,m,d,0,0,0)-Date.UTC(y,0,1,0,0,0))/86400000)+1;var w=Math.floor((daynum-offset+7)/7);if(w===dow){y--;var prevOffset=7+1-new Date(y,0,1).getDay();if(prevOffset==2||prevOffset==8){w=53;}else{w=52;}}
return w;};Date.prototype.isDST=function(){console.log('isDST');return this.toString().match(/(E|C|M|P)(S|D)T/)[2]=="D";};Date.prototype.getTimezone=function(){return Date.getTimezoneAbbreviation(this.getUTCOffset,this.isDST());};Date.prototype.setTimezoneOffset=function(s){var here=this.getTimezoneOffset(),there=Number(s)*-6/10;this.addMinutes(there-here);return this;};Date.prototype.setTimezone=function(s){return this.setTimezoneOffset(Date.getTimezoneOffset(s));};Date.prototype.getUTCOffset=function(){var n=this.getTimezoneOffset()*-10/6,r;if(n&lt;0){r=(n-10000).toString();return r[0]+r.substr(2);}else{r=(n+10000).toString();return"+"+r.substr(1);}};Date.prototype.getDayName=function(abbrev){return abbrev?Date.CultureInfo.abbreviatedDayNames[this.getDay()]:Date.CultureInfo.dayNames[this.getDay()];};Date.prototype.getMonthName=function(abbrev){return abbrev?Date.CultureInfo.abbreviatedMonthNames[this.getMonth()]:Date.CultureInfo.monthNames[this.getMonth()];};Date.prototype._toString=Date.prototype.toString;Date.prototype.toString=function(format){var self=this;var p=function p(s){return(s.toString().length==1)?"0"+s:s;};return format?format.replace(/dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?/g,function(format){switch(format){case"hh":return p(self.getHours()&lt;13?self.getHours():(self.getHours()-12));case"h":return self.getHours()&lt;13?self.getHours():(self.getHours()-12);case"HH":return p(self.getHours());case"H":return self.getHours();case"mm":return p(self.getMinutes());case"m":return self.getMinutes();case"ss":return p(self.getSeconds());case"s":return self.getSeconds();case"yyyy":return self.getFullYear();case"yy":return self.getFullYear().toString().substring(2,4);case"dddd":return self.getDayName();case"ddd":return self.getDayName(true);case"dd":return p(self.getDate());case"d":return self.getDate().toString();case"MMMM":return self.getMonthName();case"MMM":return self.getMonthName(true);case"MM":return p((self.getMonth()+1));case"M":return self.getMonth()+1;case"t":return self.getHours()&lt;12?Date.CultureInfo.amDesignator.substring(0,1):Date.CultureInfo.pmDesignator.substring(0,1);case"tt":return self.getHours()&lt;12?Date.CultureInfo.amDesignator:Date.CultureInfo.pmDesignator;case"zzz":case"zz":case"z":return"";}}):this._toString();};
Date.now=function(){return new Date();};Date.today=function(){return Date.now().clearTime();};Date.prototype._orient=+1;Date.prototype.next=function(){this._orient=+1;return this;};Date.prototype.last=Date.prototype.prev=Date.prototype.previous=function(){this._orient=-1;return this;};Date.prototype._is=false;Date.prototype.is=function(){this._is=true;return this;};Number.prototype._dateElement="day";Number.prototype.fromNow=function(){var c={};c[this._dateElement]=this;return Date.now().add(c);};Number.prototype.ago=function(){var c={};c[this._dateElement]=this*-1;return Date.now().add(c);};(function(){var $D=Date.prototype,$N=Number.prototype;var dx=("sunday monday tuesday wednesday thursday friday saturday").split(/\s/),mx=("january february march april may june july august september october november december").split(/\s/),px=("Millisecond Second Minute Hour Day Week Month Year").split(/\s/),de;var df=function(n){return function(){if(this._is){this._is=false;return this.getDay()==n;}
return this.moveToDayOfWeek(n,this._orient);};};for(var i=0;i&lt;dx.length;i++){$D[dx[i]]=$D[dx[i].substring(0,3)]=df(i);}
var mf=function(n){return function(){if(this._is){this._is=false;return this.getMonth()===n;}
return this.moveToMonth(n,this._orient);};};for(var j=0;j&lt;mx.length;j++){$D[mx[j]]=$D[mx[j].substring(0,3)]=mf(j);}
var ef=function(j){return function(){if(j.substring(j.length-1)!="s"){j+="s";}
return this["add"+j](this._orient);};};var nf=function(n){return function(){this._dateElement=n;return this;};};for(var k=0;k&lt;px.length;k++){de=px[k].toLowerCase();$D[de]=$D[de+"s"]=ef(px[k]);$N[de]=$N[de+"s"]=nf(de);}}());Date.prototype.toJSONString=function(){return this.toString("yyyy-MM-ddThh:mm:ssZ");};Date.prototype.toShortDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortDatePattern);};Date.prototype.toLongDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.longDatePattern);};Date.prototype.toShortTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortTimePattern);};Date.prototype.toLongTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.longTimePattern);};Date.prototype.getOrdinal=function(){switch(this.getDate()){case 1:case 21:case 31:return"st";case 2:case 22:return"nd";case 3:case 23:return"rd";default:return"th";}};
(function(){Date.Parsing={Exception:function(s){this.message="Parse error at '"+s.substring(0,10)+" ...'";}};var $P=Date.Parsing;var _=$P.Operators={rtoken:function(r){return function(s){var mx=s.match(r);if(mx){return([mx[0],s.substring(mx[0].length)]);}else{throw new $P.Exception(s);}};},token:function(s){return function(s){return _.rtoken(new RegExp("^\s*"+s+"\s*"))(s);};},stoken:function(s){return _.rtoken(new RegExp("^"+s));},until:function(p){return function(s){var qx=[],rx=null;while(s.length){try{rx=p.call(this,s);}catch(e){qx.push(rx[0]);s=rx[1];continue;}
break;}
return[qx,s];};},many:function(p){return function(s){var rx=[],r=null;while(s.length){try{r=p.call(this,s);}catch(e){return[rx,s];}
rx.push(r[0]);s=r[1];}
return[rx,s];};},optional:function(p){return function(s){var r=null;try{r=p.call(this,s);}catch(e){return[null,s];}
return[r[0],r[1]];};},not:function(p){return function(s){try{p.call(this,s);}catch(e){return[null,s];}
throw new $P.Exception(s);};},ignore:function(p){return p?function(s){var r=null;r=p.call(this,s);return[null,r[1]];}:null;},product:function(){var px=arguments[0],qx=Array.prototype.slice.call(arguments,1),rx=[];for(var i=0;i&lt;px.length;i++){rx.push(_.each(px[i],qx));}
return rx;},cache:function(rule){var cache={},r=null;return function(s){try{r=cache[s]=(cache[s]||rule.call(this,s));}catch(e){r=cache[s]=e;}
if(r instanceof $P.Exception){throw r;}else{return r;}};},any:function(){var px=arguments;return function(s){var r=null;for(var i=0;i&lt;px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){r=null;}
if(r){return r;}}
throw new $P.Exception(s);};},each:function(){var px=arguments;return function(s){var rx=[],r=null;for(var i=0;i&lt;px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){throw new $P.Exception(s);}
rx.push(r[0]);s=r[1];}
return[rx,s];};},all:function(){var px=arguments,_=_;return _.each(_.optional(px));},sequence:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;if(px.length==1){return px[0];}
return function(s){var r=null,q=null;var rx=[];for(var i=0;i&lt;px.length;i++){try{r=px[i].call(this,s);}catch(e){break;}
rx.push(r[0]);try{q=d.call(this,r[1]);}catch(ex){q=null;break;}
s=q[1];}
if(!r){throw new $P.Exception(s);}
if(q){throw new $P.Exception(q[1]);}
if(c){try{r=c.call(this,r[1]);}catch(ey){throw new $P.Exception(r[1]);}}
return[rx,(r?r[1]:s)];};},between:function(d1,p,d2){d2=d2||d1;var _fn=_.each(_.ignore(d1),p,_.ignore(d2));return function(s){var rx=_fn.call(this,s);return[[rx[0][0],r[0][2]],rx[1]];};},list:function(p,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return(p instanceof Array?_.each(_.product(p.slice(0,-1),_.ignore(d)),p.slice(-1),_.ignore(c)):_.each(_.many(_.each(p,_.ignore(d))),px,_.ignore(c)));},set:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return function(s){var r=null,p=null,q=null,rx=null,best=[[],s],last=false;for(var i=0;i&lt;px.length;i++){q=null;p=null;r=null;last=(px.length==1);try{r=px[i].call(this,s);}catch(e){continue;}
rx=[[r[0]],r[1]];if(r[1].length&gt;0&amp;&amp;!last){try{q=d.call(this,r[1]);}catch(ex){last=true;}}else{last=true;}
if(!last&amp;&amp;q[1].length===0){last=true;}
if(!last){var qx=[];for(var j=0;j&lt;px.length;j++){if(i!=j){qx.push(px[j]);}}
p=_.set(qx,d).call(this,q[1]);if(p[0].length&gt;0){rx[0]=rx[0].concat(p[0]);rx[1]=p[1];}}
if(rx[1].length&lt;best[1].length){best=rx;}
if(best[1].length===0){break;}}
if(best[0].length===0){return best;}
if(c){try{q=c.call(this,best[1]);}catch(ey){throw new $P.Exception(best[1]);}
best[1]=q[1];}
return best;};},forward:function(gr,fname){return function(s){return gr[fname].call(this,s);};},replace:function(rule,repl){return function(s){var r=rule.call(this,s);return[repl,r[1]];};},process:function(rule,fn){return function(s){var r=rule.call(this,s);return[fn.call(this,r[0]),r[1]];};},min:function(min,rule){return function(s){var rx=rule.call(this,s);if(rx[0].length&lt;min){throw new $P.Exception(s);}
return rx;};}};var _generator=function(op){return function(){var args=null,rx=[];if(arguments.length&gt;1){args=Array.prototype.slice.call(arguments);}else if(arguments[0]instanceof Array){args=arguments[0];}
if(args){for(var i=0,px=args.shift();i&lt;px.length;i++){args.unshift(px[i]);rx.push(op.apply(null,args));args.shift();return rx;}}else{return op.apply(null,arguments);}};};var gx="optional not ignore cache".split(/\s/);for(var i=0;i&lt;gx.length;i++){_[gx[i]]=_generator(_[gx[i]]);}
var _vector=function(op){return function(){if(arguments[0]instanceof Array){return op.apply(null,arguments[0]);}else{return op.apply(null,arguments);}};};var vx="each any all".split(/\s/);for(var j=0;j&lt;vx.length;j++){_[vx[j]]=_vector(_[vx[j]]);}}());(function(){var flattenAndCompact=function(ax){var rx=[];for(var i=0;i&lt;ax.length;i++){if(ax[i]instanceof Array){rx=rx.concat(flattenAndCompact(ax[i]));}else{if(ax[i]){rx.push(ax[i]);}}}
return rx;};Date.Grammar={};Date.Translator={hour:function(s){return function(){this.hour=Number(s);};},minute:function(s){return function(){this.minute=Number(s);};},second:function(s){return function(){this.second=Number(s);};},meridian:function(s){return function(){this.meridian=s.slice(0,1).toLowerCase();};},timezone:function(s){return function(){var n=s.replace(/[^\d\+\-]/g,"");if(n.length){this.timezoneOffset=Number(n);}else{this.timezone=s.toLowerCase();}};},day:function(x){var s=x[0];return function(){this.day=Number(s.match(/\d+/)[0]);};},month:function(s){return function(){this.month=((s.length==3)?Date.getMonthNumberFromName(s):(Number(s)-1));};},year:function(s){return function(){var n=Number(s);this.year=((s.length&gt;2)?n:(n+(((n+2000)&lt;Date.CultureInfo.twoDigitYearMax)?2000:1900)));};},rday:function(s){return function(){switch(s){case"yesterday":this.days=-1;break;case"tomorrow":this.days=1;break;case"today":this.days=0;break;case"now":this.days=0;this.now=true;break;}};},finishExact:function(x){x=(x instanceof Array)?x:[x];var now=new Date();this.year=now.getFullYear();this.month=now.getMonth();this.day=1;this.hour=0;this.minute=0;this.second=0;for(var i=0;i&lt;x.length;i++){if(x[i]){x[i].call(this);}}
this.hour=(this.meridian=="p"&amp;&amp;this.hour&lt;13)?this.hour+12:this.hour;if(this.day&gt;Date.getDaysInMonth(this.year,this.month)){throw new RangeError(this.day+" is not a valid value for days.");}
var r=new Date(this.year,this.month,this.day,this.hour,this.minute,this.second);if(this.timezone){r.set({timezone:this.timezone});}else if(this.timezoneOffset){r.set({timezoneOffset:this.timezoneOffset});}
return r;},finish:function(x){x=(x instanceof Array)?flattenAndCompact(x):[x];if(x.length===0){return null;}
for(var i=0;i&lt;x.length;i++){if(typeof x[i]=="function"){x[i].call(this);}}
if(this.now){return new Date();}
var today=Date.today();var method=null;var expression=!!(this.days!=null||this.orient||this.operator);if(expression){var gap,mod,orient;orient=((this.orient=="past"||this.operator=="subtract")?-1:1);if(this.weekday){this.unit="day";gap=(Date.getDayNumberFromName(this.weekday)-today.getDay());mod=7;this.days=gap?((gap+(orient*mod))%mod):(orient*mod);}
if(this.month){this.unit="month";gap=(this.month-today.getMonth());mod=12;this.months=gap?((gap+(orient*mod))%mod):(orient*mod);this.month=null;}
if(!this.unit){this.unit="day";}
if(this[this.unit+"s"]==null||this.operator!=null){if(!this.value){this.value=1;}
if(this.unit=="week"){this.unit="day";this.value=this.value*7;}
this[this.unit+"s"]=this.value*orient;}
return today.add(this);}else{if(this.meridian&amp;&amp;this.hour){this.hour=(this.hour&lt;13&amp;&amp;this.meridian=="p")?this.hour+12:this.hour;}
if(this.weekday&amp;&amp;!this.day){this.day=(today.addDays((Date.getDayNumberFromName(this.weekday)-today.getDay()))).getDate();}
if(this.month&amp;&amp;!this.day){this.day=1;}
return today.set(this);}}};var _=Date.Parsing.Operators,g=Date.Grammar,t=Date.Translator,_fn;g.datePartDelimiter=_.rtoken(/^([\s\-\.\,\/\x27]+)/);g.timePartDelimiter=_.stoken(":");g.whiteSpace=_.rtoken(/^\s*/);g.generalDelimiter=_.rtoken(/^(([\s\,]|at|on)+)/);var _C={};g.ctoken=function(keys){var fn=_C[keys];if(!fn){var c=Date.CultureInfo.regexPatterns;var kx=keys.split(/\s+/),px=[];for(var i=0;i&lt;kx.length;i++){px.push(_.replace(_.rtoken(c[kx[i]]),kx[i]));}
fn=_C[keys]=_.any.apply(null,px);}
return fn;};g.ctoken2=function(key){return _.rtoken(Date.CultureInfo.regexPatterns[key]);};g.h=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2]|[1-9])/),t.hour));g.hh=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2])/),t.hour));g.H=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/),t.hour));g.HH=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3])/),t.hour));g.m=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.minute));g.mm=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.minute));g.s=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.second));g.ss=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.second));g.hms=_.cache(_.sequence([g.H,g.mm,g.ss],g.timePartDelimiter));g.t=_.cache(_.process(g.ctoken2("shortMeridian"),t.meridian));g.tt=_.cache(_.process(g.ctoken2("longMeridian"),t.meridian));g.z=_.cache(_.process(_.rtoken(/^(\+|\-)?\s*\d\d\d\d?/),t.timezone));g.zz=_.cache(_.process(_.rtoken(/^(\+|\-)\s*\d\d\d\d/),t.timezone));g.zzz=_.cache(_.process(g.ctoken2("timezone"),t.timezone));g.timeSuffix=_.each(_.ignore(g.whiteSpace),_.set([g.tt,g.zzz]));g.time=_.each(_.optional(_.ignore(_.stoken("T"))),g.hms,g.timeSuffix);g.d=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1]|\d)/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.dd=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1])/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.ddd=g.dddd=_.cache(_.process(g.ctoken("sun mon tue wed thu fri sat"),function(s){return function(){this.weekday=s;};}));g.M=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d|\d)/),t.month));g.MM=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d)/),t.month));g.MMM=g.MMMM=_.cache(_.process(g.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"),t.month));g.y=_.cache(_.process(_.rtoken(/^(\d\d?)/),t.year));g.yy=_.cache(_.process(_.rtoken(/^(\d\d)/),t.year));g.yyy=_.cache(_.process(_.rtoken(/^(\d\d?\d?\d?)/),t.year));g.yyyy=_.cache(_.process(_.rtoken(/^(\d\d\d\d)/),t.year));_fn=function(){return _.each(_.any.apply(null,arguments),_.not(g.ctoken2("timeContext")));};g.day=_fn(g.d,g.dd);g.month=_fn(g.M,g.MMM);g.year=_fn(g.yyyy,g.yy);g.orientation=_.process(g.ctoken("past future"),function(s){return function(){this.orient=s;};});g.operator=_.process(g.ctoken("add subtract"),function(s){return function(){this.operator=s;};});g.rday=_.process(g.ctoken("yesterday tomorrow today now"),t.rday);g.unit=_.process(g.ctoken("minute hour day week month year"),function(s){return function(){this.unit=s;};});g.value=_.process(_.rtoken(/^\d\d?(st|nd|rd|th)?/),function(s){return function(){this.value=s.replace(/\D/g,"");};});g.expression=_.set([g.rday,g.operator,g.value,g.unit,g.orientation,g.ddd,g.MMM]);_fn=function(){return _.set(arguments,g.datePartDelimiter);};g.mdy=_fn(g.ddd,g.month,g.day,g.year);g.ymd=_fn(g.ddd,g.year,g.month,g.day);g.dmy=_fn(g.ddd,g.day,g.month,g.year);g.date=function(s){return((g[Date.CultureInfo.dateElementOrder]||g.mdy).call(this,s));};g.format=_.process(_.many(_.any(_.process(_.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/),function(fmt){if(g[fmt]){return g[fmt];}else{throw Date.Parsing.Exception(fmt);}}),_.process(_.rtoken(/^[^dMyhHmstz]+/),function(s){return _.ignore(_.stoken(s));}))),function(rules){return _.process(_.each.apply(null,rules),t.finishExact);});var _F={};var _get=function(f){return _F[f]=(_F[f]||g.format(f)[0]);};g.formats=function(fx){if(fx instanceof Array){var rx=[];for(var i=0;i&lt;fx.length;i++){rx.push(_get(fx[i]));}
return _.any.apply(null,rx);}else{return _get(fx);}};g._formats=g.formats(["yyyy-MM-ddTHH:mm:ss","ddd, MMM dd, yyyy H:mm:ss tt","ddd MMM d yyyy HH:mm:ss zzz","d"]);g._start=_.process(_.set([g.date,g.time,g.expression],g.generalDelimiter,g.whiteSpace),t.finish);g.start=function(s){try{var r=g._formats.call({},s);if(r[1].length===0){return r;}}catch(e){}
return g._start.call({},s);};}());Date._parse=Date.parse;Date.parse=function(s){var r=null;if(!s){return null;}
try{r=Date.Grammar.start.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};Date.getParseFunction=function(fx){var fn=Date.Grammar.formats(fx);return function(s){var r=null;try{r=fn.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};};Date.parseExact=function(s,fx){return Date.getParseFunction(fx)(s);};
</code>
    </property>
    <property>
      <name>date.js</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>0</number>
    <className>XWiki.XWikiRights</className>
    <guid>b883711c-73aa-4973-bfcd-db8216cd1340</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups/>
    </property>
    <property>
      <levels>view,comment</levels>
    </property>
    <property>
      <users>XWiki.XWikiGuest</users>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>1</number>
    <className>XWiki.XWikiRights</className>
    <guid>6d230727-3691-441b-92ae-e8c4043e25d5</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAdminGroup,</groups>
    </property>
    <property>
      <levels>view,edit,delete,comment</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>2</number>
    <className>XWiki.XWikiRights</className>
    <guid>ed3b07c5-546a-4984-8566-1ae6f8a6cf95</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAllGroup,</groups>
    </property>
    <property>
      <levels>view,comment</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>3</number>
    <className>XWiki.XWikiRights</className>
    <guid>24e4fbdf-b0f3-4df7-8a93-7f4b9db3f640</guid>
    <property>
      <allow>0</allow>
    </property>
    <property>
      <groups/>
    </property>
    <property>
      <levels>edit,delete</levels>
    </property>
    <property>
      <users>XWiki.XWikiGuest</users>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>4</number>
    <className>XWiki.XWikiRights</className>
    <guid>6a1be68f-25e5-4d71-a5ce-c0a03767ced3</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAdminGroup,</groups>
    </property>
    <property>
      <levels>view,edit,delete,comment</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>5</number>
    <className>XWiki.XWikiRights</className>
    <guid>80e679aa-d907-413f-8631-aa492e9bd985</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAllGroup,</groups>
    </property>
    <property>
      <levels>view,comment</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>6</number>
    <className>XWiki.XWikiRights</className>
    <guid>55d01527-518c-49a6-97ed-e9c5133481d0</guid>
    <property>
      <allow>0</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAllGroup,</groups>
    </property>
    <property>
      <levels>edit,delete</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>7</number>
    <className>XWiki.XWikiRights</className>
    <guid>a0777b76-58e9-4b8a-973a-ef7823befb30</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>XWiki.XWikiAdminGroup</groups>
    </property>
    <property>
      <levels>view,comment,edit,delete</levels>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>9</number>
    <className>XWiki.XWikiRights</className>
    <guid>7af4602b-a711-48a7-b1f1-cabf7cdc09d9</guid>
    <property>
      <allow>0</allow>
    </property>
    <property>
      <groups>XWiki.XWikiAllGroup</groups>
    </property>
    <property>
      <levels>delete,edit</levels>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DisplayPolicy</name>
    <number>10</number>
    <className>XWiki.XWikiRights</className>
    <guid>f5a0ffb3-c190-468d-817a-58c6853f669d</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>XWiki.XWikiAllGroup</groups>
    </property>
    <property>
      <levels>comment,view</levels>
    </property>
  </object>
  <content>{{groovy}}
xwiki.jsx.use('WiperDogLib.JQueryUILib')
xwiki.ssx.use('WiperDogLib.JQueryUILib')
xwiki.jsx.use('WiperDogLib.JqGridLib')
xwiki.ssx.use('WiperDogLib.JqGridLib')
xwiki.jsx.use('WiperDogLib.ExportPDFLib')
xwiki.jsx.use('WiperDogLib.jsPDF')
{{/groovy}}
{{html wiki="true" clean="false"}}
&lt;body&gt;
&lt;table id="controlPanel"&gt;
	&lt;tr&gt;
		&lt;th style="min-width:150px"&gt;
			&lt;label for="monitoringDate"&gt;Monitoring From:&lt;/label&gt;
		&lt;/th&gt;
		&lt;td&gt;
			&lt;input id="monitoringDate" type="text" /&gt;			
		&lt;/td&gt;
{{/html}}
{{groovy}}
       println "{{html wiki=\"true\" clean=\"false\"}}"
       println "&lt;td rowspan=4&gt;"
       println "&lt;img id=\"resumeImg\" width=40px height=40px style=\"display:none\" src=\"" + doc.getAttachmentURL('play.png') + "\"/&gt;"
       println "&lt;img id=\"pauseImg\" width=40px height=40px style=\"display:block\" src=\"" + doc.getAttachmentURL('pause.png') + "\"/&gt;"
       println "&lt;/td&gt;"
       println "&lt;td rowspan=4&gt;"
       println "&lt;center&gt;"
       println "&lt;img id=\"loadingImg\" style=\"display:none\" src=\"" + doc.getAttachmentURL('ajax-loader.gif') + "\"/&gt;"
       println "&lt;p id=\"messages\"&gt;&lt;/p&gt;"
       println "&lt;/center&gt;"
       println "&lt;/td&gt;"
       println "{{/html}}"
{{/groovy}}
{{html wiki="true" clean="false"}}
	&lt;/tr&gt;
	&lt;tr&gt;
            &lt;th style="min-width:150px"&gt;
                Job's Name:
            &lt;/th&gt;
            &lt;td&gt;
                &lt;select style="width:500px" id="listJob"&gt;
                    &lt;option id="noChoice" value="noChoice"&gt;-select a job-&lt;/option&gt;
                &lt;/select&gt;
            &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
            &lt;th style="min-width:150px"&gt;
                IstIid's Name:
            &lt;/th&gt;
            &lt;td&gt;
                &lt;select style="width:500px" id="listIstIid"&gt;
                    &lt;option id="noChoice" value="noChoice"&gt;-select a istiid-&lt;/option&gt;
                &lt;/select&gt;
            &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr id="MonitoringDate"&gt;
		&lt;th&gt;Monitoring's time&lt;/th&gt;
		&lt;td&gt;
			&lt;table&gt;
				&lt;tr&gt;
					&lt;td&gt;
						&lt;form&gt;
						&lt;input type="radio" id="Monitor1day" name="Monitor1day" value="1day"&gt;1 day&lt;/input&gt;
						&lt;input type="radio" id="Monitor3day" name="Monitor3day" value="3days"&gt;3 days&lt;/input&gt;
						&lt;input type="radio" id="Monitor7day" name="Monitor7day" value="7days"&gt;7 days&lt;/input&gt;
						&lt;input type="radio" id="MonitorOtherDay" name="MonitorOtherDay" value="other" checked="checked"&gt;Other&lt;/input&gt;
						&lt;/form&gt;
					&lt;/td&gt;
					&lt;td&gt;
						&lt;input type="button" class="button" id="ExportBtn" value="Export"/&gt;
					&lt;/td&gt;
				&lt;/tr&gt;
			&lt;/table&gt;
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;

&lt;table id="gridList"&gt;&lt;/table&gt;&lt;div id="pager"&gt;&lt;/div&gt;

&lt;/body&gt;
{{/html}}</content>
</xwikidoc>
