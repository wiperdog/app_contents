<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>WiperDog</web>
  <name>DBConfiguration</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>WiperDog.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1382327521000</creationDate>
  <date>1383800171000</date>
  <contentUpdateDate>1383800168000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <attachment>
    <filename>ajax-loader.gif</filename>
    <filesize>2608</filesize>
    <author>XWiki.Admin</author>
    <date>1383636196000</date>
    <version>1.1</version>
    <comment/>
    <content>R0lGODlhHwAfAPUAAP///wAAAOjo6NLS0ry8vK6urqKiotzc3Li4uJqamuTk5NjY2KqqqqCgoLCw
sMzMzPb29qioqNTU1Obm5jY2NiYmJlBQUMTExHBwcJKSklZWVvr6+mhoaEZGRsbGxvj4+EhISDIy
MgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH+GkNyZWF0ZWQgd2l0aCBhamF4bG9h
ZC5pbmZvACH5BAAKAAAAIf8LTkVUU0NBUEUyLjADAQAAACwAAAAAHwAfAAAG/0CAcEgUDAgFA4Bi
wSQexKh0eEAkrldAZbvlOD5TqYKALWu5XIwnPFwwymY0GsRgAxrwuJwbCi8aAHlYZ3sVdwtRCm8J
gVgODwoQAAIXGRpojQwKRGSDCRESYRsGHYZlBFR5AJt2a3kHQlZlERN2QxMRcAiTeaG2QxJ5RnAO
v1EOcEdwUMZDD3BIcKzNq3BJcJLUABBwStrNBtjf3GUGBdLfCtadWMzUz6cDxN/IZQMCvdTBcAIA
sli0jOHSJeSAqmlhNr0awo7RJ19TJORqdAXVEEVZyjyKtE3Bg3oZE2iK8oeiKkFZGiCaggelSTiA
2LhxiZLBSjZjBL2siNBOFQ84LxHA+mYEiRJzBO7ZCQIAIfkEAAoAAQAsAAAAAB8AHwAABv9AgHBI
FAwIBQPAUCAMBMSodHhAJK5XAPaKOEynCsIWqx0nCIrvcMEwZ90JxkINaMATZXfju9jf82YAIQxR
Cm14Ww4PChAAEAoPDlsAFRUgHkRiZAkREmoSEXiVlRgfQgeBaXRpo6MOQlZbERN0Qx4drRUcAAJm
nrVDBrkVDwNjr8BDGxq5Z2MPyUQZuRgFY6rRABe5FgZjjdm8uRTh2d5b4NkQY0zX5QpjTc/lD2NO
x+WSW0++2RJmUGJhmZVsQqgtCE6lqpXGjBchmt50+hQKEAEiht5gUcTIESR9GhlgE9IH0BiTkxrM
mWIHDkose9SwcQlHDsOIk9ygiVbl5JgMLuV4HUmypMkTOkEAACH5BAAKAAIALAAAAAAfAB8AAAb/
QIBwSBQMCAUDwFAgDATEqHR4QCSuVwD2ijhMpwrCFqsdJwiK73DBMGfdCcZCDWjAE2V347vY3/Nm
dXNECm14Ww4PChAAEAoPDltlDGlDYmQJERJqEhGHWARUgZVqaWZeAFZbERN0QxOeWwgAAmabrkMS
ZkZjDrhRkVtHYw+/RA9jSGOkxgpjSWOMxkIQY0rT0wbR2LQV3t4UBcvcF9/eFpdYxdgZ5hUYA73Y
GxruCbVjt78G7hXFqlhY/fLQwR0HIQdGuUrTz5eQdIc0cfIEwByGD0MKvcGSaFGjR8GyeAPhIUof
QGNQSgrB4IsdOCqx7FHDBiYcOQshYjKDxliVDpRjunCjdSTJkiZP6AQBACH5BAAKAAMALAAAAAAf
AB8AAAb/QIBwSBQMCAUDwFAgDATEqHR4QCSuVwD2ijhMpwrCFqsdJwiK73DBMGfdCcZCDWjAE2V3
47vY3/NmdXNECm14Ww4PChAAEAoPDltlDGlDYmQJERJqEhGHWARUgZVqaWZeAFZbERN0QxOeWwgA
AmabrkMSZkZjDrhRkVtHYw+/RA9jSGOkxgpjSWOMxkIQY0rT0wbR2I3WBcvczltNxNzIW0693MFY
T7bTumNQqlisv7BjswAHo64egFdQAbj0RtOXDQY6VAAUakihN1gSLaJ1IYOGChgXXqEUpQ9ASRlD
YhT0xQ4cACJDhqDD5mRKjCAYuArjBmVKDP9+VRljMyMHDwcfuBlBooSCBQwJiqkJAgAh+QQACgAE
ACwAAAAAHwAfAAAG/0CAcEgUDAgFA8BQIAwExKh0eEAkrlcA9oo4TKcKwharHScIiu9wwTBn3QnG
Qg1owBNld+O72N/zZnVzRApteFsODwoQABAKDw5bZQxpQ2JkCRESahIRh1gEVIGVamlmXgBWWxET
dEMTnlsIAAJmm65DEmZGYw64UZFbR2MPv0QPY0hjpMYKY0ljjMZCEGNK09MG0diN1gXL3M5bTcTc
yFtOvdzBWE+207pjUKpYrL+wY7MAB4EerqZjUAG4lKVCBwMbvnT6dCXUkEIFK0jUkOECFEeQJF2h
FKUPAIkgQwIaI+hLiJAoR27Zo4YBCJQgVW4cpMYDBpgVZKL59cEBhw+U+QROQ4bBAoUlTZ7QCQIA
IfkEAAoABQAsAAAAAB8AHwAABv9AgHBIFAwIBQPAUCAMBMSodHhAJK5XAPaKOEynCsIWqx0nCIrv
cMEwZ90JxkINaMATZXfju9jf82Z1c0QKbXhbDg8KEAAQCg8OW2UMaUNiZAkREmoSEYdYBFSBlWpp
Zl4AVlsRE3RDE55bCAACZpuuQxJmRmMOuFGRW0djD79ED2NIY6TGCmNJY4zGQhBjStPTFBXb21DY
1VsGFtzbF9gAzlsFGOQVGefIW2LtGhvYwVgDD+0V17+6Y6BwaNfBwy9YY2YBcMAPnStTY1B9YMdN
iyZOngCFGuIBxDZAiRY1eoTvE6UoDEIAGrNSUoNBUuzAaYlljxo2M+HIeXiJpRsRNMaq+JSFCpsR
JEqYOPH2JQgAIfkEAAoABgAsAAAAAB8AHwAABv9AgHBIFAwIBQPAUCAMBMSodHhAJK5XAPaKOEyn
CsIWqx0nCIrvcMEwZ90JxkINaMATZXfjywjlzX9jdXNEHiAVFX8ODwoQABAKDw5bZQxpQh8YiIha
ERJqEhF4WwRDDpubAJdqaWZeAByoFR0edEMTolsIAA+yFUq2QxJmAgmyGhvBRJNbA5qoGcpED2ME
FrIX0kMKYwUUslDaj2PA4soGY47iEOQFY6vS3FtNYw/m1KQDYw7mzFhPZj5JGzYGipUtESYowzVm
F4ADgOCBCZTgFQAxZBJ4AiXqT6ltbUZhWdToUSR/Ii1FWbDnDkUyDQhJsQPn5ZU9atjUhCPHVhgT
Ny/RSKsiqKFFbUaQKGHiJNyXIAAh+QQACgAHACwAAAAAHwAfAAAG/0CAcEh8JDAWCsBQIAwExKhU
+HFwKlgsIMHlIg7TqQeTLW+7XYIiPGSAymY0mrFgA0LwuLzbCC/6eVlnewkADXVECgxcAGUaGRdQ
EAoPDmhnDGtDBJcVHQYbYRIRhWgEQwd7AB52AGt7YAAIchETrUITpGgIAAJ7ErdDEnsCA3IOwUSW
aAOcaA/JQ0amBXKa0QpyBQZyENFCEHIG39HcaN7f4WhM1uTZaE1y0N/TacZoyN/LXU+/0cNyoMxC
UytYLjm8AKSS46rVKzmxADhjlCACMFGkBiU4NUQRxS4OHijwNqnSJS6ZovzRyJAQo0NhGrgs5bIP
mwWLCLHsQsfhxBWTe9QkOzCwC8sv5Ho127akyRM7QQAAOwAAAAAAAAAAAA==
</content>
  </attachment>
  <attachment>
    <filename>data.csv</filename>
    <filesize>194</filesize>
    <author>XWiki.Admin</author>
    <date>1379502078000</date>
    <version>1.1</version>
    <comment/>
    <content>REJUWVBFLEhPU1RJRCxIT1NUTkFNRSxQT1JULFNFVEhPU1RJREFTLFVTRVJOQU1FLFNJRCxTRVRT
SURBUw0KQE1ZU1FMLGExLGxvY2FsaG9zdCwzMzA2LDEscm9vdCxpbmZvcm1hdGlvbiwwDQpAUEdT
UUwsYTIsbG9jYWxob3N0LDU0MzIsMSxwb3N0Z3JlcyxwZ2FkbWluLDANCkBNU1NRTCxhMyxsb2Nh
bGhvc3QsMTQzMywwLHNhLG1kYiwwDQo=
</content>
  </attachment>
  <attachment>
    <filename>dataTestGenDBpass.csv</filename>
    <filesize>131</filesize>
    <author>XWiki.Admin</author>
    <date>1380162671000</date>
    <version>1.1</version>
    <comment/>
    <content>REJUWVBFLCBVU0VSLCBQQVNTLCBIT1NUSUQsIFNJRA0KQE1TU1FMLCBzYSwgaW5zaWdodCwgLCAN
CkBNU1NRTCwgc2EsIGluc2lnaHQsIGxvY2FsaG9zdCwgDQpATVNTUUwsIHNhLCBpbnNpZ2h0LCBs
b2NhbGhvc3QsIHRoYW5obXg=
</content>
  </attachment>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.DBConfiguration</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>c49f5c17-ceb7-4daa-ae2a-4602003fba57</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>/*
    json2.js
    2013-05-26

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&amp;nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n &lt; 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &amp;&amp;
                        value.slice(0, 5) === 'Date(' &amp;&amp;
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

if (typeof JSON !== 'object') {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        // Format integers to have at least two digits.
        return n &lt; 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function () {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear()     + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate())      + 'T' +
                    f(this.getUTCHours())     + ':' +
                    f(this.getUTCMinutes())   + ':' +
                    f(this.getUTCSeconds())   + 'Z'
                : null;
        };

        String.prototype.toJSON      =
            Number.prototype.toJSON  =
            Boolean.prototype.toJSON = function () {
                return this.valueOf();
            };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value &amp;&amp; typeof value === 'object' &amp;&amp;
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i &lt; length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? '[]'
                    : gap
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                    : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep &amp;&amp; typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i &lt; length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? '{}'
                : gap
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i &lt; space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer &amp;&amp; typeof replacer !== 'function' &amp;&amp;
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value &amp;&amp; typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function'
                    ? walk({'': j}, '')
                    : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());




require(['jquery'],function($){
RegExp.escape = function(s) {
	return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&amp;');
};
(function($) {
	'use strict'
	$.csv = {
		defaults: {
			separator: ',',
			delimiter: '"',
			headers: true
		},
		hooks: {
			castToScalar: function(value, state) {
				var hasDot = /\./;
				if (isNaN(value)) {
					return value;
				} else {
					if (hasDot.test(value)) {
						return parseFloat(value);
					} else {
						var integer = parseInt(value);
						if (isNaN(integer)) {
							return null;
						} else {
							return integer;
						}
					}
				}
			}
		},
		parsers: {
			parse: function(csv, options) {
				var separator = options.separator;
				var delimiter = options.delimiter;
				if (!options.state.rowNum) {
					options.state.rowNum = 1;
				}
				if (!options.state.colNum) {
					options.state.colNum = 1;
				}
				var data = [];
				var entry = [];
				var state = 0;
				var value = ''
				var exit = false;

				function endOfEntry() {
					state = 0;
					value = '';
					if (options.start &amp;&amp; options.state.rowNum &lt; options.start) {
						entry = [];
						options.state.rowNum++;
						options.state.colNum = 1;
						return;
					}
					if (options.onParseEntry === undefined) {
						data.push(entry);
					} else {
						var hookVal = options.onParseEntry(entry, options.state);
						if (hookVal !== false) {
							data.push(hookVal);
						}
					}
					entry = [];
					if (options.end &amp;&amp; options.state.rowNum &gt;= options.end) {
						exit = true;
					}
					options.state.rowNum++;
					options.state.colNum = 1;
				}

				function endOfValue() {
					if (options.onParseValue === undefined) {
						entry.push(value);
					} else {
						var hook = options.onParseValue(value, options.state);
						if (hook !== false) {
							entry.push(hook);
						}
					}
					value = '';
					state = 0;
					options.state.colNum++;
				}
				var escSeparator = RegExp.escape(separator);
				var escDelimiter = RegExp.escape(delimiter);
				var match = /(D|S|\n|\r|[^DS\r\n]+)/;
				var matchSrc = match.source;
				matchSrc = matchSrc.replace(/S/g, escSeparator);
				matchSrc = matchSrc.replace(/D/g, escDelimiter);
				match = RegExp(matchSrc, 'gm');
				csv.replace(match, function(m0) {
					if (exit) {
						return;
					}
					switch (state) {
						case 0:
							if (m0 === separator) {
								value += '';
								endOfValue();
								break;
							}
							if (m0 === delimiter) {
								state = 1;
								break;
							}
							if (m0 === '\n') {
								endOfValue();
								endOfEntry();
								break;
							}
							if (/^\r$/.test(m0)) {
								break;
							}
							value += m0;
							state = 3;
							break;
						case 1:
							if (m0 === delimiter) {
								state = 2;
								break;
							}
							value += m0;
							state = 1;
							break;
						case 2:
							if (m0 === delimiter) {
								value += m0;
								state = 1;
								break;
							}
							if (m0 === separator) {
								endOfValue();
								break;
							}
							if (m0 === '\n') {
								endOfValue();
								endOfEntry();
								break;
							}
							if (/^\r$/.test(m0)) {
								break;
							}
							throw new Error('CSVDataError: Illegal State [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
						case 3:
							if (m0 === separator) {
								endOfValue();
								break;
							}
							if (m0 === '\n') {
								endOfValue();
								endOfEntry();
								break;
							}
							if (/^\r$/.test(m0)) {
								break;
							}
							if (m0 === delimiter) {
								throw new Error('CSVDataError: Illegal Quote [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
							}
							throw new Error('CSVDataError: Illegal Data [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
						default:
							throw new Error('CSVDataError: Unknown State [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
					}
				});
				if (entry.length !== 0) {
					endOfValue();
					endOfEntry();
				}
				return data;
			},
			splitLines: function(csv, options) {
				var separator = options.separator;
				var delimiter = options.delimiter;
				if (!options.state.rowNum) {
					options.state.rowNum = 1;
				}
				var entries = [];
				var state = 0;
				var entry = '';
				var exit = false;

				function endOfLine() {
					state = 0;
					if (options.start &amp;&amp; options.state.rowNum &lt; options.start) {
						entry = '';
						options.state.rowNum++;
						return;
					}
					if (options.onParseEntry === undefined) {
						entries.push(entry);
					} else {
						var hookVal = options.onParseEntry(entry, options.state);
						if (hookVal !== false) {
							entries.push(hookVal);
						}
					}
					entry = '';
					if (options.end &amp;&amp; options.state.rowNum &gt;= options.end) {
						exit = true;
					}
					options.state.rowNum++;
				}
				var escSeparator = RegExp.escape(separator);
				var escDelimiter = RegExp.escape(delimiter);
				var match = /(D|S|\n|\r|[^DS\r\n]+)/;
				var matchSrc = match.source;
				matchSrc = matchSrc.replace(/S/g, escSeparator);
				matchSrc = matchSrc.replace(/D/g, escDelimiter);
				match = RegExp(matchSrc, 'gm');
				csv.replace(match, function(m0) {
					if (exit) {
						return;
					}
					switch (state) {
						case 0:
							if (m0 === separator) {
								entry += m0;
								state = 0;
								break;
							}
							if (m0 === delimiter) {
								entry += m0;
								state = 1;
								break;
							}
							if (m0 === '\n') {
								endOfLine();
								break;
							}
							if (/^\r$/.test(m0)) {
								break;
							}
							entry += m0;
							state = 3;
							break;
						case 1:
							if (m0 === delimiter) {
								entry += m0;
								state = 2;
								break;
							}
							entry += m0;
							state = 1;
							break;
						case 2:
							var prevChar = entry.substr(entry.length - 1);
							if (m0 === delimiter &amp;&amp; prevChar === delimiter) {
								entry += m0;
								state = 1;
								break;
							}
							if (m0 === separator) {
								entry += m0;
								state = 0;
								break;
							}
							if (m0 === '\n') {
								endOfLine();
								break;
							}
							if (m0 === '\r') {
								break;
							}
							throw new Error('CSVDataError: Illegal state [Row:' + options.state.rowNum + ']');
						case 3:
							if (m0 === separator) {
								entry += m0;
								state = 0;
								break;
							}
							if (m0 === '\n') {
								endOfLine();
								break;
							}
							if (m0 === '\r') {
								break;
							}
							if (m0 === delimiter) {
								throw new Error('CSVDataError: Illegal quote [Row:' + options.state.rowNum + ']');
							}
							throw new Error('CSVDataError: Illegal state [Row:' + options.state.rowNum + ']');
						default:
							throw new Error('CSVDataError: Unknown state [Row:' + options.state.rowNum + ']');
					}
				});
				if (entry !== '') {
					endOfLine();
				}
				return entries;
			},
			parseEntry: function(csv, options) {
				var separator = options.separator;
				var delimiter = options.delimiter;
				if (!options.state.rowNum) {
					options.state.rowNum = 1;
				}
				if (!options.state.colNum) {
					options.state.colNum = 1;
				}
				var entry = [];
				var state = 0;
				var value = '';

				function endOfValue() {
					if (options.onParseValue === undefined) {
						entry.push(value);
					} else {
						var hook = options.onParseValue(value, options.state);
						if (hook !== false) {
							entry.push(hook);
						}
					}
					value = '';
					state = 0;
					options.state.colNum++;
				}
				if (!options.match) {
					var escSeparator = RegExp.escape(separator);
					var escDelimiter = RegExp.escape(delimiter);
					var match = /(D|S|\n|\r|[^DS\r\n]+)/;
					var matchSrc = match.source;
					matchSrc = matchSrc.replace(/S/g, escSeparator);
					matchSrc = matchSrc.replace(/D/g, escDelimiter);
					options.match = RegExp(matchSrc, 'gm');
				}
				csv.replace(options.match, function(m0) {
					switch (state) {
						case 0:
							if (m0 === separator) {
								value += '';
								endOfValue();
								break;
							}
							if (m0 === delimiter) {
								state = 1;
								break;
							}
							if (m0 === '\n' || m0 === '\r') {
								break;
							}
							value += m0;
							state = 3;
							break;
						case 1:
							if (m0 === delimiter) {
								state = 2;
								break;
							}
							value += m0;
							state = 1;
							break;
						case 2:
							if (m0 === delimiter) {
								value += m0;
								state = 1;
								break;
							}
							if (m0 === separator) {
								endOfValue();
								break;
							}
							if (m0 === '\n' || m0 === '\r') {
								break;
							}
							throw new Error('CSVDataError: Illegal State [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
						case 3:
							if (m0 === separator) {
								endOfValue();
								break;
							}
							if (m0 === '\n' || m0 === '\r') {
								break;
							}
							if (m0 === delimiter) {
								throw new Error('CSVDataError: Illegal Quote [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
							}
							throw new Error('CSVDataError: Illegal Data [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
						default:
							throw new Error('CSVDataError: Unknown State [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
					}
				});
				endOfValue();
				return entry;
			}
		},
		toArray: function(csv, options, callback) {
			var options = (options !== undefined ? options : {});
			var config = {};
			config.callback = ((callback !== undefined &amp;&amp; typeof(callback) === 'function') ? callback : false);
			config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator;
			config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter;
			var state = (options.state !== undefined ? options.state : {});
			var options = {
				delimiter: config.delimiter,
				separator: config.separator,
				onParseEntry: options.onParseEntry,
				onParseValue: options.onParseValue,
				state: state
			}
			var entry = $.csv.parsers.parseEntry(csv, options);
			if (!config.callback) {
				return entry;
			} else {
				config.callback('', entry);
			}
		},
		toArrays: function(csv, options, callback) {
			var options = (options !== undefined ? options : {});
			var config = {};
			config.callback = ((callback !== undefined &amp;&amp; typeof(callback) === 'function') ? callback : false);
			config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator;
			config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter;
			var data = [];
			var options = {
				delimiter: config.delimiter,
				separator: config.separator,
				onParseEntry: options.onParseEntry,
				onParseValue: options.onParseValue,
				start: options.start,
				end: options.end,
				state: {
					rowNum: 1,
					colNum: 1
				}
			};
			data = $.csv.parsers.parse(csv, options);
			if (!config.callback) {
				return data;
			} else {
				config.callback('', data);
			}
		},
		toObjects: function(csv, options, callback) {
			var options = (options !== undefined ? options : {});
			var config = {};
			config.callback = ((callback !== undefined &amp;&amp; typeof(callback) === 'function') ? callback : false);
			config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator;
			config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter;
			config.headers = 'headers' in options ? options.headers : $.csv.defaults.headers;
			options.start = 'start' in options ? options.start : 1;
			if (config.headers) {
				options.start++;
			}
			if (options.end &amp;&amp; config.headers) {
				options.end++;
			}
			var lines = [];
			var data = [];
			var options = {
				delimiter: config.delimiter,
				separator: config.separator,
				onParseEntry: options.onParseEntry,
				onParseValue: options.onParseValue,
				start: options.start,
				end: options.end,
				state: {
					rowNum: 1,
					colNum: 1
				},
				match: false
			};
			var headerOptions = {
				delimiter: config.delimiter,
				separator: config.separator,
				start: 1,
				end: 1,
				state: {
					rowNum: 1,
					colNum: 1
				}
			}
			var headerLine = $.csv.parsers.splitLines(csv, headerOptions);
			var headers = $.csv.toArray(headerLine[0], options);
			var lines = $.csv.parsers.splitLines(csv, options);
			options.state.colNum = 1;
			if (headers) {
				options.state.rowNum = 2;
			} else {
				options.state.rowNum = 1;
			}
			for (var i = 0, len = lines.length; i &lt; len; i++) {
				var entry = $.csv.toArray(lines[i], options);
				var object = {};
				for (var j in headers) {
					object[headers[j]] = entry[j];
				}
				data.push(object);
				options.state.rowNum++;
			}
			if (!config.callback) {
				return data;
			} else {
				config.callback('', data);
			}
		},
		fromArrays: function(arrays, options, callback) {
			var options = (options !== undefined ? options : {});
			var config = {};
			config.callback = ((callback !== undefined &amp;&amp; typeof(callback) === 'function') ? callback : false);
			config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator;
			config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter;
			config.escaper = 'escaper' in options ? options.escaper : $.csv.defaults.escaper;
			config.experimental = 'experimental' in options ? options.experimental : false;
			if (!config.experimental) {
				throw new Error('not implemented');
			}
			var output = [];
			for (i in arrays) {
				output.push(arrays[i]);
			}
			if (!config.callback) {
				return output;
			} else {
				config.callback('', output);
			}
		},
		fromObjects2CSV: function(objects, options, callback) {
			var options = (options !== undefined ? options : {});
			var config = {};
			config.callback = ((callback !== undefined &amp;&amp; typeof(callback) === 'function') ? callback : false);
			config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator;
			config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter;
			config.experimental = 'experimental' in options ? options.experimental : false;
			if (!config.experimental) {
				throw new Error('not implemented');
			}
			var output = [];
			for (i in objects) {
				output.push(arrays[i]);
			}
			if (!config.callback) {
				return output;
			} else {
				config.callback('', output);
			}
		}
	};
	$.csvEntry2Array = $.csv.toArray;
	$.csv2Array = $.csv.toArrays;
	$.csv2Dictionary = $.csv.toObjects;
})(jQuery);
jQuery.noConflict()
})


</code>
    </property>
    <property>
      <name>json-2</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.DBConfiguration</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>b8a9c35f-e0ce-4e68-846a-3481747237e2</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>var mapMessage = {
	no_data_file: "No data from file to load !!!",
	no_data_display: "No data to display",
	err_run_wiperdog: "Can not get data info from configuration file !.Wiperdog is on yet ?",
	err_dbtype: "DB type is required",
	err_hostID_1: "Host ID is required",
	err_hostID_2: "Host ID can not contain punctuation character ('.')",
	err_hostName: "Host name is required",
	err_port_1: "Port is required",
	err_port_2: "Port must be numeric",
	err_userName: "Username is required",
	err_setHostID: "'Set host ID as a DBinfo element' is must be checked if  'Set Sid as a DBinfo element' is checked",
	err_sid: "Sid is required if 'Set Sid as a DBinfo element' is checked ",
	add_ok: "DB Info Updated !",
	add_fail: "Failed to Update ",
	update_db_info: "Key is exist ,want to update ?",
	load_success: "Load from file successfully",
	confirm_add_dbinfo: "Do you want to add there DBInfomation ?"
}
var dataCSV = null
var checkMerge = false
var originResult = null
var fileName = ""
var servlet = ""

// UPLOAD FILE TO XWIKI
var targetInput = document.getElementById("my_upload");
if (targetInput) {
	new XWiki.FileUploader(targetInput, {
		autoUpload: true,
		progressAutohide: true,
		responseURL: '/xwiki/bin/get/WiperDog/DBConfiguration?xpage=attachmentslist',
		responseContainer: $('my_upload_results'),
		fileFilter: /^.*\.(?!csv).*$/

	})
}

require(['jquery'], function($) {
	// DOCUMENT READY
	$(document).ready(function() {
		// Show / hide tip for CSV file
		$('#showCSVTip').click(function() {
			$('#csvTip').toggle()
		})

		// Get data from default.params and draw DB Info table
		init();

		// Validate when click "ADD TO LIST DBINFO" button: if textarea empty then show error message
		$('#loadFromFile').click(function(event) {
			var data = $('#fileContent').val();
			if ($.trim(data) == "") {
				$('#messageLoadFile').text(mapMessage['no_data_file'])
				return
			}
		})

		// Click button "ADD TO LIST DBINFO" =&gt; extend data from CSV files into originResult
		$(document).on('click', '#formUpload .attachment', function() {
			$(this).click(function() {
				fileName = $(this).find('.name').children().text()
				$.ajax({
					type: "GET",
					url: "/xwiki/bin/download/WiperDog/DBConfiguration/" + fileName,
					dataType: "text",
					async: false,
					success: function(data) {
						$('#fileContent').show()
						$('#fileContent').val(data)
						$('#loadFromFile').unbind('click')
						$('#loadFromFile').click(function(event) {
							var data = $('#fileContent').val();
							var listObject = []
							var map_db_info = {}
							if (data != null &amp;&amp; data != "") {
								listObject = $.csv.toObjects(data)
								var valid = validCSV(listObject)
								if (valid['status'] == false) {
									$('#messageLoadFile').text('Failed to load data Reason: ' + valid['message'])
									return
								} else {
									$('#messageLoadFile').text("");
									for (var i = 0; i &lt; listObject.length; i++) {
										createDBInfoElement(map_db_info, listObject[i])
									}
								}
							}
							var keysCSV = [];
							for (var key in map_db_info) {
								keysCSV.push(key)
							}
							var keysOrigin = [];
							for (k in originResult) {
								keysOrigin.push(k);
							}
							var rowsRemove = []
							for (var i = 0; i &lt; keysCSV.length; i++) {
								for (var j = 0; j &lt; keysOrigin.length; j++) {
									if (keysCSV[i] == keysOrigin[j]) {
										var conf = confirm("Data at line " + (i + 2) + " is duplicate with another existed. Ovewrite it ?")
										if (!conf) {
											return
										} else {
											delete originResult[keysCSV[i]]
											var rows = document.getElementById('table_display').rows
											for (var k = 0; k &lt; rows.length; k++) {
												var key2remove = rows[k].cells[0].innerText || rows[k].cells[0].textContent
												if (keysCSV[i] == key2remove) {
													//document.getElementById('table_display').deleteRow(k);
													rowsRemove.push(k)
												}
											}
										}
									}
								}
							}
							dataCSV = map_db_info
							//Fill to table
							if (rowsRemove.length &gt; 0) {
								rowsRemove.sort()
								rowsRemove.reverse()

								for (var i = 0; i &lt; rowsRemove.length; i++) {
									document.getElementById('table_display').deleteRow(rowsRemove[i]);
								}
								rowsRemove = []
							}
							for (key in map_db_info) {
								fillCSVToTable(key, map_db_info[key], 'table_display')
							}
							originResult = $.extend(originResult, dataCSV);

							$('#fileContent').val("");
							$('#messageLoadFile').text(mapMessage['load_success'])

						});;
					},
					error: function(xhr, status, error) {
						showErrorMsg(xhr, status, error)
					}
				});
			})
		});

		// extend data was entered from form "Add new data" into originResult
		processData(originResult)

		/**
		 * processData:
		 *  - extend data was entered from form "Add new data" into originResult
		 *  - process edit, delete row in table display
		 * @param result: originResult
		 * @return db information (add new) was generated to tr node and append into table display
		*/
		function processData(result) {
			if (dataCSV != null) {
				result = $.extend(result, dataCSV);
				checkMerge = true
			}
			var dbtype = ""
			var hostID = ""
			var hostName = ""
			var port = ""
			var userName = ""
			var sid = ""
			var str_json = $("#dbInfoContent").val()
			var map_db_info = {}

			// Click "ADD" button
			$("#add").click(function() {
				dbtype = $("#dbtype").val()
				hostName = $("#hostName").val()
				userName = $("#userName").val()
				if (!checkMerge) {
					result = $.extend(result, dataCSV);
					checkMerge = true
				}
				$("#message_add").text("")

				// Validate DB type
				if(validateEmptyText("dbtype")) {
					return
				}

				// Validate hostID
				hostID = $("#hostID").val()
				if (hostID == "") {
					$("#err_hostID ").text(mapMessage['err_hostID_1'])
					$("#hostID").focus()
					return
				} else {
					if (hostID.indexOf(".") &gt;= 0) {
						$("#err_hostID").text(mapMessage['err_hostID_2'])
						return
					} else {
						$("#err_hostID").text("")
					}
				}

				// Validate host name
				if(validateEmptyText("hostName")) {
					return
				}

				// Validate port
				port = $("#port").val()
				if (port == "") {
					$("#err_port ").text(mapMessage['err_port_1'])
					$("#port").focus()
					return
				} else {
					var intRegex = /^\d+$/;
					if (!intRegex.test(port)) {
						$("#err_port ").text(mapMessage['err_port_2'])
						return
					} else {
						$("#err_port").text("")
					}
				}

				// Validate user name
				if(validateEmptyText("userName")) {
					return
				}

				// Validate sid
				sid = $("#sid").val()
				var key = dbtype
				if ($("#setHostIdAs").is(":checked")) {
					key = hostID + "-" + key
				}
				if ($("#setSidAs").is(':checked')) {
					if (!$("#setHostIdAs").is(':checked')) {
						$("#err_sid").text(mapMessage['err_setHostID'])
						$("#setHostIdAs").focus()
						return
					} else {
						$("#err_sid").text("")
					}
					if (sid == "") {
						$("#err_sid").text(mapMessage['err_sid'])
						$("#sid").focus()
						return
					} else {
						$("#err_sid").text("")
						key = key + "-" + sid
					}
				}
				var update = false
				var exist = false
				for (key_in_result in result) {
					if (key_in_result == key) {
						exist = true
						update = confirm(mapMessage['update_db_info'])
						break;
					}
				}
				if (update == true || exist == false) {
					$("#dbtype").removeAttr('disabled')
					$("#hostID").removeAttr('readonly')
					$("#sid").removeAttr('readonly')
					var map_db_info = {}
					var map_db_info_inner = {}
					var db_conn_str = ""
					if (dbtype == "@MYSQL") {
						db_conn_str = "jdbc:mysql://" + hostName + ":" + port
					}
					if (dbtype == "@PGSQL") {
						db_conn_str = "jdbc:postgresql://" + hostName + ":" + port
					}
					if (dbtype == "@MSSQL") {
						db_conn_str = "jdbc:sqlserver://" + hostName + ":" + port
					}

					map_db_info_inner["dbconnstr"] = db_conn_str
					map_db_info_inner["user"] = userName
					map_db_info_inner["dbHostId"] = hostID
					map_db_info_inner["dbSid"] = sid
					map_db_info[key] = map_db_info_inner
					var tr_node = document.createElement("tr")
					var td_node_key = document.createElement("td")
					var text_node_key = document.createTextNode(key)
					td_node_key.appendChild(text_node_key)
					tr_node.appendChild(td_node_key)
					for (key_in_map_db in map_db_info_inner) {
						var td_value = document.createElement("td")
						var text_node_value = document.createTextNode(map_db_info_inner[key_in_map_db])
						td_value.appendChild(text_node_value)
						tr_node.appendChild(td_value)
					}


					if (update) {
						delete result[key]
						var rows = document.getElementById('table_display').rows
						for (var i = 0; i &lt; rows.length; i++) {
							var key2remove = rows[i].cells[0].innerText || rows[i].cells[0].textContent
							if (key == key2remove) {
								bindDataToRow(rows[i], {1: db_conn_str, 2: userName, 3: hostID, 4: sid})
							}
						}
					} else {
						var td_node_button = document.createElement("td");
						var btn_delete = document.createElement("input") ;
						var btn_edit = document.createElement("input");
						setAttributeBtn(btn_delete, "Delete")
						setAttributeBtn(btn_edit, "Edit")

						td_node_button.appendChild(btn_delete)
						td_node_button.appendChild(btn_edit)
						tr_node.appendChild(td_node_button)
						tr_node.setAttribute("style", "width:113px;align: center")

						$("#table_display").append(tr_node)
					}
					result[key] = map_db_info_inner
				} else {
					if (!update) {
						$("#dbtype").prop('disabled', false).removeClass('readonly').css('background-color', '#FFF').css('color', "#636B75")
						$("#hostID").prop('readonly', false).removeClass('readonly').css('background-color', '#FFF').css('color', "#636B75")
						$("#setHostIdAs").prop('disabled', false).removeClass('readonly')
						$("#setSidAs").prop('disabled', false).removeClass('readonly')
						$("#sid").prop('readonly', false).removeClass('readonly').css('background-color', '#FFF').css('color', "#636B75")

					}
				}
				resetElements()
			});

			// Click "DELETE" a row from table display
			$(document).on("click", ".delete_btn", function() {
				if (!checkMerge) {
					result = $.extend(result, dataCSV);
					checkMerge = true
				}

				var conf_del = confirm("Are you sure ?")
				if (conf_del) {
					var row = deleteRow(this)
					var key_remove = row.cells[0].innerText || row.cells[0].textContent
					delete result[key_remove]

				}
			})

			// Click "EDIT" a row of table display
			$(document).on("click", ".edit_btn", function() {
				if (!checkMerge) {
					result = $.extend(result, dataCSV);
					checkMerge = true
				}
				editRow(this, result)
				$("#dbtype").prop('disabled', 'disabled').addClass('readonly')
				$("#hostID").prop('readonly', 'readonly').addClass('readonly')
				$("#setHostIdAs").prop('disabled', 'disabled').addClass('readonly')
				$("#setSidAs").prop('disabled', 'disabled').addClass('readonly')
				$("#sid").prop('readonly', 'readonly').addClass('readonly')
				$(".readonly").css('background', '#636B75')
				$(".readonly").css('color', 'white')
				$("#hostName").focus()
			})

			// Click "CREATE DB INFO"
			$("#create_db_info").click(function() {
				if (!checkMerge) {
					result = $.extend(result, dataCSV);
					checkMerge = true
				}
				var confirm_create = confirm(mapMessage['confirm_add_dbinfo'])
				if (confirm_create) {
					var json_str = JSON.stringify(result)
					ajax_post_data(servlet, json_str, mapMessage)
				}
			})
		}

		// Click "RESET" button =&gt; reset elements of form "Add new data"
		$("#reset").click(function() {
			resetElements()
		})

		// Click "CANCEL" button =&gt; redirect to main control of wiperdog
		$("#cancel").click(function() {
			window.location.replace("/xwiki/bin/view/WiperDog/WebHome")
		})
	})

	/**
	 * init:
	 *  - Get data in default.params file =&gt; draw DB Info table
	 *  - Set value for map data originResult
	 * @return originResult
	*/
	function init() {
		// Get dbinfo servlet
		var param = 'dbinfo'
		$.ajax({
			type: "GET",
			async: false,
			url: "/xwiki/bin/get/WiperDog/GetServlet?outputSyntax=plain&amp;name=" + param,
			success: function(result) {
				servlet = result
			},
			error: function(xhr, status, error) {
				showErrorMsg(xhr, status, error)
			}
		});

		// Get data from default.params (use dbinfo servlet) =&gt; draw DB Info table
		$.ajax({
			type: "GET",
			crossDomain: true,
			url: servlet,
			dataType: 'json',
			async: false,
			success: function(result) {
				if (!(result instanceof Array)) {
					draw_table(result)
				} else {
					var table = "&lt;table style= 'width:930px'id='table_display'&gt;&lt;tr&gt;&lt;th&gt;KEY&lt;/th&gt;&lt;th&gt;DB connect string&lt;/th&gt;&lt;th&gt;Username&lt;/th&gt;&lt;th&gt;Host&lt;/th&gt;&lt;th&gt;Sid&lt;/th&gt;&lt;th&gt;ACTION&lt;/th&gt;&lt;/tr&gt;"
					$("#message_add").text(mapMessage['no_data_display'])
					result = {}
					$("#display").html(table)
				}
				originResult = result
			},
			error: function(xhr, status, error) {
				showErrorMsg(xhr, status, error)
				$("#message_add").text(mapMessage['err_run_wiperdog'])
			}
		});
	}

	/**
	 * resetElements: reset elements in form "Add new data" to be init
	 * set value of #dbtype, #hostID, #sid, #hostName, #port, #username to be empty
	 * enable checkboxes #setHostIdAs, #setSidAs
	*/
	function resetElements() {
		$("#dbtype").val("").prop('disabled', false).css('background-color', '#FFF').css('color', "#636B75")
		$("#hostID").val("").prop('readonly', false).css('background-color', '#FFF').css('color', "#636B75")
		$("#sid").val("").prop('readonly', false).css('background-color', '#FFF').css('color', "#636B75")

		$("#hostName").val("")
		$("#port").val("")
		$("#userName").val("")
		$("#setHostIdAs").prop('checked', false).prop('disabled', false)
		$("#setSidAs").prop('checked', false).prop('disabled', false)
	}

	/**
	 * validateEmptyText: show message when input text is empty
	 * @param inputText: dbtype, hostName, userName
	*/
	function validateEmptyText(inputText) {
		var inputVal = $("#" + inputText).val()
		if (inputVal == "") {
			$("#err_" + inputText).text(mapMessage['err_' + inputText])
			$("#" + inputText).focus()
			return true
		} else {
			$("#err_" + inputText).text("")
			return false
		}
	}

	/**
	 * draw_table: draw DB Info table from map data receive
	 * @param result: map data from default.params
	 * @return table DB Info
	*/
	function draw_table(result) {
		var table = "&lt;table style= 'width:930px 'id='table_display' &gt;&lt;tr&gt;&lt;th&gt;KEY&lt;/th&gt;&lt;th&gt;DB connect string&lt;/th&gt;&lt;th&gt;Username&lt;/th&gt;&lt;th&gt;Host&lt;/th&gt;&lt;th&gt;Sid&lt;/th&gt;&lt;th&gt;ACTION&lt;/th&gt;&lt;/tr&gt;"
		for (key in result) {
			var str_tr = ""
			str_tr = "&lt;tr&gt;&lt;td&gt;" + key + "&lt;/td&gt;"
			str_tr += "&lt;td&gt;" + result[key]['dbconnstr'] + "&lt;/td&gt;"
			str_tr += "&lt;td&gt;" + result[key]['user'] + "&lt;/td&gt;"
			str_tr += "&lt;td&gt;" + result[key]['dbHostId'] + "&lt;/td&gt;"
			str_tr += "&lt;td&gt;" + result[key]['dbSid'] + "&lt;/td&gt;"
			str_tr += "&lt;td  style='width:113px;align: center'&gt;&lt;input type='button' style='width:50px ;margin-left:5px' class='delete_btn button'  value='Delete'/&gt;&lt;input type='button' style='width:50px;margin-left:5px' class='edit_btn button'  value='Edit'/&gt;&lt;/td&gt;&lt;/tr&gt;"
			table += str_tr
		}
		table += "&lt;/table&gt;"
		$("#display").html(table)
	}

	/**
	 * validCSV: process validate data import from CSV fle
	 *  - Each line must be has 8 element
	 *  - DBTYPE, HOSTID, HOSTNAME, PORT, USERNAME must be valid
	 *  - DBTYPE only accept following value:  @MYSQL , @MSSQL ,@PGSQL
	 *  - HOSTID can not contains punctuation character "."
	 *  - PORT must be numeric
	 *  - SETSIDAS must be 0 if SID is empty
	 *  - SETSIDAS must be 0 if SETHOSTIDAS is 0
	 *  - SETHOSTIDAS must be 0 or 1 (true or false)
	 *  - SETSIDAS must be 0 or 1 (true or false)
	 * @param data: list, each element is a map
	 * @return map validate (status and corresponding message)
	*/
	function validCSV(data) {
		var message = ""
		var status = true
		var msgValid = {
			required_8_elements: "Missing params: Params required 8 elements on a row - Line ",
			required_valid: "Following param can not empty:  DBTYPE , HOSTID ,HOSTNAME, PORT,USERNAME - Line ",
			required_dbtype_accept: "DBTYPE only accept following value:  @MYSQL , @MSSQL ,@PGSQL - Line ",
			required_hostid: "HOSTID can not contains punctuation character . - Line ",
			required_port_numberic: "PORT must be numeric - Line ",
			required_setsidas_sid: "SETSIDAS must be 0 if SID is empty - Line ",
			required_setsidas_sethostidas: "SETSIDAS must be 0 if SETHOSTIDAS is 0 - Line ",
			required_sethostidas: "SETHOSTIDAS must be 0 or 1 (true or false) - Line ",
			required_setsidas: "SETSIDAS must be 0 or 1 (true or false) - Line "
		}
		// Loop list data import from CSV file
		for (var i = 0; i &lt; data.length; i++) {
			// Each row must be has 8 elements
			var num = 0
			for (key in data[i]) {
				if(key.indexOf("function ") == -1) {
				    num++
				}
				if (data[i][key] == null) {
					message = msgValid['required_8_elements'] + (i + 2)
					status = false
					break
				}
			}
			if (num != 8 || status == false) {
				message = msgValid['required_8_elements'] + (i + 2)
				status = false
				break
			}

			// DBTYPE, HOSTID, HOSTNAME, PORT, USERNAME must be valid
			if (data[i]['DBTYPE'] == "" || data[i]['HOSTID'] == "" || data[i]['PORT'] == "" || data[i]['HOSTNAME'] == "" || data[i]['USERNAME'] == "") {
				message = msgValid['required_valid'] + (i + 2)
				status = false
				break
			}

			// DBTYPE only accept following value:  @MYSQL , @MSSQL ,@PGSQL
			if (data[i]['DBTYPE'] != '@MSSQL' &amp;&amp; data[i]['DBTYPE'] != '@MYSQL' &amp;&amp; data[i]['DBTYPE'] != '@PGSQL') {
				message = msgValid['required_dbtype_accept'] + (i + 2)
				status = false
				break
			}

			// HOSTID can not contains punctuation character "."
			if (data[i]['HOSTID'].indexOf('.') &gt; -1) {
				message = msgValid['required_hostid'] + (i + 2)
				status = false
				break
			}

			// PORT must be numeric
			if (!$.isNumeric(data[i]['PORT'])) {
				message = msgValid['required_port_numberic'] + (i + 2)
				status = false
				break
			}

			// SETSIDAS must be 0 if SID is empty
			if (data[i]['SID'] == "") {
				if (data[i]['SETSIDAS'] == 1) {
					message = msgValid['required_setsidas_sid'] + (i + 2)
					status = false
					break
				}
			}

			// SETSIDAS must be 0 if SETHOSTIDAS is 0
			if ((data[i]['SETHOSTIDAS'] == 0) &amp;&amp; (data[i]['SETSIDAS'] == 1)) {
				message = msgValid['required_setsidas_sethostidas'] + (i + 2)
				status = false
				break
			}

			// SETHOSTIDAS must be 0 or 1 (true or false)
			if ((data[i]['SETHOSTIDAS']) != 0 &amp;&amp; (data[i]['SETHOSTIDAS']) != 1) {
				message = msgValid['required_sethostidas'] + (i + 2)
				status = false
				break
			}

			// SETSIDAS must be 0 or 1 (true or false)
			if ((data[i]['SETSIDAS']) != 0 &amp;&amp; (data[i]['SETSIDAS']) != 1) {
				message = msgValid['required_setsidas'] + (i + 2)
				status = false
				break
			}
		}
		return {
			status: status,
			message: message
		}
	}

	/**
	 * createDBInfoElement: store data receive from CSV file into map_db_info
	 * @param map_db_info: empty map, to store data receive from CSV file
	 * @param data: list object import from CSV file
	 * @return map_db_info
	*/
	function createDBInfoElement(map_db_info, data) {
		var map_db_info_inner = {}
		var db_conn_str = ""
		if (data['DBTYPE'] == "@MYSQL") {
			db_conn_str = "jdbc:mysql://"
		}
		if (data['DBTYPE'] == "@PGSQL") {
			db_conn_str = "jdbc:postgresql://"
		}
		if (data['DBTYPE'] == "@MSSQL") {
			db_conn_str = "jdbc:sqlserver://"
		}
		db_conn_str += data['HOSTNAME'] + ":" + data['PORT']
		map_db_info_inner["dbconnstr"] = db_conn_str
		map_db_info_inner["user"] = data['USERNAME']
		map_db_info_inner["dbHostId"] = data['HOSTID']
		map_db_info_inner["dbSid"] = data['SID']
		var key = data['DBTYPE']
		if (data['SETHOSTIDAS'] == 1) {
			key = data['HOSTID'] + "-" + key
		}
		if (data['SETSIDAS'] == 1) {
			key = key + "-" + data['SID']
		}
		map_db_info[key] = map_db_info_inner
		return map_db_info
	}

	/**
	 * fillCSVToTable: generate an element of map_db_info to tr_node and append it into table
	 * @param key: a key of map db info
	 * @param map_db_info_inner: value corresponding with key
	 * @param tableId: id of table
	 * @return append a tr_node into this table
	*/
	function fillCSVToTable(key, map_db_info_inner, tableId) {
		var table_display = document.getElementById(tableId)
		var tr_node = document.createElement("tr")
		var td_node_key = document.createElement("td")
		var text_node_key = document.createTextNode(key)
		td_node_key.appendChild(text_node_key)
		tr_node.appendChild(td_node_key)
		for (key_in_map_db in map_db_info_inner) {
			var td_value = document.createElement("td")
			var text_node_value = document.createTextNode(map_db_info_inner[key_in_map_db])
			td_value.appendChild(text_node_value)
			tr_node.appendChild(td_value)
		}
		var td_node_button = document.createElement("td");
		var btn_delete = document.createElement("input") ;
		var btn_edit = document.createElement("input");
		// Set attribute
		setAttributeBtn(btn_delete, "Delete")
		setAttributeBtn(btn_edit, "Edit")

		td_node_button.appendChild(btn_delete)
		td_node_button.appendChild(btn_edit)
		tr_node.appendChild(td_node_button)
		tr_node.setAttribute("style", "width:113px;align: center")
		table_display.appendChild(tr_node)
	}

	/**
	 * setAttributeBtn: set attribute for delete and edit input element
	 * @param btn: input element
	 * @param strType: value of input element
	*/
	function setAttributeBtn(btn, strType) {
		btn.setAttribute("type", "button");    
		btn.setAttribute("class", strType.toLowerCase() + "_btn button");    
		btn.setAttribute("value", strType);    
		btn.setAttribute("style", "width:50px ; margin-left:5px");
	}

	/**
	* Bind data into row
	* Browse mapValue to get index and value of that index
	* then bind data into row
	* @param row Row to be binded
	* @param mapValue Map of index and value of it
	*/
	function bindDataToRow(row, mapValue){
		if(row != null &amp;&amp; mapValue != null &amp;&amp; mapValue != {}){
			for(item in mapValue){
				row.cells[item].innerText = mapValue[item]
				row.cells[item].textContent = mapValue[item]
			}
		}
	}

	/**
	 * deleteRow: delete a row from a table_display
	 * @param r: node delete
	 * @return row: row was choosen to delete
	*/
	function deleteRow(r) {
		var i = r.parentNode.parentNode.rowIndex;
		var row = r.parentNode.parentNode
		document.getElementById('table_display').deleteRow(i);
		return row
	}

	/**
	 * editRow: edit a row in table_display
	 * @param r: node edit
	 * @param result: 
	 * @return values of node edit(r) was fill into form "Add new data"
	*/
	function editRow(r, result) {
		var row = r.parentNode.parentNode
		var key_remove = row.cells[0].innerText || row.cells[0].textContent
		for (key in result) {
			if (key === key_remove) {
				var arr_conn_str = result[key]['dbconnstr'].split(":")
				var indexOfDoubleSlash = arr_conn_str[2].indexOf("//")
				var hostName = arr_conn_str[2].substring(indexOfDoubleSlash + 2)
				if (key.indexOf('@MSSQL') != -1) {
					$("#dbtype").val('@MSSQL')
					if (key.charAt(key.indexOf('@MSSQL') - 1) == '-') {
						$("#setHostIdAs").prop('checked', true)
					} else {
						$("#setHostIdAs").prop('checked', false)
					}
					if (key.charAt(key.indexOf('@MSSQL') + 6) == '-') {
						$("#setSidAs").prop('checked', true)
					} else {
						$("#setSidAs").prop('checked', false)
					}
				} else {

					if (key.indexOf('@MYSQL') != -1) {
						$("#dbtype").val('@MYSQL')
						if (key.charAt(key.indexOf('@MYSQL') - 1) == '-') {
							$("#setHostIdAs").prop('checked', true)
						} else {
							$("#setHostIdAs").prop('checked', false)
						}
						if (key.charAt(key.indexOf('@MYSQL') + 6) == '-') {
							$("#setSidAs").prop('checked', true)
						} else {
							$("#setSidAs").prop('checked', false)
						}

					} else {
						if (key.indexOf('@PGSQL') != -1) {
							$("#dbtype").val('@PGSQL')
							if (key.charAt(key.indexOf('@PGSQL') - 1) == '-') {
								$("#setHostIdAs").prop('checked', true)
							} else {
								$("#setHostIdAs").prop('checked', false)
							}
							if (key.charAt(key.indexOf('@PGSQL') + 6) == '-') {
								$("#setSidAs").prop('checked', true)
							} else {
								$("#setSidAs").prop('checked', false)
							}

						}
					}
				}
				var indexOfSlash = arr_conn_str[3].indexOf('/')
				var port
				if (indexOfSlash != -1) {
					port = arr_conn_str[3].substring(0, indexOfSlash)
				} else {
					port = arr_conn_str[3]
				}
				$("#hostID").val(result[key]['dbHostId'])
				$("#hostName").val(hostName)
				$("#port").val(port)
				$("#userName").val(result[key]['user'])
				$("#sid").val(result[key]['dbSid'])
			}
		}
	}

	/**
	 * ajax_post_data:
	 *  - send data (all db information) to servlet
	 *  - receive response form servlet
	 *  - check status and show corresponding message
	 * @param servlet: dbinfo
	 * @param myData: map final db information
	 * @param mapMessage: mapMessage
	 * @return show message corresponding with process write data to default.params
	*/
	function ajax_post_data(servlet, myData, mapMessage) {
		$.ajax({
			type: "POST",
			crossDomain: true,
			url: servlet,
			dataType: 'json',
			data: myData,
			success: function(result) {
				if (result.status == "success") {
					$("#message_add").text(mapMessage['add_ok'])
					location.reload();
				} else {
					$("#message_add").text(mapMessage['add_fail'])
				}
			},
			error: function(xhr, status, error) {
				showErrorMsg(xhr, status, error)
				$("#message_add").text(mapMessage['add_fail'])
			}
		});
	}

    /**
     * showErrorMsg: console log error when send and receive data
    */
	function showErrorMsg(xhr, status, error) {
        console.log(xhr)
        console.log(status)
        console.log(error)
    }

	jQuery.noConflict();
});</code>
    </property>
    <property>
      <name>process</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.DBConfiguration</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>b86c25a6-899b-4990-ad8f-f624abdd0477</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>body, html {
  height: 100% !importain;
}

#dbConfig {
 max-width:300px;
 float: left;
 height: 100%;
}
#dbConfig .require{
color:red
}
#dbConfig .error{
color:red;
font-weight:normal
}


#dbInfo{
 margin-left:30px;
 float:left;
}
#message_add , #messageLoadFile {
 align:center;
 color:green;
 font-weight:bold
}
#table_display th,td{
 text-align:center
}
.readonly{
 background-color:red
}
.warnning{
  color:#147CC1
}
#header{
background-color: #F3F3F3;
width: 100%;
text-align: center
}
</code>
    </property>
    <property>
      <name>DBconfig-css</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.DBConfiguration</name>
    <number>1</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>bbe1fbf1-3bac-440c-9e31-29fce1a674af</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm') .upload-status-container{position:relative}.upload-status{position:relative;padding:.3em 1em .3em 22px;background:$theme.highlightColor none 2px .8em no-repeat;margin:.5em 0;clear:both}.upload-inprogress{background-image:url("$xwiki.getSkinFile('icons/xwiki/spinner.gif')")}.upload-done{background-image:url("$xwiki.getSkinFile('icons/silk/tick.png')")}.upload-canceled{background-image:url("$xwiki.getSkinFile('icons/silk/cancel.png')")}.upload-error{background-image:url("$xwiki.getSkinFile('icons/silk/delete.png')")}.progress-info,.file-info{font-size:.91em}.file-info{margin:.5em 0}.file-info .file-name{font-weight:bold}.file-info .file-size{font-style:italic;font-size:.83em}.file-info .buttonwrapper,.file-info .upload-canceled-label{float:right;margin:0}.progress-info{opacity:.5}.upload-inprogress .progress-info{opacity:1}.progress-info .progress-time{float:right;text-align:right}.progress-info .progress-percentage{margin:0 .5em 0 0}.progress-info .progress,.progress-info .progress-container{height:6px;border-radius:3px}.progress-info .progress{background-color:$theme.notificationSuccessColor;box-shadow:inset 0 0 5px rgba(1,1,1,.2);width:0}.progress-info .progress-container{border:1px solid $theme.notificationSuccessColor;border-radius:4px;-moz-box-sizing:border-box;box-sizing:border-box;box-shadow:0 0 5px rgba(0,0,0,.2),inset 0 0 5px rgba(0,0,0,.2);height:8px;margin:.3em 0;width:100%}.upload-canceled .file-info .file-name,.upload-error .file-info .file-name{color:$theme.notificationErrorColor}.upload-canceled .progress-info .progress-container{border-color:$theme.notificationWarningColor}.upload-canceled .progress-info .progress{background-color:$theme.notificationWarningColor}.upload-error .progress-info .progress{background-color:$theme.notificationErrorColor}.upload-error .progress-info .progress-container{border-color:$theme.notificationErrorColor}.upload-canceled-label{color:$theme.notificationErrorColor!important;font-weight:bold}



#formUpload{
width:60%;
margin-left: 30px;
margin-top:17px;
float: left;
border:1px solid #F3F3F3

}
#fileContent{
width: 100%;
height: 100%;

}

pre {
font-size: 0.65em;
color: #636B75
}


#btnLoadFile{
text-align: center
}
#formUpload a:hover{
cursor: pointer
}
#fileContent{
 min-height: 100px
}
#showCSVTip{
background-color: #157ABE;
color: #F3F3F3;
font-weight: bold
}
#header2{
background-color:#F3F3F3;
font-weight:bold;
font-size:1.2em;
color: #2173AF
}
#csvTip{
font-size: 1.5em
}</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DBConfiguration</name>
    <number>0</number>
    <className>XWiki.XWikiRights</className>
    <guid>e2fc0974-4114-41b7-9751-dbb71d1823bd</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups/>
    </property>
    <property>
      <levels>view,comment</levels>
    </property>
    <property>
      <users>XWiki.XWikiGuest</users>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DBConfiguration</name>
    <number>1</number>
    <className>XWiki.XWikiRights</className>
    <guid>7c06c3b9-81e1-4b46-a20e-a034cfdbca8b</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAdminGroup,</groups>
    </property>
    <property>
      <levels>view,edit,delete,comment</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DBConfiguration</name>
    <number>2</number>
    <className>XWiki.XWikiRights</className>
    <guid>d40ae840-d820-45f7-9815-06d2ec325977</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAllGroup,</groups>
    </property>
    <property>
      <levels>view,comment</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DBConfiguration</name>
    <number>3</number>
    <className>XWiki.XWikiRights</className>
    <guid>a42fd9e8-f1bf-4b99-84fc-929bace3f868</guid>
    <property>
      <allow>0</allow>
    </property>
    <property>
      <groups/>
    </property>
    <property>
      <levels>edit,delete</levels>
    </property>
    <property>
      <users>XWiki.XWikiGuest</users>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DBConfiguration</name>
    <number>4</number>
    <className>XWiki.XWikiRights</className>
    <guid>b585f149-d68b-4d24-9092-627d0261289e</guid>
    <property>
      <allow>0</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAllGroup,</groups>
    </property>
    <property>
      <levels>edit,delete</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DBConfiguration</name>
    <number>5</number>
    <className>XWiki.XWikiRights</className>
    <guid>f59d9de2-ab07-4048-b312-ae127c50d8cc</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAdminGroup,</groups>
    </property>
    <property>
      <levels>view,edit,delete,comment</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DBConfiguration</name>
    <number>7</number>
    <className>XWiki.XWikiRights</className>
    <guid>2b2bc297-0d1f-4c4d-8d8a-b272b4a53cbc</guid>
    <property>
      <allow>0</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAllGroup,</groups>
    </property>
    <property>
      <levels>edit,delete</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DBConfiguration</name>
    <number>8</number>
    <className>XWiki.XWikiRights</className>
    <guid>003d816b-e30b-4d57-9e4c-80290df660c0</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAllGroup,</groups>
    </property>
    <property>
      <levels>view,comment</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DBConfiguration</name>
    <number>9</number>
    <className>XWiki.XWikiRights</className>
    <guid>b6ddb224-7e30-48ab-92ed-0e94dedc71ce</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>XWiki.XWikiAdminGroup</groups>
    </property>
    <property>
      <levels>view,comment,edit,delete</levels>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DBConfiguration</name>
    <number>11</number>
    <className>XWiki.XWikiRights</className>
    <guid>97b24ec0-f249-4b2f-b245-a6440a8ca587</guid>
    <property>
      <allow>0</allow>
    </property>
    <property>
      <groups>XWiki.XWikiAllGroup</groups>
    </property>
    <property>
      <levels>delete,edit</levels>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.DBConfiguration</name>
    <number>12</number>
    <className>XWiki.XWikiRights</className>
    <guid>a49e75f7-84da-4ede-9ceb-f699e085b699</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>XWiki.XWikiAllGroup</groups>
    </property>
    <property>
      <levels>comment,view</levels>
    </property>
  </object>
  <content>{{include document="WiperDog.checkService"/}}

{{velocity}}
 $xwiki.jsfx.use('uicomponents/widgets/upload.js')
 $xwiki.ssfx.use('uicomponents/widgets/upload.css')
 $xwiki.ssx.use('WiperDog.checkService')
{{html wiki="true" clean="false"}}

&lt;div id="wrapper"&gt;
   &lt;div id="header"&gt;
      &lt;h1&gt;
      Database Configuration
      &lt;h1&gt;
   &lt;/div&gt;
   &lt;div id="dbConfig"&gt;
      &lt;form action="#" method="POST" &gt;
         &lt;table  &gt;
            &lt;tr style="text-align:center"&gt;
               &lt;th colspan="2"&gt;
                  &lt;h3&gt;Add new data&lt;/h3&gt;
               &lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;th&gt;Database type &lt;span class="require"&gt;(*)&lt;/span&gt;&lt;/th&gt;
               &lt;td&gt;
                  &lt;select id="dbtype"&gt;
                     &lt;option value=""&gt;...&lt;/option&gt;
                     &lt;option value="@MYSQL"&gt;MYSQL&lt;/option&gt;
                     &lt;option value="@MSSQL"&gt;SQL SERVER&lt;/option&gt;
                     &lt;option value="@PGSQL"&gt;POSTGRES SQL&lt;/option&gt;
                  &lt;/select&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;th colspan="2"&gt;Host Information&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;th&gt;Host id&lt;span class="require"&gt; (*)&lt;/span&gt;&lt;/th&gt;
               &lt;td&gt;&lt;input type="text" name="hostID" id="hostID" autocomplete="on"/&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;th&gt;Host name&lt;span class="require"&gt; (*) &lt;/span&gt;&lt;/th&gt;
               &lt;td&gt;&lt;input type="text" name="hostName" id="hostName" autocomplete="on" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;th&gt;Port&lt;span class="require"&gt; (*) &lt;/span&gt;&lt;/th&gt;
               &lt;td&gt;&lt;input type="text" name="port" id="port" autocomplete="on"/&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;th colspan="2"&gt;Set host ID as a DBinfo element: &lt;input type="checkbox" id="setHostIdAs"  /&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;th colspan="2"&gt;DB information :&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;th &gt;Username &lt;span class="require"&gt; (*) &lt;/span&gt;&lt;/th&gt;
               &lt;td&gt;&lt;input type="text" name="userName" id="userName" autocomplete="on"/&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;th &gt;Sid &lt;/th&gt;
               &lt;td&gt;&lt;input type="text" id="sid" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;th colspan="2"&gt;Set Sid as a DBinfo element  &lt;input type="checkbox" id="setSidAs"  /&gt;&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td align=center&gt;&lt;input type = "button" style="width:100px" id="add" type="button" class="button" value="Add" style="width:100px ;align:center"/&gt;
               &lt;td align=center&gt;&lt;input type = "reset"  style="width:100px" id="reset" class="button"  value="Reset" style="width:100px ;align:center"/&gt;&lt;/td&gt;
               &lt;/th&gt;
            &lt;/tr&gt;
         &lt;/table&gt;
         &lt;span class="error" id="err_dbtype"&gt;&lt;/span&gt;
         &lt;span class="error" id="err_hostID"&gt;&lt;/span&gt;
         &lt;span class="error" id="err_hostName"&gt;&lt;/span&gt;
         &lt;span class="error" id="err_port"&gt;&lt;/span&gt;
         &lt;span class="error" id="err_userName"&gt;&lt;/span&gt;
         &lt;span class="error" id="err_sid"&gt;&lt;/span&gt;
         &lt;span class="warnning" id="warnning"&gt;&lt;/span&gt;
      &lt;/form&gt;
   &lt;/div&gt;

   &lt;div id = 'formUpload'&gt;
      &lt;div id='header2'&gt;Import from CSV file&lt;/div&gt;
      &lt;a id="showCSVTip"&gt;Tip for csv file&lt;/a&gt;
      &lt;div id="csvTip" style="display:none"&gt;
      	&lt;pre&gt;
       	CSV file format :
      		DBTYPE,HOSTID,HOSTNAME,PORT,SETHOSTIDAS,USERNAME,SID,SETSIDAS
			@MYSQL,hostID01,hostName01,13111,1,userName01,sid01,1
			@MSSQL,hostID02,hostName02,13111,1,userName02,sid02,0
			@MSSQL,hostID03,hostName03,13111,0,userName03,sid03,0
		+ Header must be following string : DBTYPE,HOSTID,HOSTNAME,PORT,SETHOSTIDAS,USERNAME,SID,SETSIDAS
		+ DBTYPE only acept @MYSQL,@MSSQL,@PGSQL
		+ HOSTID cannot contain character "."
		+ Both of SETHOSTIDAS and SETSIDAS only accept value 0 or 1 (true or false)
		&lt;/pre&gt;
      &lt;/div&gt;

      &lt;form action="${doc.getURL('upload')}" enctype="mutipart/form-data" method="post"&gt;
         &lt;input type="file" name="filepath_11" id="my_upload" /&gt;
         &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
         &lt;div id="fileName"&gt;&lt;/div&gt;
         &lt;div id="my_upload_results" &gt;
            #template('attachmentslist.vm')
         &lt;/div&gt;
         &lt;textarea id='fileContent'&gt; &lt;/textarea&gt;
         &lt;div id="btnLoadFile"&gt;&lt;input type='button' id='loadFromFile' class = 'button' value="Add to List DBinfo"/&gt;&lt;/div&gt;
         &lt;div id='messageLoadFile'&gt;&lt;/div&gt;
      &lt;/form&gt;
   &lt;/div&gt;
   &lt;div id="dbInfo"&gt;
      &lt;h1&gt;DB Info&lt;/h1&gt;
      &lt;div id="display"&gt;&lt;img src="/xwiki/bin/download/WiperDog/DBConfiguration/ajax-loader.gif"/&gt;&lt;/div&gt;
      &lt;div&gt;
         &lt;input type="button" id="create_db_info" style="width:100px"  class="button" value = "Create DB Info"/&gt;
         &lt;input type="button" id="cancel" style="width:100px"  class="button" value = "Cancel"/&gt;
         &lt;br/&gt;
         &lt;span id="message_add"&gt;&lt;span&gt;
      &lt;/div&gt;
   &lt;/div&gt;
&lt;/div&gt;

{{/html}}

{{/velocity}}</content>
</xwikidoc>
